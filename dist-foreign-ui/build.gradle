import com.copyright.rup.scm.gradle.plugins.PluginUtils
import fi.jasoft.plugin.GradleVaadinPlugin
import fi.jasoft.plugin.tasks.CompileThemeTask
import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'rup-war-ui'

if (!project.plugins.findPlugin(GradleVaadinPlugin)) {
    project.apply(plugin: GradleVaadinPlugin)
}

rupTomcat {
    tomcatVersion = '8.0.33'
}

vaadin {
    version = "${vaadinVersion}"
    manageDependencies = false
    manageRepositories = false
}

dependencies {
    compile project(':dist-foreign-domain')
    compile project(':dist-foreign-service')

    compile("com.copyright.rup.vaadin:rup-vaadin-core:${rupVaadinVersion}")
    compile("com.copyright.rup.vaadin:rup-vaadin-theme:${rupVaadinVersion}")
    compile("com.copyright.rup.security.auth:rup-auth-common:${rupAuthVersion}")
    compile("ru.xpoft.vaadin:spring-vaadin-integration:${vaadinSpringIntegrationAddonVersion}")

    runtime("com.copyright.rup.security.auth:rup-auth-consumer:${rupAuthVersion}")
    runtime("com.copyright.rup.common:rup-common-web:${rupCommonWebVersion}")
    runtime("com.copyright.rup.common:rup-common-config:${rupCommonConfigVersion}")
    runtime("org.codehaus.janino:janino:${janinoVersion}")
    runtime("com.vaadin:vaadin-push:${vaadinVersion}")
    runtime("org.springframework.security:spring-security-core:${springSecurityVersion}")

    testCompile("nl.jqno.equalsverifier:equalsverifier:${equalsVerifierVersion}")
    testCompile("com.copyright.rup.dist.common:dist-common-test:${distCommonVersion}")
    //Java 8 compatibility
    testCompile("cglib:cglib-nodep:${cglibNodepVersion}")

    testUiCompile("com.copyright.rup.vaadin:rup-vaadin-test:${rupVaadinVersion}")

    // TODO {pavelliakh} replace dependencies after EmbeddedPostgresDatabaseFactory will be updated.
    // Dependecies for Wrapper, that overrides com.copyright.rup.common.test.integ.db.embedded.EmbeddedPostgresDatabaseFactory
    // since it's not configurable.
    // For lib version follow
    // https://github.com/CopyrightClearanceCenter/rup-common/blob/master/rup-common-test-integ/build.gradle .
    testUiCompile("ru.yandex.qatools.embed:postgresql-embedded:2.3")
    testUiCompile("org.liquibase:liquibase-core:2.0.5")

    testUiCompile project(path: ":dist-foreign-repository", configuration: "testIntegRuntime")

    testUiWebApp project(path: ":dist-foreign-repository", configuration: "testIntegRuntime")
}

rupWarUi {
    embeddedTomcat {
        httpPort = 22000
        stopPort = 22001
    }
}

uiTest {
    //Execute only on Local environment or test server until resolving issue with running Selenium Webdriver on Jenkinks
    boolean isOnTestServer = ['prd1cmbuild5.copyright.com', 'prd1cmbuild6.copyright.com'].contains(PluginUtils.getHost())
    onlyIf { !PluginUtils.onBuildServer() || isOnTestServer }

    testLogging {
        // UI tests are generally slower and fewer in number, so log the start of each test
        events 'started', 'skipped', 'failed'
    }
}

task compileVaadinTheme(type: CompileThemeTask, group: "rupVaadin")

war {
    dependsOn 'compileVaadinTheme'
    exclude '**/*.scss'
    filesMatching("**/*.xml") {
        filter(ReplaceTokens, tokens: ['vaadinProductionMode': 'true'])
    }
}

String pidLocation = "${projectDir}/build/tmp/embeddedPostgres/postgres.pid"

afterEvaluate {
    appBeforeIntegrationTest.doFirst {
        systemProperty "dbPidLocation",pidLocation
    }
}

//This hook used for closing PostgreSQL processes when uiTest task was closed early
Runtime.runtime.addShutdownHook({
    File file = new File(pidLocation)
    if (file.exists()) {
        String pid = file.text
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            Runtime.runtime.exec("Taskkill /PID " + pid + " /F")
        } else if (org.gradle.internal.os.OperatingSystem.current().isLinux() ||
                org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            Runtime.runtime.exec("kill -9 " + pid)
        }
        file.deleteOnExit()
    }
})
