/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.copyright.rup.dist.foreign.ui.rest.gen.api;

import com.copyright.rup.dist.foreign.ui.rest.gen.model.Error;
import com.copyright.rup.dist.foreign.ui.rest.gen.model.JobStatus;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "Jobs", description = "the Jobs API")
public interface JobsApi {

    default JobsApiDelegate getDelegate() {
        return new JobsApiDelegate() {};
    }

    @ApiOperation(value = "Gets status of the job", nickname = "getJobStatus", notes = "Gets status of the job", response = JobStatus.class, tags={ "jobs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The job is waiting", response = JobStatus.class),
        @ApiResponse(code = 202, message = "The job is running", response = JobStatus.class),
        @ApiResponse(code = 404, message = "Job not found. Error code [NOT_FOUND]", response = Error.class),
        @ApiResponse(code = 500, message = "Unexpected error. Error code [INTERNAL_SERVER_ERROR]", response = Error.class) })
    @RequestMapping(value = "/jobs/{jobName:.+}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<JobStatus> getJobStatus(@ApiParam(value = "",required=true) @PathVariable("jobName") String jobName) {
        return getDelegate().getJobStatus(jobName);
    }


    @ApiOperation(value = "Triggers the job", nickname = "triggerJob", notes = "Triggers the job", response = JobStatus.class, tags={ "jobs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The job is triggred", response = JobStatus.class),
        @ApiResponse(code = 202, message = "The job is already running", response = JobStatus.class),
        @ApiResponse(code = 404, message = "Job not found. Error code [NOT_FOUND]", response = Error.class),
        @ApiResponse(code = 500, message = "Unexpected error. Error code [INTERNAL_SERVER_ERROR]", response = Error.class) })
    @RequestMapping(value = "/jobs/{jobName:.+}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<JobStatus> triggerJob(@ApiParam(value = "",required=true) @PathVariable("jobName") String jobName) {
        return getDelegate().triggerJob(jobName);
    }

}
