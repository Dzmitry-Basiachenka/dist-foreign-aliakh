buildscript {
    repositories {
        maven { url rupRepoExtUrl }
        ivy { url rupRepoReleaseUrl }
        if ( project.hasProperty('developPlugins') ) {
            ivy { url file(System.getProperty('user.home') + '/.ivylocal') }
        }
    }
    dependencies {
        classpath("com.copyright.rup.scm.gradle.plugins:rup-gradle-plugins:${rupGradlePluginsVersion}")
        classpath("fi.jasoft.plugin:gradle-vaadin-plugin:${gradleVaadinPluginVersion}")
    }
}

apply plugin: 'rup-java'
apply plugin: 'rup-idea'

allprojects {
    group='com.copyright.rup.dist.foreign'
}

subprojects {
    def styleCheckConfigDir = rootProject.getProjectDir().getCanonicalPath() + '/tools/stylecheck/'
    checkstyle {
        configProperties.suppressionsFile = styleCheckConfigDir + 'checkstyle-suppressions.xml'
    }
    findbugs {
        // fail build if exists a call private java 8 method reference
        toolVersion = '3.0.1'
        // fail build if findbugs exceptions found
        ignoreFailures = false
        // Higher levels increase precision and find more bugs
        effort = "max"
        // Report all bugs
        reportLevel = "low"
        excludeFilter = file("${styleCheckConfigDir}findbugs_excludes.xml")
    }

    // Enabling pmd fail on error (disabled by rup-plugin)
    pmd {
        ignoreFailures = false
        ruleSetFiles = files("${styleCheckConfigDir}pmd_rules.xml")
    }
    [pmdMain, pmdTest, pmdTestInteg]*.ignoreFailures = false

    tasks.test.rupCodeCoverage {
        preInstrument = true
    }

    integrationTest.doFirst {
        systemProperty "dbPidLocation", "${projectDir}/build/tmp/embeddedPostgres/postgres.pid"
    }

    //This hook used for closing PostgreSQL processes when integrationTest task was closed early
    Runtime.runtime.addShutdownHook({
        def pidLocation = System.getProperty("dbPidLocation")
        if (null != pidLocation) {
            File file = new File(pidLocation)
            if (file.exists()) {
                String pid = file.text
                if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                    Runtime.runtime.exec("Taskkill /PID " + pid + " /F")
                } else if (org.gradle.internal.os.OperatingSystem.current().isLinux() ||
                        org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                    Runtime.runtime.exec("kill -9 " + pid)
                }
                file.deleteOnExit()
            }
        }
    })
}
