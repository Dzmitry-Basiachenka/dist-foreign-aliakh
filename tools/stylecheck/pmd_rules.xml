<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="Distributions"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0
            http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>
        Rule set for Distributions projects
    </description>
    <exclude-pattern>.*/gen/.*</exclude-pattern>
    <rule ref="category/java/bestpractices.xml">
        <exclude name="AccessorMethodGeneration"/>
        <!--Too many messages to write-->
        <exclude name="JUnitAssertionsShouldIncludeMessage"/>
        <!--False positive on java8 predicates: https://github.com/pmd/pmd/issues/572-->
        <exclude name="JUnit4TestShouldUseTestAnnotation"/>
        <!--False positive on equalsVerifier library-->
        <exclude name="JUnitTestsShouldIncludeAssert"/>
        <exclude name="JUnitTestContainsTooManyAsserts"/>
    </rule>
    <rule ref="category/java/bestpractices.xml/GuardLogStatement">
        <properties>
            <property name="logLevels">
                <value>"[trace, debug, log, finest, finer, fine, severe]"</value>
            </property>
        </properties>
    </rule>


    <rule ref="category/java/codestyle.xml">
        <!--There is a need to have descriptive variable names especially in tests-->
        <exclude name="LongVariable"/>
        <exclude name="MethodArgumentCouldBeFinal"/>
        <exclude name="AtLeastOneConstructor"/>
        <exclude name="LocalVariableCouldBeFinal"/>
        <exclude name="CommentDefaultAccessModifier"/>
        <!--Ternary check is false positive sometimes and fails when common case goes first-->
        <exclude name="ConfusingTernary"/>
        <!--Positive on auto generated equals methods-->
        <exclude name="OnlyOneReturn"/>
        <exclude name="CallSuperInConstructor"/>
        <!--Usually Base or Common prefix are used for this purposes-->
        <exclude name="AbstractNaming"/>
        <!--Event short variables can be descriptive-->
        <exclude name="ShortVariable"/>
        <!--TODO fails on package access fields and methods in package access classes: find the way to fix-->
        <exclude name="DefaultPackage"/>
        <!--Static imports are used for unit tests-->
        <exclude name="TooManyStaticImports"/>

    </rule>

    <rule ref="category/java/codestyle.xml/ShortClassName">
        <properties>
            <property name="minimum">
                <value>4</value>
            </property>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ShortMethodName">
        <properties>
            <property name="minimum">
                <value>2</value>
            </property>
        </properties>
    </rule>

    <rule ref="category/java/design.xml">
        <exclude name="AvoidCatchingGenericException"/>
        <exclude name="CouplingBetweenObjects"/>
        <exclude name="DataClass"/>
        <exclude name="ExcessiveClassLength"/>
        <exclude name="ExcessiveImports"/>
        <exclude name="ExcessiveParameterList"/>
        <exclude name="ExcessivePublicCount"/>
        <exclude name="GodClass"/>
        <exclude name="LawOfDemeter"/>
        <!--Ignoring because of unit tests-->
        <exclude name="TooManyMethods"/>
        <!--Not applicable for integration tests-->
        <exclude name="UseObjectForClearerAPI"/>
    </rule>

    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <properties>
            <property name="methodReportLevel">
                <value>15</value>
            </property>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/NcssCount">
        <properties>
            <!--Max count for method. if more method needs refactoring-->
            <property name="methodReportLevel">
                <value>45</value>
            </property>
            <!--Max count for class. This value was used to support existing Tests-->
            <property name="classReportLevel">
                <value>1000</value>
            </property>
        </properties>
    </rule>

    <!--TODO consider decreasing the maxfields value. Need to optimize UsageDto, Usage class-->
    <rule ref="category/java/design.xml/TooManyFields">
        <properties>
            <property name="maxfields">
                <value>37</value>
            </property>
        </properties>
    </rule>

    <!--TODO enable this rule-->
    <!--<rule ref="category/java/documentation.xml"/>-->

    <rule ref="category/java/errorprone.xml">
        <exclude name="BeanMembersShouldSerialize"/>
        <exclude name="ConstructorCallsOverridableMethod"/>
        <!--False positive on utility methods-->
        <exclude name="DataflowAnomalyAnalysis"/>
        <!--False positive in messages from constants-->
        <exclude name="InvalidSlf4jMessageFormat"/>
        <exclude name="MissingSerialVersionUID"/>
        <!--Required in reset methods of test builders-->
        <exclude name="NullAssignment"/>
    </rule>
    <rule ref="category/java/errorprone.xml/AssignmentInOperand">
        <properties>
            <property name="allowIncrementDecrement">
                <value>true</value>
            </property>
            <property name="allowWhile">
                <value>true</value>
            </property>
        </properties>
    </rule>

    <rule ref="category/java/multithreading.xml">
        <!--False positive on ImmutableHashMap-->
        <exclude name="UseConcurrentHashMap"/>
        <!--Threads are used for Vaadin webapp, not complying with J2EE spec-->
        <exclude name="DoNotUseThreads"/>
    </rule>
    <rule ref="category/java/performance.xml">
        <!--Sometimes it's really necessary. For ex. while sending messages to upstream systems-->
        <exclude name="AvoidInstantiatingObjectsInLoops"/>
        <!--False positive since string concatenation is implemented through the StringBuilder-->
        <exclude name="UseStringBufferForStringAppends"/>
    </rule>
</ruleset>
