buildscript {
    repositories {
        maven { url rupRepoExtUrl }
        ivy { url rupRepoReleaseUrl }
        if (project.hasProperty('developPlugins')) {
            ivy { url file(System.getProperty('user.home') + '/.ivylocal') }
        }
    }
    dependencies {
        classpath("com.copyright.rup.scm.gradle.plugins:rup-gradle-plugins:${rupGradlePluginsVersion}")
        classpath "gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.11.0"

        classpath ('io.github.swagger2markup:swagger2markup-gradle-plugin:1.3.3') {
            exclude group: "com.google.guava"
        }
        classpath ('io.github.swagger2markup:swagger2markup:1.3.3') {
            exclude group: "com.google.guava"
        }
        classpath ('io.github.swagger2markup:swagger2markup-import-files-ext:1.3.3') {
            exclude group: "com.google.guava"
        }
        classpath ('org.asciidoctor:asciidoctor-gradle-plugin:1.5.3')
        classpath ('org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1')
    }
}

repositories {
    maven { url rupRepoExtUrl }
}

apply plugin: 'rup-application'
apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'io.github.swagger2markup'
apply plugin: 'org.asciidoctor.convert'

dependencies {
    compile "io.springfox:springfox-swagger2:${springfoxVersion}"
    swaggerCodegen "io.swagger:swagger-codegen-cli:${swaggerCodegenCliVersion}"
}

swaggerSources {
    api {
        inputFile = file('src/docs/swagger/swagger.yaml')
        code {
            language = 'spring'
            wipeOutputDir = false
            configFile = file('src/main/resources/swagger-config.json')
            templateDir = file('src/main/resources/templates')
            outputDir = file('../../dist-foreign-ui/')
            components = ['models', 'apis']
        }
    }

    doLast {
        delete file(".swagger-codegen")
        delete file("pom.xml")
    }
}

ext {
    swaggerFile = 'src/docs/swagger/swagger.yaml'
    asciiDocOutputDir = file("${buildDir}/asciidoc")
}

convertSwagger2markup {
    swaggerInput file(swaggerFile).getAbsolutePath()
    outputDir asciiDocOutputDir
    config = ['swagger2markup.markupLanguage' : 'ASCIIDOC',
              'swagger2markup.generatedExamplesEnabled' : true,
              'swagger2markup.flatBodyEnabled' : true,
              'swagger2markup.pathsGroupedBy' : 'AS_IS',
              'swagger2markup.operationOrderBy' : 'AS_IS',
              'swagger2markup.parameterOrderBy' : 'AS_IS',
              'swagger2markup.propertyOrderBy' : 'AS_IS',
              'swagger2markup.responseOrderBy' : 'AS_IS',
              'swagger2markup.pageBreakLocations' : ['AFTER_OPERATION','BEFORE_OPERATION_EXAMPLE_REQUEST','AFTER_OPERATION_EXAMPLE_RESPONSE'],
              'swagger2markup.extensions.dynamicPaths.markupLanguage': 'ASCIIDOC',
              'swagger2markup.extensions.dynamicPaths.contentPath' : file('src/docs/asciidoc/extensions/paths').absolutePath
    ]
}

asciidoctor {
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['pdf']
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]

}

asciidoctor.doLast {
    file("${asciiDocOutputDir}/pdf/index.pdf").renameTo(file("${asciiDocOutputDir}/pdf/special_request_api.pdf"))
}
