<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IUsageArchiveMapper">

    <resultMap id="archivedUsageResultMap" type="Usage" extends="IUsageMapper.usageResultMap">
        <result property="id" column="df_usage_archive_uid"/>
    </resultMap>

    <resultMap id="paidUsageResultMap" type="PaidUsage" extends="IUsageMapper.usageResultMap">
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="checkNumber" column="check_number"/>
        <result property="checkDate" column="check_date"/>
        <result property="cccEventId" column="ccc_event_id"/>
        <result property="distributionName" column="distribution_name"/>
        <result property="distributionDate" column="distribution_date"/>
        <result property="periodEndDate" column="period_end_date"/>
        <result property="lmDetailId" column="lm_detail_id"/>
    </resultMap>

    <sql id="payeeColumns">
        service_fee,
        service_fee_amount,
        net_amount,
        payee_account_number
    </sql>

    <insert id="moveFundUsagesToArchive" parameterType="string">
        with fund_pool_ids as (
            select
                nts_fields->>'pre_service_fee_fund_uid' fund_id
            from ${schema}.df_scenario
            where df_scenario_uid = #{scenarioId}
        ),

        ua as (
            insert into ${schema}.df_usage_archive (
                df_usage_archive_uid,
                <include refid="IUsageMapper.usageColumns"/>,
                <include refid="StoredEntityMapper.additionalColumns"/>)
            select
                u.df_usage_uid,
                u.df_usage_batch_uid,
                null, <!-- scenario_uid -->
                u.wr_wrk_inst,
                u.work_title,
                u.system_title,
                u.rh_account_number,
                'ARCHIVED',
                'NTS',
                u.standard_number,
                u.standard_number_type,
                u.number_of_copies,
                u.gross_amount,
                u.comment,
                <include refid="StoredEntityMapper.insert"/>
            from ${schema}.df_usage u
            join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
            where ufas.df_fund_pool_uid = (select fund_id from fund_pool_ids)
            returning df_usage_archive_uid
        )

        delete from ${schema}.df_usage
        where df_usage_uid in (select ua.df_usage_archive_uid from ua)
    </insert>

    <delete id="deleteByBatchId" parameterType="string" >
        with ua as (
            delete from ${schema}.df_usage_archive
            where df_usage_batch_uid = #{batchId}
            returning df_usage_archive_uid
        )
        delete from ${schema}.df_usage_fas
        where df_usage_fas_uid in (select df_usage_archive_uid from ua)
    </delete>

    <delete id="deleteByIds" parameterType="list">
        with ua as (
            delete from ${schema}.df_usage_archive
            where df_usage_archive_uid in
            <foreach collection="list" item="usageId" open="(" close=")" separator=",">
                #{usageId}
            </foreach>
        )
        delete from ${schema}.df_usage_fas
        where df_usage_fas_uid in
        <foreach collection="list" item="usageId" open="(" close=")" separator=",">
            #{usageId}
        </foreach>
    </delete>

    <select id="findRightsholderTotalsHolderCountByScenarioId" parameterType="map" resultType="int">
        select count(1)
        from (
            select distinct rh_account_number
            from ${schema}.df_usage_archive
            where df_scenario_uid = #{scenarioId}) u
            left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        <if test="null != searchValue">
            where <include refid="IUsageMapper.searchWhereClause"/>
        </if>
    </select>

    <sql id="selectRightsholderTotalsHoldersByScenarioIdSql">
        select
            r.name rh_name,
            u.rh_account_number,
            p.name payee_name,
            u.payee_account_number,
            u.gross_total,
            u.service_fee_total,
            u.net_total,
            u.service_fee
        from (
            select
                rh_account_number,
                payee_account_number,
                sum(gross_amount) gross_total,
                sum(service_fee_amount) service_fee_total,
                sum(net_amount) net_total,
                service_fee
            from ${schema}.df_usage_archive
            where df_scenario_uid = #{scenarioId}
            group by rh_account_number, payee_account_number, service_fee) u
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        left join ${schema}.df_rightsholder p on u.payee_account_number = p.rh_account_number
        <if test="null != searchValue">
            where <include refid="IUsageMapper.searchWhereClause"/>
        </if>
        <include refid="IUsageMapper.rightsholderTotalHoldersOrderBy"/>
        <if test="null != pageable">
            limit #{pageable.limit}
            offset #{pageable.offset}
        </if>
    </sql>

    <select id="findRightsholderTotalsHoldersByScenarioId" parameterType="map" resultMap="IUsageMapper.rightsholderTotalsHolderResultMap">
        <include refid="selectRightsholderTotalsHoldersByScenarioIdSql"/>
    </select>

    <select id="findByScenarioIdAndRhAccountNumber" parameterType="map" resultMap="IUsageMapper.usageDtoResultMap">
        select
            u.df_usage_archive_uid df_usage_uid,
            <include refid="IUsageMapper.usageDtoColumns"/>,
            u.check_number,
            u.check_date,
            u.ccc_event_id,
            u.distribution_name,
            u.distribution_date,
            u.period_end_date
        from ${schema}.df_usage_archive u
        join ${schema}.df_usage_fas ufas on u.df_usage_archive_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder rro on rro.rh_account_number = ub.rro_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where u.df_scenario_uid = #{scenarioId} and u.rh_account_number = #{accountNumber}
        <if test="null != searchValue">
            and (
            <include refid="IUsageMapper.drillDownSearchWhereClause">
                <property name="detail_uid" value="u.df_usage_archive_uid"/>
            </include>
            )
        </if>
        order by
        <choose>
            <when test="null != sort">
                <include refid="IUsageMapper.chooseSortProperty">
                    <property name="detail_uid" value="u.df_usage_archive_uid"/>
                </include>
            </when>
            <otherwise>
                df_usage_archive_uid
            </otherwise>
        </choose>
        <include refid="IUsageMapper.ifPageable"/>
    </select>

    <select id="findCountByScenarioIdAndRhAccountNumber" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage_archive u
        left join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rro on ub.rro_account_number = rro.rh_account_number
        where df_scenario_uid = #{scenarioId} and u.rh_account_number = #{accountNumber}
        <if test="null != searchValue">
            and (
            <include refid="IUsageMapper.drillDownSearchWhereClause">
                <property name="detail_uid" value="u.df_usage_archive_uid"/>
            </include>
            )
        </if>
    </select>

    <sql id="selectDtoByScenarioIdSql">
        select
            u.df_usage_archive_uid df_usage_uid,
            <include refid="IUsageMapper.usageDtoColumns"/>
        from ${schema}.df_usage_archive u
        join ${schema}.df_usage_fas ufas on u.df_usage_archive_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder rro on rro.rh_account_number = ub.rro_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where df_scenario_uid = #{scenarioId}
        order by u.rh_account_number
    </sql>

    <select id="findCountForNtsBatch" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage_archive ua
        join ${schema}.df_usage_fas ufas on ua.df_usage_archive_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_work_classification wc on ua.wr_wrk_inst = wc.wr_wrk_inst
        <include refid="ntsBatchWhereClause"/>
    </select>

    <sql id="ntsBatchWhereClause">
        where
            <foreach collection="markets" item="market" separator="or" open="(" close=")">
                ufas.market ilike '%' || #{market} || '%'
            </foreach>
            and <![CDATA[ufas.market_period_from <= #{marketPeriodTo}]]>
            and <![CDATA[ufas.market_period_to >= #{marketPeriodFrom}]]>
            and status_ind = #{status}
            and coalesce(wc.classification, '') != #{excludeClassification}
    </sql>

    <update id="updatePaidInfo" parameterType="PaidUsage">
        update ${schema}.df_usage_archive
        set
            rh_account_number = #{rightsholder.accountNumber},
            payee_account_number = #{payee.accountNumber},
            check_number = #{checkNumber},
            check_date = #{checkDate},
            status_ind = #{status},
            ccc_event_id = #{cccEventId},
            distribution_name = #{distributionName},
            distribution_date = #{distributionDate},
            period_end_date = #{periodEndDate},
            lm_detail_id = #{lmDetailId},
            net_amount = #{netAmount},
            service_fee_amount = #{serviceFeeAmount},
            gross_amount = #{grossAmount},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_archive_uid = #{id}
    </update>

    <update id="updateStatusById" parameterType="map">
        update ${schema}.df_usage_archive
        set status_ind = #{status},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_archive_uid = #{usageId}
    </update>

    <select id="findByIdAndStatus" resultMap="paidUsageResultMap" parameterType="map">
        select
            u.df_usage_archive_uid df_usage_uid,
            u.rh_account_number,
            u.product_family,
            u.payee_account_number,
            u.status_ind,
            u.df_usage_batch_uid,
            u.df_scenario_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.standard_number,
            u.standard_number_type,
            u.number_of_copies,
            u.service_fee,
            u.net_amount,
            u.service_fee_amount,
            u.gross_amount,
            u.check_number,
            u.check_date,
            u.ccc_event_id,
            u.distribution_name,
            u.distribution_date,
            u.period_end_date,
            u.lm_detail_id,
            u.created_datetime,
            ub.rro_account_number,
            u.comment,
            ufas.article,
            ufas.author,
            ufas.publisher,
            ufas.publication_date,
            ufas.market,
            ufas.market_period_from,
            ufas.market_period_to,
            ufas.reported_value,
            ufas.is_rh_participating_flag,
            u.updated_datetime,
            u.created_by_user,
            u.updated_by_user,
            u.record_version
        from ${schema}.df_usage_archive u
        join ${schema}.df_usage_fas ufas on u.df_usage_archive_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        where u.status_ind = #{status}
            and u.df_usage_archive_uid in
            <foreach collection="usageIds" item="usageId" separator="," open="(" close=")">
                #{usageId}
            </foreach>
    </select>

    <select id="findPaidIds" parameterType="UsageStatusEnum" resultType="string">
        select df_usage_archive_uid
        from ${schema}.df_usage_archive
        where status_ind = #{status}
    </select>

    <select id="findByIds" resultMap="archivedUsageResultMap">
        select
            u.df_usage_archive_uid,
            u.df_usage_batch_uid,
            u.df_scenario_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.rh_account_number,
            rh.df_rightsholder_uid rh_id,
            rh.name rh_name,
            u.status_ind,
            u.product_family,
            u.standard_number,
            u.standard_number_type,
            u.number_of_copies,
            u.gross_amount,
            u.service_fee,
            u.service_fee_amount,
            u.net_amount,
            u.payee_account_number,
            u.comment,
            ufas.df_fund_pool_uid,
            ufas.article,
            ufas.publisher,
            ufas.publication_date,
            ufas.market,
            ufas.market_period_from,
            ufas.market_period_to,
            ufas.author,
            ufas.reported_value,
            ufas.is_rh_participating_flag,
            u.created_datetime,
            u.updated_datetime,
            u.created_by_user,
            u.updated_by_user,
            u.record_version
        from ${schema}.df_usage_archive u
        join ${schema}.df_usage_fas ufas on u.df_usage_archive_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        where u.df_usage_archive_uid in
            <foreach collection="list" item="usageId" open="(" separator="," close=")">
                #{usageId}
            </foreach>
    </select>

    <insert id="insertPaid" parameterType="PaidUsage">
        with result as (
            insert into ${schema}.df_usage_archive (
                df_usage_archive_uid,
                <include refid="IUsageMapper.usageColumns"/>,
                <include refid="payeeColumns"/>,
                check_number,
                check_date,
                ccc_event_id,
                distribution_name,
                distribution_date,
                period_end_date,
                lm_detail_id,
                <include refid="StoredEntityMapper.additionalColumns"/>)
            values (
                #{id},
                #{batchId},
                #{scenarioId},
                #{wrWrkInst},
                #{workTitle},
                #{systemTitle},
                #{rightsholder.accountNumber},
                #{status},
                #{productFamily},
                #{standardNumber},
                #{standardNumberType},
                #{numberOfCopies},
                #{grossAmount},
                #{comment},
                #{serviceFee},
                #{serviceFeeAmount},
                #{netAmount},
                #{payee.accountNumber},
                #{checkNumber},
                #{checkDate},
                #{cccEventId},
                #{distributionName},
                #{distributionDate},
                #{periodEndDate},
                #{lmDetailId},
                <include refid="StoredEntityMapper.insert"/>)
        )
        insert into ${schema}.df_usage_fas (
            df_usage_fas_uid,
            article,
            publisher,
            publication_date,
            market,
            market_period_from,
            market_period_to,
            author,
            reported_value,
            is_rh_participating_flag,
            <include refid="StoredEntityMapper.additionalColumns"/>)
        values (
            #{id},
            #{article},
            #{publisher},
            #{publicationDate},
            #{market},
            #{marketPeriodFrom},
            #{marketPeriodTo},
            #{author},
            #{reportedValue},
            #{rhParticipating},
            <include refid="StoredEntityMapper.insert"/>)
    </insert>

    <select id="copyToArchiveByScenarioId" parameterType="map" resultType="string">
        insert into ${schema}.df_usage_archive (
            df_usage_archive_uid,
            <include refid="IUsageMapper.usageColumns"/>,
            <include refid="payeeColumns"/>,
            <include refid="StoredEntityMapper.additionalColumns"/>)
        select
            df_usage_uid,
            df_usage_batch_uid,
            df_scenario_uid,
            wr_wrk_inst,
            work_title,
            system_title,
            rh_account_number,
            #{status},
            product_family,
            standard_number,
            standard_number_type,
            number_of_copies,
            gross_amount,
            comment,
            service_fee,
            service_fee_amount,
            net_amount,
            payee_account_number,
            <include refid="StoredEntityMapper.insert"/>
        from ${schema}.df_usage
        where df_scenario_uid = #{scenarioId}
        returning df_usage_archive_uid
    </select>

    <select id="copyNtsToArchiveByScenarioId" parameterType="map" resultType="string">
        with participation_flags as (
            select
                distinct rh_account_number,
                ufas.is_rh_participating_flag
            from ${schema}.df_usage u
            join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
            where df_scenario_uid = #{scenarioId}
        ),
        rightsholders as (
            insert into ${schema}.df_usage_archive (
                df_usage_archive_uid,
                df_scenario_uid,
                status_ind,
                rh_account_number,
                payee_account_number,
                product_family,
                wr_wrk_inst,
                work_title,
                system_title,
                gross_amount,
                service_fee,
                service_fee_amount,
                net_amount,
                <include refid="StoredEntityMapper.additionalColumns"/>)
            select
                uuid_generate_v4(),
                df_scenario_uid,
                #{status},
                rh_account_number,
                payee_account_number,
                product_family,
                151811999,
                'NON-TITLE NTS',
                'NON-TITLE NTS',
                sum(gross_amount),
                service_fee,
                sum(service_fee_amount),
                sum(net_amount),
                <include refid="StoredEntityMapper.insert"/>
            from ${schema}.df_usage u
            where df_scenario_uid = #{scenarioId}
            group by rh_account_number, product_family, payee_account_number, service_fee, df_scenario_uid
            returning df_usage_archive_uid, rh_account_number
        )
        insert into ${schema}.df_usage_fas (
            df_usage_fas_uid,
            is_rh_participating_flag
        )
        select
            df_usage_archive_uid,
            is_rh_participating_flag
        from rightsholders r
        join participation_flags p on r.rh_account_number = p.rh_account_number
        returning df_usage_fas_uid
    </select>
</mapper>
