<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IUdmReportMapper">
    <resultMap id="udmWeeklySurveyReportDtoResultMap" type="UdmWeeklySurveyReportDto">
        <result property="period" column="period"/>
        <result property="dateReceived" column="date_received"/>
        <result property="channel" column="channel"/>
        <result property="usageOrigin" column="usage_origin"/>
        <result property="companyId" column="company_id"/>
        <result property="companyName" column="company_name"/>
        <result property="detailLicenseeClassId" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClassName" column="detail_licensee_class_name"/>
        <result property="numberOfTotalRows" column="number_of_total_rows"/>
        <result property="numberOfUsableRows" column="number_of_usable_rows"/>
        <result property="percentUsable" column="percent_usable"/>
        <result property="numberOfRegisteredUsers" column="number_of_registered_users"/>
        <result property="numberOfRowsByRegisteredUsers" column="number_of_rows_by_registered_users"/>
        <result property="numberOfUsableRowsByRegisteredUsers" column="number_of_usable_rows_by_registered_users"/>
        <result property="percentUsableFromRegisteredUsers" column="percent_usable_from_registered_users"/>
        <result property="numberOfRowsByUnregisteredUsers" column="number_of_rows_by_unregistered_users"/>
        <result property="numberOfUsableRowsByUnregisteredUsers" column="number_of_usable_rows_by_unregistered_users"/>
        <result property="percentUsableFromUnregisteredUsers" column="percent_usable_from_unregistered_users"/>
    </resultMap>

    <resultMap id="udmSurveyLicenseeReportDtoResultMap" type="UdmSurveyLicenseeReportDto">
        <result property="period" column="period"/>
        <result property="surveyStartDate" column="survey_start_date"/>
        <result property="channel" column="channel"/>
        <result property="usageOrigin" column="usage_origin"/>
        <result property="companyId" column="company_id"/>
        <result property="companyName" column="company_name"/>
        <result property="detailLicenseeClassId" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClassName" column="detail_licensee_class_name"/>
        <result property="aggregateClassId" column="aggregate_licensee_class_id"/>
        <result property="aggregateClassName" column="aggregate_licensee_class_name"/>
        <result property="numberOfTotalRows" column="number_of_total_rows"/>
        <result property="numberOfUsableRows" column="number_of_usable_rows"/>
        <result property="percentUsable" column="percent_usable"/>
        <result property="numberOfRegisteredUsers" column="number_of_registered_users"/>
        <result property="numberOfRowsByRegisteredUsers" column="number_of_rows_by_registered_users"/>
        <result property="numberOfUsableRowsByRegisteredUsers" column="number_of_usable_rows_by_registered_users"/>
        <result property="percentUsableFromRegisteredUsers" column="percent_usable_from_registered_users"/>
        <result property="numberOfRowsByUnregisteredUsers" column="number_of_rows_by_unregistered_users"/>
        <result property="numberOfUsableRowsByUnregisteredUsers" column="number_of_usable_rows_by_unregistered_users"/>
        <result property="percentUsableFromUnregisteredUsers" column="percent_usable_from_unregistered_users"/>
    </resultMap>

    <resultMap id="udmVerifiedDetailsBySourceReportDtoResultMap" type="UdmVerifiedDetailsBySourceReportDto">
        <result property="detailLicenseeClassId" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClassName" column="detail_licensee_class_name"/>
        <result property="aggregateLicenseeClassId" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClassName" column="aggregate_licensee_class_name"/>
        <result property="channel" column="channel"/>
        <result property="usageOrigin" column="usage_origin"/>
        <result property="totalCountOfDetailsInEligibleStatus" column="total_count_of_details_in_eligible_status"/>
    </resultMap>

    <resultMap id="udmCompletedAssignmentsReportDtoResultMap" type="UdmCompletedAssignmentsReportDto">
        <result property="userName" column="user_name"/>
        <result property="usagesCount" column="usages_count"/>
        <result property="valuesCount" column="values_count"/>
    </resultMap>

    <resultMap id="udmUsageEditsInBaselineReportDtoResultMap" type="UdmUsageEditsInBaselineReportDto">
        <result property="usageId" column="df_udm_usage_uid"/>
        <result property="actionType" column="action_type_ind"/>
        <result property="actionReason" column="action_reason"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="period" column="period"/>
        <result property="updateDate" column="updated_datetime"/>
        <result property="updateUser" column="updated_by_user"/>
    </resultMap>

    <resultMap id="udmUsableDetailsByCountryReportDtoResultMap" type="UdmUsableDetailsByCountryReportDto">
        <result property="period" column="period"/>
        <result property="channel" column="channel"/>
        <result property="usageOrigin" column="usage_origin"/>
        <result property="country" column="survey_country"/>
        <result property="detailLicenseeClassId" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClassName" column="detail_licensee_class_name"/>
        <result property="totalCount" column="total_count"/>
    </resultMap>

    <sql id="commonUdmFilterWhereClauses">
        <where>
            <if test="null != channel">
                and ub.channel = #{channel}
            </if>
            <if test="null != usageOrigin">
                and ub.usage_origin = #{usageOrigin}
            </if>
            <if test="periods.size() > 0">
                and
                <foreach collection="periods" item="period" open="(" separator=" or " close=")">
                    u.period = #{period}
                </foreach>
            </if>
            <if test="null != dateFrom and null != dateTo">
                and ${date_column}::date between #{dateFrom} and #{dateTo}
            </if>
        </where>
    </sql>

    <select id="findUdmUsagesCountByFilter" parameterType="map" resultType="int">
        <include refid="IUdmUsageMapper.selectCountByFilterSql"/>
    </select>

    <select id="findUdmUsageDtosByFilter" resultMap="IUdmUsageMapper.udmUsageDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="IUdmUsageMapper.selectDtosByFilterSql"/>
    </select>

    <select id="findUdmBaselineUsagesCountByFilter" parameterType="map" resultType="int">
        <include refid="IUdmBaselineMapper.selectCountByFilterSql"/>
    </select>

    <select id="findUdmBaselineUsageDtosByFilter" resultMap="IUdmBaselineMapper.udmBaselineDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="IUdmBaselineMapper.selectDtosByFilterSql"/>
    </select>

    <select id="findUdmProxyValueDtosByFilter" resultMap="IUdmProxyValueMapper.udmProxyValueDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="IUdmProxyValueMapper.selectDtosByFilterSql"/>
    </select>

    <select id="findUdmWeeklySurveyReportDtos" resultMap="udmWeeklySurveyReportDtoResultMap">
        select
            period,
            date_received,
            channel,
            usage_origin,
            company_id,
            company_name,
            detail_licensee_class_id,
            detail_licensee_class_name,
            number_of_total_rows,
            number_of_usable_rows,
            100 * number_of_usable_rows / number_of_total_rows as percent_usable,
            number_of_registered_users,
            number_of_rows_by_registered_users,
            number_of_usable_rows_by_registered_users,
            case when (number_of_rows_by_registered_users != 0) then 100 * number_of_usable_rows_by_registered_users / number_of_rows_by_registered_users else 0 end as percent_usable_from_registered_users,
            number_of_rows_by_unregistered_users,
            number_of_usable_rows_by_unregistered_users,
            case when (number_of_rows_by_unregistered_users != 0) then 100 * number_of_usable_rows_by_unregistered_users / number_of_rows_by_unregistered_users else 0 end as percent_usable_from_unregistered_users
        from (
            select
                u.period,
                u.created_datetime as date_received,
                ub.channel,
                ub.usage_origin,
                company_id,
                company_name,
                u.detail_licensee_class_id,
                dlc.description detail_licensee_class_name,
                count(1) as number_of_total_rows,
                sum(case when reported_title ilike 'none' then 0 else 1 end) as number_of_usable_rows,
                count(distinct survey_respondent) as number_of_registered_users,
                sum(case when survey_respondent is not null then 1 else 0 end) as number_of_rows_by_registered_users,
                sum(case when survey_respondent is not null and (reported_title not ilike 'none' or reported_title is null) then 1 else 0 end) as number_of_usable_rows_by_registered_users,
                sum(case when survey_respondent is null then 1 else 0 end) as number_of_rows_by_unregistered_users,
                sum(case when survey_respondent is null and (reported_title not ilike 'none' or reported_title is null) then 1 else 0 end) as number_of_usable_rows_by_unregistered_users
            from ${schema}.df_udm_usage u
            join ${schema}.df_udm_usage_batch ub on u.df_udm_usage_batch_uid = ub.df_udm_usage_batch_uid
            join ${schema}.df_detail_licensee_class dlc on u.detail_licensee_class_id = dlc.detail_licensee_class_id
            <include refid="commonUdmFilterWhereClauses">
                <property name="date_column" value="u.created_datetime"/>
            </include>
            group by u.period, u.created_datetime, ub.channel, ub.usage_origin, company_id, company_name, u.detail_licensee_class_id, detail_licensee_class_name
            order by u.period desc, u.created_datetime desc, ub.channel, ub.usage_origin, company_name, detail_licensee_class_name
        ) as nested_report
    </select>

    <select id="findUdmSurveyLicenseeReportDtos" resultMap="udmSurveyLicenseeReportDtoResultMap">
        select
            period,
            survey_start_date,
            channel,
            usage_origin,
            company_id,
            company_name,
            detail_licensee_class_id,
            detail_licensee_class_name,
            aggregate_licensee_class_id,
            aggregate_licensee_class_name,
            number_of_total_rows,
            number_of_usable_rows,
            100 * number_of_usable_rows / number_of_total_rows as percent_usable,
            number_of_registered_users,
            number_of_rows_by_registered_users,
            number_of_usable_rows_by_registered_users,
            case when (number_of_rows_by_registered_users != 0) then 100 * number_of_usable_rows_by_registered_users / number_of_rows_by_registered_users else 0 end as percent_usable_from_registered_users,
            number_of_rows_by_unregistered_users,
            number_of_usable_rows_by_unregistered_users,
            case when (number_of_rows_by_unregistered_users != 0) then 100 * number_of_usable_rows_by_unregistered_users / number_of_rows_by_unregistered_users else 0 end as percent_usable_from_unregistered_users
        from (
            select
                u.period,
                survey_start_date,
                ub.channel,
                ub.usage_origin,
                company_id,
                company_name,
                u.detail_licensee_class_id,
                dlc.description detail_licensee_class_name,
                alc.aggregate_licensee_class_id,
                alc.description aggregate_licensee_class_name,
                count(1) as number_of_total_rows,
                sum(case when reported_title ilike 'none' then 0 else 1 end) as number_of_usable_rows,
                count(distinct survey_respondent) as number_of_registered_users,
                sum(case when survey_respondent is not null then 1 else 0 end) as number_of_rows_by_registered_users,
                sum(case when survey_respondent is not null and (reported_title not ilike 'none' or reported_title is null) then 1 else 0 end) as number_of_usable_rows_by_registered_users,
                sum(case when survey_respondent is null then 1 else 0 end) as number_of_rows_by_unregistered_users,
                sum(case when survey_respondent is null and (reported_title not ilike 'none' or reported_title is null) then 1 else 0 end) as number_of_usable_rows_by_unregistered_users
            from ${schema}.df_udm_usage u
            join ${schema}.df_udm_usage_batch ub on u.df_udm_usage_batch_uid = ub.df_udm_usage_batch_uid
            join ${schema}.df_detail_licensee_class dlc on u.detail_licensee_class_id = dlc.detail_licensee_class_id
            join ${schema}.df_aggregate_licensee_class alc on alc.aggregate_licensee_class_id = dlc.aggregate_licensee_class_id
            <include refid="commonUdmFilterWhereClauses">
                <property name="date_column" value="u.survey_start_date"/>
            </include>
            group by u.period, u.survey_start_date, ub.channel, ub.usage_origin, company_id, company_name, u.detail_licensee_class_id, detail_licensee_class_name, alc.aggregate_licensee_class_id, aggregate_licensee_class_name
            order by u.period desc, u.survey_start_date desc, ub.channel, ub.usage_origin, company_name, detail_licensee_class_name, aggregate_licensee_class_name
        ) as nested_report
    </select>

    <select id="findUdmVerifiedDetailsBySourceReportDtos" parameterType="map" resultMap="udmVerifiedDetailsBySourceReportDtoResultMap">
        select
            dlc.detail_licensee_class_id,
            dlc.description detail_licensee_class_name,
            alc.aggregate_licensee_class_id,
            alc.description aggregate_licensee_class_name,
            ub.channel,
            ub.usage_origin,
            count(1) as total_count_of_details_in_eligible_status
        from ${schema}.df_detail_licensee_class dlc
        join ${schema}.df_aggregate_licensee_class alc on dlc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        join ${schema}.df_udm_usage u on dlc.detail_licensee_class_id = u.detail_licensee_class_id
        join ${schema}.df_udm_usage_batch ub on u.df_udm_usage_batch_uid = ub.df_udm_usage_batch_uid
        <include refid="commonUdmFilterWhereClauses">
            <property name="date_column" value="u.created_datetime"/>
        </include>
        group by dlc.detail_licensee_class_id, alc.aggregate_licensee_class_id, ub.channel, ub.usage_origin, u.status_ind
        having u.status_ind = 'ELIGIBLE'
    </select>

    <sql id="completedAssignmentsFilterWhereClauses">
        where action_type_ind = 'UNASSIGN'
        <if test="periods.size() > 0">
            and
            <foreach collection="periods" item="period" open="(" separator=" or " close=")">
                period = #{period}
            </foreach>
        </if>
        <if test="userNames.size() > 0">
            and
            <foreach collection="userNames" item="userName" open="(" separator=" or " close=")">
                a.created_by_user = #{userName}
            </foreach>
        </if>
        <if test="null != dateFrom and null != dateTo">
            and a.created_datetime::date between #{dateFrom} and #{dateTo}
        </if>
    </sql>

    <select id="findUdmCompletedAssignmentsReportDtos" parameterType="map" resultMap="udmCompletedAssignmentsReportDtoResultMap">
        with usages_count as materialized (
            select
                a.created_by_user as user_name,
                count(1) as usages_count
            from ${schema}.df_udm_audit a
            join ${schema}.df_udm_usage u on u.df_udm_usage_uid = a.df_udm_usage_uid
            <include refid="completedAssignmentsFilterWhereClauses"/>
            group by a.created_by_user
        ),
        values_count as materialized (
            select
                a.created_by_user as user_name,
                count(1) as values_count
            from ${schema}.df_udm_value_audit a
            join ${schema}.df_udm_value v on v.df_udm_value_uid = a.df_udm_value_uid
            <include refid="completedAssignmentsFilterWhereClauses"/>
            group by a.created_by_user
        )
        select
            coalesce(usages.user_name, values.user_name) user_name,
            usages_count,
            values_count
        from usages_count usages
        full join values_count values on usages.user_name = values.user_name
    </select>

    <!-- TODO add WHERE clause -->
    <select id="findUdmUsageEditsInBaselineReportDtos" resultMap="udmUsageEditsInBaselineReportDtoResultMap">
        select
            u.df_udm_usage_uid,
            action_type_ind,
            action_reason,
            wr_wrk_inst,
            system_title,
            period,
            a.updated_datetime,
            a.updated_by_user
        from ${schema}.df_udm_audit a
        join ${schema}.df_udm_usage u on u.df_udm_usage_uid = a.df_udm_usage_uid
        order by df_udm_usage_uid asc, updated_datetime desc, action_reason asc
    </select>

    <select id="findUdmUsableDetailsByCountryReportDtos" parameterType="map" resultMap="udmUsableDetailsByCountryReportDtoResultMap">
        select
            u.period,
            ub.channel,
            ub.usage_origin,
            u.survey_country,
            u.detail_licensee_class_id,
            dlc.description detail_licensee_class_name,
            count(1) as total_count
        from ${schema}.df_detail_licensee_class dlc
        join ${schema}.df_udm_usage u on dlc.detail_licensee_class_id = u.detail_licensee_class_id
        join ${schema}.df_udm_usage_batch ub on u.df_udm_usage_batch_uid = ub.df_udm_usage_batch_uid
        <where>
            <if test="periods.size() > 0">
                and
                <foreach collection="periods" item="period" open="(" separator=" or " close=")">
                    u.period = #{period}
                </foreach>
            </if>
            <if test="null != dateFrom and null != dateTo">
                and u.created_datetime::date between #{dateFrom} and #{dateTo}
            </if>
        </where>
        group by u.period, ub.channel, ub.usage_origin, u.survey_country, u.detail_licensee_class_id, detail_licensee_class_name
    </select>
</mapper>
