<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IUsageBatchMapper">

    <resultMap id="usageBatchResultMap" type="UsageBatch" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_usage_batch_uid"/>
        <result property="name" column="name"/>
        <result property="rro.accountNumber" column="rro_account_number"/>
        <result property="rro.name" column="rro_name"/>
        <result property="productFamily" column="product_family"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="fiscalYear" column="fiscal_year"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="ntsFields" column="nts_fields" typeHandler="NtsBatchFieldsTypeHandler"/>
        <result property="numberOfBaselineYears" column="baseline_years"/>
    </resultMap>

    <resultMap id="batchNameScenarioNamePairResultMap" type="BatchNameScenarioNamePair">
        <result property="batchName" column="batch_name"/>
        <result property="scenarioName" column="scenario_name"/>
    </resultMap>

    <sql id="usageBatchColumns">
        ub.df_usage_batch_uid,
        ub.name,
        ub.rro_account_number,
        r.name rro_name,
        ub.product_family,
        ub.payment_date,
        ub.fiscal_year,
        ub.gross_amount,
        ub.nts_fields,
        ub.baseline_years,
        ub.created_datetime,
        ub.updated_datetime,
        ub.created_by_user,
        ub.updated_by_user,
        ub.record_version
    </sql>

    <insert id="insert" parameterType="UsageBatch">
        insert into ${schema}.df_usage_batch(
            df_usage_batch_uid,
            name,
            rro_account_number,
            product_family,
            payment_date,
            fiscal_year,
            gross_amount,
            nts_fields,
            baseline_years,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            #{id},
            #{name},
            #{rro.accountNumber},
            #{productFamily},
            #{paymentDate},
            #{fiscalYear},
            #{grossAmount},
            #{ntsFields, typeHandler=NtsBatchFieldsTypeHandler},
            #{numberOfBaselineYears},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <select id="findFiscalYearsByProductFamily" resultType="int" parameterType="string">
        select distinct fiscal_year
        from ${schema}.df_usage_batch
        where product_family = #{productFamily}
        order by fiscal_year
    </select>

    <select id="findAll" resultMap="usageBatchResultMap">
        select
            <include refid="usageBatchColumns"/>
        from ${schema}.df_usage_batch ub
        left join ${schema}.df_rightsholder r on r.rh_account_number = ub.rro_account_number
        order by ub.updated_datetime desc
    </select>

    <select id="findById" resultMap="usageBatchResultMap" parameterType="string">
        select
            <include refid="usageBatchColumns"/>
        from ${schema}.df_usage_batch ub
        left join ${schema}.df_rightsholder r on r.rh_account_number = ub.rro_account_number
        where ub.df_usage_batch_uid = #{batchId}
    </select>

    <select id="findByProductFamily" resultMap="usageBatchResultMap" parameterType="string">
        select
            <include refid="usageBatchColumns"/>
        from ${schema}.df_usage_batch ub
        left join ${schema}.df_rightsholder r on r.rh_account_number = ub.rro_account_number
        where ub.product_family = #{productFamily}
        order by ub.updated_datetime desc
    </select>

    <sql id="withdrawnUsagesWhereClause">
        where u.df_usage_batch_uid = ub.df_usage_batch_uid
            and u.status_ind = #{status}
            and ufas.df_fund_pool_uid is null
    </sql>

    <select id="findUsageBatchesForNtsFundPool" resultMap="usageBatchResultMap" parameterType="map">
        select
            ub.df_usage_batch_uid,
            ub.name,
            (
                select sum(u.gross_amount)
                from ${schema}.df_usage u
                join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
                <include refid="withdrawnUsagesWhereClause"/>
            ) gross_amount,
            ub.updated_datetime
        from ${schema}.df_usage_batch ub
        where ub.product_family in
        <foreach collection="productFamilies" item="productFamily" separator="," open="(" close=")">
            #{productFamily}
        </foreach>
        and exists (
            select 1
            from ${schema}.df_usage u
            join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
            <include refid="withdrawnUsagesWhereClause"/>
        )
        order by ub.updated_datetime desc
    </select>

    <select id="findCountByName" parameterType="string" resultType="int">
        select count(name)
        from ${schema}.df_usage_batch
        where upper(name) = upper(#{name})
    </select>

    <select id="findByName" parameterType="string" resultMap="usageBatchResultMap">
        select
            <include refid="usageBatchColumns"/>
        from ${schema}.df_usage_batch ub
        left join ${schema}.df_rightsholder r on r.rh_account_number = ub.rro_account_number
        where upper(ub.name) = upper(#{name})
    </select>

    <delete id="deleteUsageBatch" parameterType="string">
        delete from ${schema}.df_usage_batch
        where df_usage_batch_uid = #{batchId}
    </delete>

    <select id="findBatchNamesWithoutUsagesForClassification" parameterType="map" resultType="string">
        with fund_pool_amounts as (
            select ub.df_usage_batch_uid,
                ub.name,
                (ub.nts_fields->>'stm_amount')::numeric stm_amount,
                case when wc.classification = 'STM' then count(1) else 0 end stm_count,
                (ub.nts_fields->>'non_stm_amount')::numeric non_stm_amount,
                case when wc.classification = 'NON-STM' then count(1) else 0 end non_stm_count,
                case when wc.classification is null then count(1) else 0 end unclassified_count
            from ${schema}.df_usage_batch ub
            join ${schema}.df_usage u on ub.df_usage_batch_uid = u.df_usage_batch_uid
            left join ${schema}.df_work_classification wc on wc.wr_wrk_inst = u.wr_wrk_inst
            where ub.df_usage_batch_uid in
                <foreach collection="batchIds" item="batchId" separator="," open="(" close=")">
                    #{batchId}
                </foreach>
            group by ub.df_usage_batch_uid, ub.name, wc.classification
        )

        select name
        from fund_pool_amounts
        <if test="'STM' == classification">
            where stm_amount &gt; 0
            group by name
            having sum(stm_count) = 0
        </if>
        <if test="'NON-STM' == classification">
            where non_stm_amount &gt; 0
            group by name
            having sum(non_stm_count) = 0
        </if>
        <if test="null == classification">
            group by name
            having sum(unclassified_count) &gt; 0
        </if>
    </select>

    <select id="findIneligibleForScenarioBatchNames" parameterType="map" resultType="string">
        select
            name
        from ${schema}.df_usage_batch ub
        where
            ub.df_usage_batch_uid in
            <foreach collection="batchesIds" item="batchId" separator="," open="(" close=")">
                #{batchId}
            </foreach>
        and exists (
            select 1
            from ${schema}.df_usage u
                where u.df_usage_batch_uid = ub.df_usage_batch_uid
                and u.status_ind not in
                <foreach collection="eligibleStatuses" item="status" separator="," open="(" close=")">
                    #{status}
                </foreach>
        )
        order by ub.updated_datetime desc
    </select>

    <select id="findBatchesNamesToScenariosNames" parameterType="collection" resultMap="batchNameScenarioNamePairResultMap">
        select
            (select name from ${schema}.df_usage_batch ub where ub.df_usage_batch_uid = batch_filter.df_usage_batch_uid) batch_name,
            (select name from ${schema}.df_scenario s where s.df_scenario_uid = f.df_scenario_uid) scenario_name
        from ${schema}.df_scenario_usage_filter_to_usage_batches_ids_map batch_filter
        join ${schema}.df_scenario_usage_filter f on f.df_scenario_usage_filter_uid = batch_filter.df_scenario_usage_filter_uid
        where batch_filter.df_usage_batch_uid in
            <foreach collection="collection" item="batchId" separator="," open="(" close=")">
                #{batchId}
            </foreach>
    </select>

    <select id="findBatchNamesWithRhNotFoundUsages" resultType="string">
        select distinct ub.name
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
        where u.status_ind = #{status}
    </select>
</mapper>
