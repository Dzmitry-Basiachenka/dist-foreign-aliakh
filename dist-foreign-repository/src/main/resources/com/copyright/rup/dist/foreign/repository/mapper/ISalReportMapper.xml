<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ISalReportMapper">

    <resultMap id="salLiabilitiesByRhReportDtoResultMap" type="SalLiabilitiesByRhReportDto">
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="rhName" column="rh_name"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="netAmount" column="net_amount"/>
        <result property="itemBankNetAmount" column="item_bank_net_amount"/>
        <result property="usageDetailNetAmount" column="usage_detail_net_amount"/>
        <result property="countOfPassages" column="count_of_passages"/>
    </resultMap>

    <resultMap id="salLiabilitiesSummaryByRhAndWorkReportDtoResultMap" type="SalLiabilitiesSummaryByRhAndWorkReportDto">
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="rhName" column="rh_name"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="netAmount" column="net_amount"/>
    </resultMap>

    <resultMap id="salUndistributedLiabilitiesReportDtoResultMap" type="SalUndistributedLiabilitiesReportDto">
        <result property="dateReceived" column="date_received"/>
        <result property="fundPoolName" column="fund_pool_name"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="netAmount" column="net_amount"/>
    </resultMap>

    <resultMap id="salFundPoolsReportResultMap" type="SalFundPoolsReportDto">
        <result property="fundPoolName" column="fund_pool_name"/>
        <result property="scenarioName" column="scenario_name"/>
        <result property="dateReceived" column="date_received"/>
        <result property="assessmentName" column="assessment_name"/>
        <result property="licenseeAccountNumber" column="licensee_account_number"/>
        <result property="licenseeName" column="licensee_name"/>
        <result property="serviceFee" column="service_fee"/>
        <result property="netAmount" column="net_amount"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="itemBankSplitPercent" column="item_bank_split_percent"/>
        <result property="gradeKto5GrossAmount" column="grade_K_5_gross_amount"/>
        <result property="grade6to8GrossAmount" column="grade_6_8_gross_amount"/>
        <result property="grade9to12GrossAmount" column="grade_9_12_gross_amount"/>
        <result property="itemBankGrossAmount" column="item_bank_gross_amount"/>
        <result property="gradeKto5NumberOfStudents" column="grade_K_5_number_of_students"/>
        <result property="grade6to8NumberOfStudents" column="grade_6_8_number_of_students"/>
        <result property="grade9to12NumberOfStudents" column="grade_9_12_number_of_students"/>
        <result property="totalGrossAmount" column="total_gross_amount"/>
    </resultMap>

    <resultMap id="salHistoricalItemBankDetailsReportDtoResultMap" type="SalHistoricalItemBankDetailsReportDto">
        <result property="id" column="df_usage_archive_uid"/>
        <result property="itemBankName" column="name"/>
        <result property="periodEndDate" column="payment_date"/>
        <result property="licenseeAccountNumber" column="licensee_account_number"/>
        <result property="licenseeName" column="licensee_name"/>
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="rhName" column="rh_name"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="standardNumber" column="standard_number"/>
        <result property="standardNumberType" column="standard_number_type"/>
        <result property="assessmentName" column="assessment_name"/>
        <result property="reportedWorkPortionId" column="reported_work_portion_id"/>
        <result property="reportedTitle" column="work_title"/>
        <result property="reportedArticle" column="reported_article"/>
        <result property="reportedStandardNumber" column="reported_standard_number"/>
        <result property="reportedMediaType" column="reported_media_type"/>
        <result property="coverageYear" column="coverage_year"/>
        <result property="grade" column="grade"/>
    </resultMap>

    <select id="findSalFundPoolsByDistYear" parameterType="map" resultMap="salFundPoolsReportResultMap">
        select
            fp.name fund_pool_name,
            s.name scenario_name,
            (fp.sal_fields ->> 'date_received')::date date_received,
            (fp.sal_fields ->> 'assessment_name')::text assessment_name,
            (fp.sal_fields ->> 'licensee_account_number')::numeric licensee_account_number,
            (fp.sal_fields ->> 'licensee_name')::text licensee_name,
            (fp.sal_fields ->> 'service_fee')::numeric service_fee,
            fp.total_amount - fp.total_amount * (fp.sal_fields ->> 'service_fee')::numeric net_amount,
            (fp.sal_fields ->> 'gross_amount')::numeric gross_amount,
            (fp.sal_fields ->> 'item_bank_split_percent')::numeric item_bank_split_percent,
            (fp.sal_fields ->> 'grade_K_5_gross_amount')::numeric grade_K_5_gross_amount,
            (fp.sal_fields ->> 'grade_6_8_gross_amount')::numeric grade_6_8_gross_amount,
            (fp.sal_fields ->> 'grade_9_12_gross_amount')::numeric grade_9_12_gross_amount,
            (fp.sal_fields ->> 'item_bank_gross_amount')::numeric item_bank_gross_amount,
            (fp.sal_fields ->> 'grade_K_5_number_of_students')::numeric grade_K_5_number_of_students,
            (fp.sal_fields ->> 'grade_6_8_number_of_students')::numeric grade_6_8_number_of_students,
            (fp.sal_fields ->> 'grade_9_12_number_of_students')::numeric grade_9_12_number_of_students,
            (fp.sal_fields ->> 'grade_K_5_gross_amount')::numeric + (fp.sal_fields ->> 'grade_6_8_gross_amount')::numeric +
                (fp.sal_fields ->> 'grade_9_12_gross_amount')::numeric + (fp.sal_fields ->> 'item_bank_gross_amount')::numeric total_gross_amount
        from ${schema}.df_fund_pool fp
        left join ${schema}.df_scenario s on s.sal_fields ->> 'fund_pool_uid' = fp.df_fund_pool_uid
        where fp.product_family = #{productFamily}
            and #{distributionYear} = (select extract(year from date(fp.sal_fields ->> 'date_received')::date))
        order by fund_pool_name
    </select>

    <select id="findSalFundPools" parameterType="string" resultMap="IFundPoolMapper.fundPoolResultMap">
        <include refid="IFundPoolMapper.selectFundPoolsByProductFamilySql"/>
    </select>

    <select id="findSalLiabilitiesByRhReportDtos" parameterType="map" resultMap="salLiabilitiesByRhReportDtoResultMap">
        select
            nested.rh_account_number,
            rh.name as rh_name,
            sum(nested.gross_amount) as gross_amount,
            sum(nested.net_amount) as net_amount,
            sum(nested.service_fee_amount) as service_fee_amount,
            sum(nested.item_bank_net_amount) as item_bank_net_amount,
            sum(nested.usage_detail_net_amount) as usage_detail_net_amount,
            sum(nested.count_of_passages) as count_of_passages
        from (
            select
                u.rh_account_number,
                sum(u.gross_amount) as gross_amount,
                sum(u.net_amount) as net_amount,
                sum(u.service_fee_amount) as service_fee_amount,
                case when us.detail_type = #{itemBankType} then sum(u.net_amount) else 0 end item_bank_net_amount,
                case when us.detail_type = #{usageDetailType} then sum(u.net_amount) else 0 end usage_detail_net_amount,
                case when us.detail_type = #{itemBankType} then count(1) else 0 end count_of_passages
            from ${schema}.df_usage u
            join ${schema}.df_usage_sal us on u.df_usage_uid = us.df_usage_sal_uid
            where u.product_family = #{productFamily}
                and df_scenario_uid in
                    <foreach collection="scenarioIds" item="scenarioId" open="(" separator="," close=")">
                        #{scenarioId}
                    </foreach>
            group by
                u.rh_account_number,
                us.detail_type
        ) as nested
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = nested.rh_account_number
        group by
            nested.rh_account_number,
            rh.name
        order by nested.rh_account_number
    </select>

    <select id="findSalLiabilitiesSummaryByRhAndWorkReportDtos" parameterType="map"
            resultMap="salLiabilitiesSummaryByRhAndWorkReportDtoResultMap">
        select
            u.rh_account_number,
            rh.name rh_name,
            u.wr_wrk_inst,
            u.system_title,
            sum(u.gross_amount) as gross_amount,
            sum(u.service_fee_amount) as service_fee_amount,
            sum(u.net_amount) as net_amount
        from ${schema}.df_usage u
        join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        where u.product_family = #{productFamily}
            and u.df_scenario_uid in
            <foreach collection="scenarioIds" item="scenarioId" open="(" separator="," close=")">
                #{scenarioId}
            </foreach>
        group by u.rh_account_number, rh.name, u.wr_wrk_inst, u.system_title
        order by u.rh_account_number, u.wr_wrk_inst
    </select>

    <select id="findSalUndistributedLiabilitiesReportDtos" parameterType="map" resultMap="salUndistributedLiabilitiesReportDtoResultMap">
        select
            (fp.sal_fields ->> 'date_received')::date date_received,
            fp.name fund_pool_name,
            fp.total_amount gross_amount,
            fp.total_amount * (fp.sal_fields ->> 'service_fee')::numeric service_fee_amount,
            fp.total_amount - (fp.total_amount * (fp.sal_fields ->> 'service_fee')::numeric) net_amount
        from ${schema}.df_fund_pool fp
        left join ${schema}.df_scenario s on s.sal_fields ->> 'fund_pool_uid' = fp.df_fund_pool_uid
        where fp.product_family = #{productFamily}
        and (s.status_ind is null or s.status_ind in
            <foreach collection="statuses" item="status" open="(" separator="," close=")">
                #{status}
            </foreach>)
        order by date_received
    </select>

    <select id="findScenarioUsageDtosCount" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage u
        where df_scenario_uid = #{scenarioId}
    </select>

    <select id="findArchivedScenarioUsageDtosCount" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage_archive ua
        where df_scenario_uid = #{scenarioId}
    </select>

    <select id="findSalScenarioUsageReportDtos" parameterType="map" resultMap="ISalUsageMapper.salUsageDtoResultMap">
        <include refid="ISalUsageMapper.selectDtoByScenarioIdSql"/>
    </select>

    <select id="findSalArchivedScenarioUsageReportDtos" parameterType="map" resultMap="ISalUsageMapper.salUsageDtoResultMap">
        <include refid="ISalUsageMapper.selectArchivedDtoByScenarioIdSql"/>
    </select>

    <select id="findSalUsagesCountByFilter" parameterType="map" resultType="int">
        <include refid="ISalUsageMapper.selectCountByFilterSql"/>
    </select>

    <select id="findSalUsageReportDtos" resultMap="ISalUsageMapper.salUsageDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="ISalUsageMapper.selectDtosByFilterSql"/>
    </select>

    <select id="findSalUsagesCountForAudit" resultType="int" parameterType="map">
        <include refid="ISalUsageMapper.selectCountForAuditSql"/>
    </select>

    <select id="findAuditSalReportDtos" resultMap="ISalUsageMapper.salUsageDtoResultMap" parameterType="map">
        <include refid="ISalUsageMapper.selectForAuditSql"/>
    </select>

    <select id="findSalHistoricalItemBankDetailsReportDtos" parameterType="map"
            resultMap="salHistoricalItemBankDetailsReportDtoResultMap">
        select
            ua.df_usage_archive_uid,
            ub.name,
            ub.payment_date,
            (ub.sal_fields->>'licensee_account_number')::numeric licensee_account_number,
            ub.sal_fields->>'licensee_name' licensee_name,
            ua.rh_account_number,
            rh.name rh_name,
            ua.wr_wrk_inst,
            ua.system_title,
            ua.standard_number,
            ua.standard_number_type,
            usal.assessment_name,
            usal.reported_work_portion_id,
            ua.work_title,
            usal.reported_article,
            usal.reported_standard_number,
            usal.reported_media_type,
            usal.coverage_year,
            usal.grade
        from ${schema}.df_usage_archive ua
        join ${schema}.df_usage_sal usal on ua.df_usage_archive_uid = usal.df_usage_sal_uid
        join ${schema}.df_usage_batch ub on ua.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = ua.rh_account_number
        where ub.product_family = #{productFamily}
            and usal.detail_type = #{detailType}
            and (ub.sal_fields->>'licensee_account_number')::numeric = #{licenseeAccountNumber}
            and extract(year from ub.payment_date) between #{periodEndYearFrom} and #{periodEndYearTo}
        order by payment_date, name, rh_name, system_title
    </select>
</mapper>
