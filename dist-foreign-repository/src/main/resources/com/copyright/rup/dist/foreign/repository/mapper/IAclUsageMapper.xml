<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IAclUsageMapper">

    <resultMap id="aclUsageDtoResultMap" type="AclUsageDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_usage_uid"/>
        <result property="usageBatchId" column="df_acl_usage_batch_uid"/>
        <result property="usageOrigin" column="usage_origin"/>
        <result property="channel" column="channel"/>
        <result property="period" column="period"/>
        <result property="originalDetailId" column="original_detail_id"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="detailLicenseeClass.id" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClass.description" column="detail_licensee_class_name"/>
        <result property="aggregateLicenseeClassId" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClassName" column="aggregate_licensee_class_name"/>
        <result property="surveyCountry" column="survey_country"/>
        <result property="publicationType.id" column="pub_type_id"/>
        <result property="publicationType.name" column="pub_type_name"/>
        <result property="publicationType.description" column="pub_type_description"/>
        <result property="contentUnitPrice" column="content_unit_price"/>
        <result property="typeOfUse" column="type_of_use"/>
        <result property="annualizedCopies" column="annualized_copies"/>
        <result property="quantity" column="quantity"/>
        <result property="editable" column="is_editable"/>
    </resultMap>

    <sql id="aclUsageColumns">
        df_acl_usage_uid,
        df_acl_usage_batch_uid,
        usage_origin,
        channel,
        period,
        original_detail_id,
        wr_wrk_inst,
        system_title,
        detail_licensee_class_id,
        survey_country,
        publication_type_uid,
        content_unit_price,
        type_of_use,
        annualized_copies,
        quantity,
        <include refid="StoredEntityMapper.additionalColumns"/>
    </sql>

    <sql id="aclUsageDtoColumns">
        df_acl_usage_uid,
        u.df_acl_usage_batch_uid,
        usage_origin,
        channel,
        period,
        original_detail_id,
        wr_wrk_inst,
        system_title,
        u.detail_licensee_class_id,
        dlc.description detail_licensee_class_name,
        alc.aggregate_licensee_class_id,
        alc.description aggregate_licensee_class_name,
        survey_country,
        u.publication_type_uid pub_type_id,
        pt.name pub_type_name,
        pt.description pub_type_description,
        content_unit_price,
        type_of_use,
        annualized_copies,
        u.quantity,
        is_editable,
        u.created_datetime,
        u.updated_datetime,
        u.created_by_user,
        u.updated_by_user,
        u.record_version
    </sql>

    <sql id="selectCountByFilterSql">
        select count(1)
        from ${schema}.df_acl_usage u
        join ${schema}.df_acl_usage_batch ub on u.df_acl_usage_batch_uid = ub.df_acl_usage_batch_uid
        join ${schema}.df_detail_licensee_class dlc on u.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_aggregate_licensee_class alc on dlc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        left join ${schema}.df_publication_type pt on u.publication_type_uid = pt.df_publication_type_uid
        <include refid="IAclUsageMapper.aclUsageFilter"/>
    </sql>

    <sql id="selectDtosByFilterSql">
        select
            <include refid="IAclUsageMapper.aclUsageDtoColumns"/>
        from ${schema}.df_acl_usage u
        join ${schema}.df_acl_usage_batch ub on u.df_acl_usage_batch_uid = ub.df_acl_usage_batch_uid
        join ${schema}.df_detail_licensee_class dlc on u.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_aggregate_licensee_class alc on dlc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        left join ${schema}.df_publication_type pt on u.publication_type_uid = pt.df_publication_type_uid
        <include refid="IAclUsageMapper.aclUsageFilter"/>
        order by
        <choose>
            <when test="null != sort">
                <include refid="IAclUsageMapper.chooseSortProperty"/>
            </when>
            <otherwise>
                updated_datetime desc
            </otherwise>
        </choose>,
        df_acl_usage_uid
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="aclUsageFilter">
        <where>
            <if test="null != filter.usageBatchName">
                and ub.name = #{filter.usageBatchName}
            </if>
        </where>
        <if test="null != filter.usageOrigin">
            and u.usage_origin = #{filter.usageOrigin}
        </if>
        <if test="null != filter.channel">
            and u.channel = #{filter.channel}
        </if>
        <if test="null != filter.periods and filter.periods.size() > 0">
            and
            <foreach collection="filter.periods" item="period" open="(" separator=" or " close=")">
                u.period = #{period}
            </foreach>
        </if>
        <if test="null != filter.detailLicenseeClasses and filter.detailLicenseeClasses.size() > 0">
            and
            <foreach collection="filter.detailLicenseeClasses" item="detailLicenseeClass" open="(" separator=" or " close=")">
                u.detail_licensee_class_id = #{detailLicenseeClass.id}
            </foreach>
        </if>
        <if test="null != filter.aggregateLicenseeClasses and filter.aggregateLicenseeClasses.size() > 0">
            and
            <foreach collection="filter.aggregateLicenseeClasses" item="aggregateLicenseeClass" open="(" separator=" or " close=")">
                dlc.aggregate_licensee_class_id = #{aggregateLicenseeClass.id}
            </foreach>
        </if>
        <if test="null != filter.pubTypes and filter.pubTypes.size() > 0">
            and
            <foreach collection="filter.pubTypes" item="pubType" open="(" separator=" or " close=")">
                pt.name = #{pubType.name}
            </foreach>
        </if>
        <if test="null != filter.typeOfUses and filter.typeOfUses.size() > 0">
            and
            <foreach collection="filter.typeOfUses" item="typeOfUse" open="(" separator=" or " close=")">
                u.type_of_use = #{typeOfUse}
            </foreach>
        </if>
        <if test="!filter.usageDetailIdExpression.isEmpty()">
            <include refid="IUdmCommonMapper.textFieldFilterExpression">
                <property name="column" value="u.original_detail_id"/>
                <property name="operator" value="filter.usageDetailIdExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.usageDetailIdExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.usageDetailIdExpression.fieldSecondValue}"/>
            </include>
        </if>
        <if test="!filter.wrWrkInstExpression.isEmpty()">
            <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                <property name="column" value="u.wr_wrk_inst"/>
                <property name="operator" value="filter.wrWrkInstExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.wrWrkInstExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.wrWrkInstExpression.fieldSecondValue}"/>
            </include>
        </if>
        <if test="!filter.systemTitleExpression.isEmpty()">
            <include refid="IUdmCommonMapper.textFieldFilterExpression">
                <property name="column" value="u.system_title"/>
                <property name="operator" value="filter.systemTitleExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.systemTitleExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.systemTitleExpression.fieldSecondValue}"/>
            </include>
        </if>
        <if test="!filter.surveyCountryExpression.isEmpty()">
            <include refid="IUdmCommonMapper.textFieldFilterExpression">
                <property name="column" value="u.survey_country"/>
                <property name="operator" value="filter.surveyCountryExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.surveyCountryExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.surveyCountryExpression.fieldSecondValue}"/>
            </include>
        </if>
        <if test="!filter.contentUnitPriceExpression.isEmpty()">
            <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                <property name="column" value="u.content_unit_price"/>
                <property name="operator" value="filter.contentUnitPriceExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.contentUnitPriceExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.contentUnitPriceExpression.fieldSecondValue}"/>
            </include>
        </if>
        <if test="!filter.annualizedCopiesExpression.isEmpty()">
            <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                <property name="column" value="u.annualized_copies"/>
                <property name="operator" value="filter.annualizedCopiesExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.annualizedCopiesExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.annualizedCopiesExpression.fieldSecondValue}"/>
            </include>
        </if>
    </sql>

    <sql id="chooseSortProperty">
        <choose>
            <when test="sort.property == 'detailId'">
                df_acl_usage_uid <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'period'">
                period <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageOrigin'">
                usage_origin <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'channel'">
                channel <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageDetailId'">
                original_detail_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'wrWrkInst'">
                wr_wrk_inst <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'systemTitle'">
                system_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detLcId'">
                u.detail_licensee_class_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detLcName'">
                dlc.description <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'aggLcId'">
                alc.aggregate_licensee_class_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'aggLcName'">
                alc.description <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'surveyCountry'">
                survey_country <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'publicationType'">
                pt.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentUnitPrice'">
                content_unit_price <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'typeOfUse'">
                type_of_use <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'annualizedCopies'">
                annualized_copies <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'updateUser'">
                u.updated_by_user <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'updateDate'">
                u.updated_datetime <include refid="IUsageMapper.direction"/>
            </when>
        </choose>
    </sql>

    <select id="populateAclUsages" parameterType="map" resultType="string">
        insert into ${schema}.df_acl_usage (
            <include refid="aclUsageColumns"/>
        )
        select
            uuid_generate_v4(),
            #{usageBatchId},
            ub.usage_origin,
            ub.channel,
            u.period,
            u.original_detail_id,
            u.wr_wrk_inst,
            u.system_title,
            u.detail_licensee_class_id,
            u.survey_country,
            vb.publication_type_uid,
            vb.content_unit_price,
            u.type_of_use,
            u.annualized_copies,
            u.quantity,
            <include refid="StoredEntityMapper.insert"/>
        from ${schema}.df_udm_usage u
        join ${schema}.df_udm_usage_batch ub on u.df_udm_usage_batch_uid = ub.df_udm_usage_batch_uid
        left join ${schema}.df_udm_value_baseline vb on u.df_udm_value_uid = vb.df_udm_value_baseline_uid
        where u.is_baseline_flag = true
            and
            <foreach collection="periods" item="period" open="(" separator=" or " close=")">
                u.period = #{period}
            </foreach>
        returning df_acl_usage_uid
    </select>

    <update id="update" parameterType="AclUsageDto">
        update ${schema}.df_acl_usage
        set
            period = #{period},
            wr_wrk_inst = #{wrWrkInst},
            detail_licensee_class_id = #{detailLicenseeClass.id},
            publication_type_uid = #{publicationType.id},
            content_unit_price = #{contentUnitPrice},
            type_of_use = #{typeOfUse},
            annualized_copies = #{annualizedCopies},
            <include refid="StoredEntityMapper.update"/>
        where df_acl_usage_uid = #{id}
    </update>

    <select id="findByIds" resultMap="aclUsageDtoResultMap">
        select
            <include refid="IAclUsageMapper.aclUsageDtoColumns"/>
        from ${schema}.df_acl_usage u
        join ${schema}.df_acl_usage_batch ub on u.df_acl_usage_batch_uid = ub.df_acl_usage_batch_uid
        left join ${schema}.df_publication_type pt on u.publication_type_uid = pt.df_publication_type_uid
        join ${schema}.df_detail_licensee_class dlc on u.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_aggregate_licensee_class alc on dlc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        where df_acl_usage_uid in
            <foreach collection="list" item="usageId" open="(" separator="," close=")">
                #{usageId}
            </foreach>
        order by original_detail_id
    </select>

    <select id="findCountByFilter" parameterType="map" resultType="int">
        <include refid="IAclUsageMapper.selectCountByFilterSql"/>
    </select>

    <select id="findDtosByFilter" resultMap="aclUsageDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="IAclUsageMapper.selectDtosByFilterSql"/>
    </select>

    <select id="findPeriods" resultType="int">
        select distinct period
        from ${schema}.df_acl_usage
        order by period desc
    </select>
</mapper>
