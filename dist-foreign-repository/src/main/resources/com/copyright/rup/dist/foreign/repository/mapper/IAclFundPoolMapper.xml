<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IAclFundPoolMapper">

    <resultMap id="aclFundPoolResultMap" type="AclFundPool" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_fund_pool_uid"/>
        <result property="name" column="name"/>
        <result property="period" column="period"/>
        <result property="licenseType" column="license_type"/>
        <result property="manualUploadFlag" column="is_manual"/>
    </resultMap>

    <resultMap id="aclFundPoolDetailResultMap" type="AclFundPoolDetail" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_fund_pool_detail_uid"/>
        <result property="fundPoolId" column="df_acl_fund_pool_uid"/>
        <result property="detailLicenseeClass.id" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClass.description" column="detail_licensee_class_name"/>
        <result property="licenseType" column="license_type"/>
        <result property="typeOfUse" column="type_of_use"/>
        <result property="netAmount" column="net_amount"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="ldmtFlag" column="is_ldmt"/>
    </resultMap>

    <resultMap id="aclFundPoolDetailDtoResultMap" type="AclFundPoolDetailDto" extends="aclFundPoolDetailResultMap">
        <result property="period" column="period"/>
        <result property="fundPoolName" column="fund_pool_name"/>
        <result property="aggregateLicenseeClass.id" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClass.description" column="aggregate_licensee_class_name"/>
    </resultMap>

    <sql id="aclFundPoolColumns">
        df_acl_fund_pool_uid,
        name,
        period,
        license_type,
        is_manual,
        <include refid="StoredEntityMapper.additionalColumns"/>
    </sql>

    <sql id="aclFundPoolDetailColumns">
        df_acl_fund_pool_detail_uid,
        df_acl_fund_pool_uid,
        detail_licensee_class_id,
        type_of_use,
        license_type,
        net_amount,
        gross_amount,
        is_ldmt,
        <include refid="StoredEntityMapper.additionalColumns"/>
    </sql>

    <insert id="insert" parameterType="AclFundPool">
        insert into ${schema}.df_acl_fund_pool (
            <include refid="aclFundPoolColumns"/>
        ) values (
            #{id},
            #{name},
            #{period},
            #{licenseType},
            #{manualUploadFlag},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <select id="findById" resultMap="aclFundPoolResultMap" parameterType="string">
        select
            <include refid="aclFundPoolColumns"/>
        from ${schema}.df_acl_fund_pool
        where df_acl_fund_pool_uid = #{fundPoolId}
    </select>

    <select id="isFundPoolExist" parameterType="string" resultType="boolean">
        select exists (
            select 1
            from ${schema}.df_acl_fund_pool
            where name = #{name}
        )
    </select>

    <insert id="insertDetail" parameterType="AclFundPoolDetail">
        insert into ${schema}.df_acl_fund_pool_detail (
            <include refid="aclFundPoolDetailColumns"/>
        ) values (
            #{id},
            #{fundPoolId},
            #{detailLicenseeClass.id},
            #{typeOfUse},
            #{licenseType},
            #{netAmount},
            #{grossAmount},
            #{ldmtFlag},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <select id="findDetailsByFundPoolId" parameterType="string" resultMap="aclFundPoolDetailResultMap">
        select
            df_acl_fund_pool_detail_uid,
            df_acl_fund_pool_uid,
            fpd.detail_licensee_class_id,
            dlc.description detail_licensee_class_name,
            type_of_use,
            license_type,
            net_amount,
            gross_amount,
            is_ldmt
        from ${schema}.df_acl_fund_pool_detail fpd
        join ${schema}.df_detail_licensee_class dlc on fpd.detail_licensee_class_id = dlc.detail_licensee_class_id
        where fpd.df_acl_fund_pool_uid = #{fundPoolId}
    </select>

    <select id="findAllDetails" parameterType="string" resultMap="aclFundPoolDetailResultMap">
        select
            df_acl_fund_pool_detail_uid,
            df_acl_fund_pool_uid,
            fpd.detail_licensee_class_id,
            dlc.description detail_licensee_class_name,
            type_of_use,
            license_type,
            net_amount,
            gross_amount,
            is_ldmt
        from ${schema}.df_acl_fund_pool_detail fpd
        join ${schema}.df_detail_licensee_class dlc on fpd.detail_licensee_class_id = dlc.detail_licensee_class_id
        order by detail_licensee_class_id, type_of_use, license_type
    </select>

    <select id="addLdmtDetailsToFundPool" parameterType="map" resultType="int">
        with fund_pool_detail as (
            update ${schema}.df_acl_fund_pool_detail
            set
                df_acl_fund_pool_uid = #{fundPoolId},
                <include refid="StoredEntityMapper.update"/>
            where is_ldmt = true
                and df_acl_fund_pool_uid is null
                and license_type = #{licenseType}
            returning 1
        )
        select count(*) from fund_pool_detail;
    </select>

    <select id="findDtosByFilter" parameterType="map" resultMap="aclFundPoolDetailDtoResultMap">
        select
            df_acl_fund_pool_detail_uid,
            fp.name fund_pool_name,
            fp.period,
            fpd.license_type,
            fpd.detail_licensee_class_id,
            dlc.description detail_licensee_class_name,
            alc.aggregate_licensee_class_id,
            alc.description aggregate_licensee_class_name,
            type_of_use,
            net_amount,
            gross_amount,
            is_ldmt
        from ${schema}.df_acl_fund_pool_detail fpd
        join ${schema}.df_acl_fund_pool fp on fpd.df_acl_fund_pool_uid = fp.df_acl_fund_pool_uid
        join ${schema}.df_detail_licensee_class dlc on fpd.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_aggregate_licensee_class alc on dlc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        <include refid="IAclFundPoolMapper.aclFundPoolDetailFilter"/>
        order by fp.name, dlc.detail_licensee_class_id
    </select>

    <sql id="aclFundPoolDetailFilter">
        <where>
            <if test="filter.fundPoolNames.size() > 0">
                and
                <foreach collection="filter.fundPoolNames" item="fundPoolName" open="(" separator=" or " close=")">
                    fp.name = #{fundPoolName}
                </foreach>
            </if>
            <if test="filter.periods.size() > 0">
                and
                <foreach collection="filter.periods" item="period" open="(" separator=" or " close=")">
                    fp.period = #{period}
                </foreach>
            </if>
            <if test="filter.aggregateLicenseeClasses.size() > 0">
                and
                <foreach collection="filter.aggregateLicenseeClasses" item="aggregateLicenseeClass" open="(" separator=" or " close=")">
                    <choose>
                        <when test="null != aggregateLicenseeClass.id">
                            alc.aggregate_licensee_class_id = #{aggregateLicenseeClass.id}
                        </when>
                    </choose>
                </foreach>
            </if>
            <if test="filter.detailLicenseeClasses.size() > 0">
                and
                <foreach collection="filter.detailLicenseeClasses" item="detailLicenseeClass" open="(" separator=" or " close=")">
                    <choose>
                        <when test="null != detailLicenseeClass.id">
                            fpd.detail_licensee_class_id = #{detailLicenseeClass.id}
                        </when>
                    </choose>
                </foreach>
            </if>
            <if test="null != filter.licenseType">
                and fp.license_type = #{filter.licenseType}
            </if>
            <if test="null != filter.fundPoolType">
                and type_of_use = #{filter.fundPoolType}
            </if>
        </where>
    </sql>
</mapper>
