<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IAclScenarioUsageMapper">

    <resultMap id="aclScenarioDetailResultMap" type="AclScenarioDetail" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_scenario_detail_uid"/>
        <result property="scenarioId" column="df_acl_scenario_uid"/>
        <result property="period" column="period_end_date"/>
        <result property="originalDetailId" column="original_detail_id"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="detailLicenseeClass.id" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClass.description" column="detail_licensee_class_name"/>
        <result property="aggregateLicenseeClassId" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClassName" column="aggregate_licensee_class_name"/>
        <result property="publicationType.id" column="publication_type_uid"/>
        <result property="publicationType.weight" column="pub_type_weight"/>
        <result property="publicationType.period" column="pub_type_period"/>
        <result property="price" column="price"/>
        <result property="priceFlag" column="price_flag"/>
        <result property="content" column="content"/>
        <result property="contentFlag" column="content_flag"/>
        <result property="contentUnitPrice" column="content_unit_price"/>
        <result property="contentUnitPriceFlag" column="content_unit_price_flag"/>
        <result property="numberOfCopies" column="number_of_copies"/>
        <result property="usageAgeWeight" column="usage_age_weight"/>
        <result property="weightedCopies" column="weighted_copies"/>
        <result property="surveyCountry" column="survey_country"/>
        <result property="reportedTypeOfUse" column="reported_type_of_use"/>
        <result property="typeOfUse" column="scenario_detail_type_of_use"/>
        <collection property="scenarioShareDetails" javaType="java.util.List" ofType="com.copyright.rup.dist.foreign.domain.AclScenarioShareDetail">
            <result property="rhAccountNumber" column="rh_account_number"/>
            <result property="payeeAccountNumber" column="payee_account_number"/>
            <result property="typeOfUse" column="type_of_use"/>
            <result property="volumeWeight" column="volume_weight"/>
            <result property="valueWeight" column="value_weight"/>
            <result property="valueShare" column="value_share"/>
            <result property="volumeShare" column="volume_share"/>
            <result property="detailShare" column="detail_share"/>
            <result property="volumeWeightDenominator" column="volume_weight_denominator"/>
            <result property="valueWeightDenominator" column="value_weight_denominator"/>
            <result property="netAmount" column="net_amount"/>
            <result property="grossAmount" column="gross_amount"/>
            <result property="serviceFeeAmount" column="service_fee_amount"/>
        </collection>
    </resultMap>

    <resultMap id="aclRightsholderTotalsHolderResultMap" type="AclRightsholderTotalsHolder">
        <result property="rightsholder.name" column="rh_name"/>
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="printPayeeAccountNumber" column="print_payee_account_number"/>
        <result property="printPayeeName" column="print_payee_name"/>
        <result property="digitalPayeeAccountNumber" column="digital_payee_account_number"/>
        <result property="digitalPayeeName" column="digital_payee_name"/>
        <result property="grossTotalPrint" column="gross_total_print"/>
        <result property="grossTotalDigital" column="gross_total_digital"/>
        <result property="serviceFeeTotalPrint" column="service_fee_total_print"/>
        <result property="serviceFeeTotalDigital" column="service_fee_total_digital"/>
        <result property="netTotalPrint" column="net_total_print"/>
        <result property="netTotalDigital" column="net_total_digital"/>
        <result property="numberOfTitles" column="number_of_titles"/>
        <result property="numberOfAggLcClasses" column="number_of_agg_lc_classes"/>
        <result property="licenseType" column="license_type"/>
    </resultMap>

    <resultMap id="aclScenarioDtoResultMap" type="AclScenarioDto" extends="IAclScenarioMapper.aclScenarioResultMap">
        <result property="grossTotal" column="gross_total"/>
        <result property="grossTotalPrint" column="gross_total_print"/>
        <result property="grossTotalDigital" column="gross_total_digital"/>
        <result property="serviceFeeTotal" column="service_fee_total"/>
        <result property="serviceFeeTotalPrint" column="service_fee_total_print"/>
        <result property="serviceFeeTotalDigital" column="service_fee_total_digital"/>
        <result property="netTotal" column="net_total"/>
        <result property="netTotalPrint" column="net_total_print"/>
        <result property="netTotalDigital" column="net_total_digital"/>
        <result property="numberOfRhsPrint" column="number_of_rhs_print"/>
        <result property="numberOfRhsDigital" column="number_of_rhs_digital"/>
        <result property="numberOfWorksPrint" column="number_of_works_print"/>
        <result property="numberOfWorksDigital" column="number_of_works_digital"/>
        <result property="copiedFrom" column="copied_from"/>
        <association property="auditItem" resultMap="IScenarioAuditMapper.scenarioAuditItemResultMap" columnPrefix="action_"/>
    </resultMap>

    <resultMap id="aclScenarioDetailDtoResultMap" type="AclScenarioDetailDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_scenario_detail_uid"/>
        <result property="originalDetailId" column="original_detail_id"/>
        <result property="productFamily" column="product_family"/>
        <result property="usageBatchName" column="usage_batch_name"/>
        <result property="periodEndPeriod" column="period_end_date"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="rhAccountNumberPrint" column="rh_account_number_print"/>
        <result property="rhNamePrint" column="rh_name_print"/>
        <result property="payeeAccountNumberPrint" column="payee_account_number_print"/>
        <result property="payeeNamePrint" column="payee_name_print"/>
        <result property="rhAccountNumberDigital" column="rh_account_number_digital"/>
        <result property="rhNameDigital" column="rh_name_digital"/>
        <result property="payeeAccountNumberDigital" column="payee_account_number_digital"/>
        <result property="payeeNameDigital" column="payee_name_digital"/>
        <result property="usagePeriod" column="usage_period"/>
        <result property="usageAgeWeight" column="usage_age_weight"/>
        <result property="detailLicenseeClassId" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClassName" column="detail_licensee_class_name"/>
        <result property="aggregateLicenseeClassId" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClassName" column="aggregate_licensee_class_name"/>
        <result property="surveyCountry" column="survey_country"/>
        <result property="reportedTypeOfUse" column="reported_type_of_use"/>
        <result property="typeOfUse" column="type_of_use"/>
        <result property="numberOfCopies" column="number_of_copies"/>
        <result property="weightedCopies" column="weighted_copies"/>
        <result property="publicationType.id" column="publication_type_uid"/>
        <result property="publicationType.name" column="pub_type_name"/>
        <result property="publicationType.weight" column="pub_type_weight"/>
        <result property="price" column="price"/>
        <result property="priceFlag" column="price_flag"/>
        <result property="content" column="content"/>
        <result property="contentFlag" column="content_flag"/>
        <result property="contentUnitPrice" column="content_unit_price"/>
        <result property="contentUnitPriceFlag" column="content_unit_price_flag"/>
        <result property="valueSharePrint" column="value_share_print"/>
        <result property="volumeSharePrint" column="volume_share_print"/>
        <result property="detailSharePrint" column="detail_share_print"/>
        <result property="netAmountPrint" column="net_amount_print"/>
        <result property="valueShareDigital" column="value_share_digital"/>
        <result property="volumeShareDigital" column="volume_share_digital"/>
        <result property="detailShareDigital" column="detail_share_digital"/>
        <result property="netAmountDigital" column="net_amount_digital"/>
        <result property="combinedNetAmount" column="combined_net_amount"/>
    </resultMap>

    <resultMap id="aclRightsholderTotalsHolderDtoResultMap" type="AclRightsholderTotalsHolderDto" extends="aclRightsholderTotalsHolderResultMap">
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="grossTotal" column="gross_total"/>
        <result property="netTotal" column="net_total"/>
        <result property="aggregateLicenseeClass.id" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClass.description" column="aggregate_licensee_class_name"/>
    </resultMap>

    <resultMap id="scenarioLiabilitiesResultMap" type="AclScenarioLiabilityDetail">
        <result property="liabilityDetailId" column="df_acl_share_detail_uid"/>
        <result property="rightsholderId" column="rh_id"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="typeOfUse" column="type_of_use"/>
        <result property="licenseType" column="license_type"/>
        <result property="aggregateLicenseeClassName" column="detail_licensee_class_name"/>
        <result property="productFamily" column="product_family"/>
        <result property="netAmount" column="net_amount"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="grossAmount" column="gross_amount"/>
    </resultMap>

    <sql id="periodPriorSql">
        <!--Gets period_prior for each usage 'years interval * 12 + month interval / 6'  for example: 202212 and 202012 returns 4-->
        select (
            extract(year from age(to_date(${period}::text, 'YYYYMM'), to_date(u.period::text, 'YYYYMM')::timestamp)) * 12 +
            extract(month from age(to_date(${period}::text, 'YYYYMM'), to_date(u.period::text, 'YYYYMM')::timestamp))
        ) / 6
    </sql>

    <sql id="searchWhereClause">
        (r.name ilike '%' || #{searchValue} || '%' or
        cast(shd.rh_account_number as text) like '%' || #{searchValue} || '%')
    </sql>

    <sql id="aclScenarioWithAmountsAndLastActionColumns">
        s.df_acl_scenario_uid,
        s.df_acl_usage_batch_uid,
        s.df_acl_fund_pool_uid,
        s.df_acl_grant_set_uid,
        s.name,
        s.description,
        s.status_ind,
        s.is_editable,
        s.period_end_date,
        s.license_type,
        s.copied_from,
        coalesce(sum(gross_total), 0) gross_total,
        coalesce(sum(service_fee_total), 0) service_fee_total,
        coalesce(sum(net_total), 0) net_total,
        sum(case when type_of_use = 'PRINT' then gross_total else 0 end) gross_total_print,
        sum(case when type_of_use = 'PRINT' then service_fee_total else 0 end) service_fee_total_print,
        sum(case when type_of_use = 'PRINT' then net_total else 0 end) net_total_print,
        sum(case when type_of_use = 'PRINT' then number_of_rhs else 0 end) number_of_rhs_print,
        sum(case when type_of_use = 'PRINT' then number_of_works else 0 end) number_of_works_print,
        sum(case when type_of_use = 'DIGITAL' then gross_total else 0 end) gross_total_digital,
        sum(case when type_of_use = 'DIGITAL' then service_fee_total else 0 end) service_fee_total_digital,
        sum(case when type_of_use = 'DIGITAL' then net_total else 0 end) net_total_digital,
        sum(case when type_of_use = 'DIGITAL' then number_of_rhs else 0 end) number_of_rhs_digital,
        sum(case when type_of_use = 'DIGITAL' then number_of_works else 0 end) number_of_works_digital,
        sa.df_acl_scenario_audit_uid action_df_scenario_audit_uid,
        sa.df_acl_scenario_uid action_df_scenario_uid,
        sa.action_type_ind action_action_type_ind,
        sa.action_reason action_action_reason,
        sa.created_datetime action_created_datetime,
        sa.updated_datetime action_updated_datetime,
        sa.created_by_user action_created_by_user,
        sa.updated_by_user action_updated_by_user,
        s.record_version action_record_version,
        s.created_datetime created_datetime,
        s.updated_datetime updated_datetime,
        s.created_by_user created_by_user,
        s.updated_by_user updated_by_user,
        s.record_version record_version
    </sql>

    <sql id="selectDtosByScenarioIdSql">
        <include refid="IAclScenarioUsageMapper.selectScenarioDetailDtosSql"/>
        where s.df_acl_scenario_uid = #{scenarioId}
        order by scd.df_acl_scenario_detail_uid
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="selectScenarioDetailDtosSql">
        select
            scd.df_acl_scenario_detail_uid,
            original_detail_id,
            'ACL' product_family,
            ub.name usage_batch_name,
            s.period_end_date,
            scd.wr_wrk_inst,
            system_title,
            print_details.rh_account_number rh_account_number_print,
            print_rh.name rh_name_print,
            print_details.payee_account_number payee_account_number_print,
            print_payee.name payee_name_print,
            digital_details.rh_account_number rh_account_number_digital,
            digital_rh.name rh_name_digital,
            digital_details.payee_account_number payee_account_number_digital,
            digital_payee.name payee_name_digital,
            scd.period_end_date usage_period,
            usage_age_weight,
            scd.detail_licensee_class_id,
            dlc.description detail_licensee_class_name,
            alc.aggregate_licensee_class_id,
            alc.description aggregate_licensee_class_name,
            survey_country,
            reported_type_of_use,
            scd.type_of_use,
            number_of_copies,
            weighted_copies,
            scd.publication_type_uid,
            pt.name pub_type_name,
            pub_type_weight,
            price,
            price_flag,
            content,
            content_flag,
            content_unit_price,
            content_unit_price_flag,
            print_details.value_share value_share_print,
            print_details.volume_share volume_share_print,
            print_details.detail_share detail_share_print,
            coalesce(print_details.net_amount, 0) net_amount_print,
            digital_details.value_share value_share_digital,
            digital_details.volume_share volume_share_digital,
            digital_details.detail_share detail_share_digital,
            coalesce(digital_details.net_amount, 0) net_amount_digital,
            coalesce(print_details.net_amount, 0) + coalesce(digital_details.net_amount, 0) combined_net_amount
        from ${schema}.df_acl_scenario s
        join ${schema}.df_acl_usage_batch ub on s.df_acl_usage_batch_uid = ub.df_acl_usage_batch_uid
        join ${schema}.df_acl_scenario_detail scd on s.df_acl_scenario_uid = scd.df_acl_scenario_uid
        join ${schema}.df_publication_type pt on scd.publication_type_uid = pt.df_publication_type_uid
        join ${schema}.df_detail_licensee_class dlc on scd.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_acl_scenario_licensee_class slc on dlc.detail_licensee_class_id = slc.detail_licensee_class_id
            and slc.df_acl_scenario_uid = #{scenarioId}
        join ${schema}.df_aggregate_licensee_class alc on slc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        <include refid="IAclScenarioUsageMapper.joinShareDetailsSql"/>
    </sql>

    <sql id="selectScenarioDetailDtosCountSql">
        select count(1)
        from ${schema}.df_acl_scenario s
        join ${schema}.df_acl_usage_batch ub on s.df_acl_usage_batch_uid = ub.df_acl_usage_batch_uid
        join ${schema}.df_acl_scenario_detail scd on s.df_acl_scenario_uid = scd.df_acl_scenario_uid
        join ${schema}.df_publication_type pt on scd.publication_type_uid = pt.df_publication_type_uid
        join ${schema}.df_detail_licensee_class dlc on scd.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_acl_scenario_licensee_class slc on dlc.detail_licensee_class_id = slc.detail_licensee_class_id
            and slc.df_acl_scenario_uid = #{scenarioId}
        join ${schema}.df_aggregate_licensee_class alc on slc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        <include refid="IAclScenarioUsageMapper.joinShareDetailsSql"/>
    </sql>

    <sql id="joinShareDetailsSql">
        left join ${schema}.df_acl_share_detail print_details on scd.df_acl_scenario_detail_uid = print_details.df_acl_scenario_detail_uid
            and print_details.type_of_use = 'PRINT'
            <if test="null != accountNumber">
                and print_details.rh_account_number = #{accountNumber}
            </if>
        left join ${schema}.df_acl_share_detail digital_details on scd.df_acl_scenario_detail_uid = digital_details.df_acl_scenario_detail_uid
            and digital_details.type_of_use = 'DIGITAL'
            <if test="null != accountNumber">
                and digital_details.rh_account_number = #{accountNumber}
            </if>
        left join ${schema}.df_rightsholder print_rh on print_details.rh_account_number = print_rh.rh_account_number
        left join ${schema}.df_rightsholder print_payee on print_details.payee_account_number = print_payee.rh_account_number
        left join ${schema}.df_rightsholder digital_rh on digital_details.rh_account_number = digital_rh.rh_account_number
        left join ${schema}.df_rightsholder digital_payee on digital_details.payee_account_number = digital_payee.rh_account_number
    </sql>

    <sql id="shareDetailColumns">
        df_acl_scenario_detail_uid,
        shd.rh_account_number,
        r.name rh_name,
        shd.payee_account_number,
        p.name payee_name,
        value_share,
        volume_share,
        detail_share,
        net_amount
    </sql>

    <sql id="grantDetailJoinSql">
        join ${schema}.df_acl_grant_detail gd on gd.df_acl_grant_set_uid = #{scenario.grantSetId}
            and gd.wr_wrk_inst = ${wrWrkInst}
            and gd.grant_status = 'GRANT'
            and gd.is_eligible = true
            and (gd.type_of_use_status in
                <foreach collection="grantStatuses" item="status" separator="," open="(" close=")">
                    #{status}
                </foreach>
                or gd.type_of_use = ${typeOfUse}
            )
    </sql>

    <sql id="findAclRightsholderTotalsHoldersByScenarioIdSql">
        with shd as materialized (
            select
                shd.rh_account_number,
                min(case when shd.type_of_use = 'PRINT' then shd.payee_account_number end) as print_payee_account_number,
                min(case when shd.type_of_use = 'DIGITAL' then shd.payee_account_number end) as digital_payee_account_number,
                sum(case when shd.type_of_use = 'PRINT' then coalesce(shd.gross_amount, 0) else 0 end) as gross_total_print,
                sum(case when shd.type_of_use = 'PRINT' then coalesce(shd.service_fee_amount, 0) else 0 end) as service_fee_total_print,
                sum(case when shd.type_of_use = 'PRINT' then coalesce(shd.net_amount, 0) else 0 end) as net_total_print,
                sum(case when shd.type_of_use = 'DIGITAL' then coalesce(shd.gross_amount, 0) else 0 end) as gross_total_digital,
                sum(case when shd.type_of_use = 'DIGITAL' then coalesce(shd.service_fee_amount, 0) else 0 end) as service_fee_total_digital,
                sum(case when shd.type_of_use = 'DIGITAL' then coalesce(shd.net_amount, 0) else 0 end) as net_total_digital,
                count(distinct shd.wr_wrk_inst) number_of_titles,
                count(distinct shd.aggregate_licensee_class_id) number_of_agg_lc_classes,
                s.license_type
            from ${schema}.df_acl_share_detail shd
            join ${schema}.df_acl_scenario s on s.df_acl_scenario_uid = #{scenarioId}
            where shd.df_acl_scenario_uid = #{scenarioId}
            group by shd.rh_account_number, s.license_type
        )
        select
            shd.*,
            r.name rh_name,
            rp.name print_payee_name,
            rd.name digital_payee_name
        from shd
        left join ${schema}.df_rightsholder r on shd.rh_account_number = r.rh_account_number
        left join ${schema}.df_rightsholder rp on shd.print_payee_account_number = rp.rh_account_number
        left join ${schema}.df_rightsholder rd on shd.digital_payee_account_number = rd.rh_account_number
        order by r.name
    </sql>

    <insert id="addToScenario" parameterType="map">
        with usages as materialized (
            select distinct on (u.df_acl_usage_uid)
                uuid_generate_v4() df_acl_scenario_detail_uid,
                #{scenario.id} df_acl_scenario_uid,
                u.period period_end_date,
                original_detail_id,
                u.wr_wrk_inst,
                reported_type_of_use,
                u.type_of_use,
                u.system_title,
                detail_licensee_class_id,
                publication_type_uid,
                price,
                price_flag,
                content,
                content_flag,
                content_unit_price,
                content_unit_price_flag,
                annualized_copies,
                uaw.weight usage_age_weight,
                survey_country,
                uaw.weight * annualized_copies weighted_copies
            from ${schema}.df_acl_usage u
            <include refid="grantDetailJoinSql">
                <property name="wrWrkInst" value="u.wr_wrk_inst"/>
                <property name="typeOfUse" value="u.type_of_use"/>
            </include>
            join ${schema}.df_acl_scenario_usage_age_weight uaw on uaw.df_acl_scenario_uid = #{scenario.id}
                and uaw.period_prior = (
                    <include refid="periodPriorSql">
                        <property name="period" value="#{scenario.periodEndDate}"/>
                    </include>
                )
            where df_acl_usage_batch_uid = #{scenario.usageBatchId}
                and uaw.weight > 0
                and annualized_copies &lt; 2000
        )
        insert into ${schema}.df_acl_scenario_detail (
            df_acl_scenario_detail_uid,
            df_acl_scenario_uid,
            period_end_date,
            original_detail_id,
            wr_wrk_inst,
            reported_type_of_use,
            type_of_use,
            system_title,
            detail_licensee_class_id,
            publication_type_uid,
            price,
            price_flag,
            content,
            content_flag,
            content_unit_price,
            content_unit_price_flag,
            number_of_copies,
            usage_age_weight,
            survey_country,
            weighted_copies,
            <include refid="StoredEntityMapper.additionalColumns"/>
        )
        select usages.*,
            <include refid="StoredEntityMapper.insert"/>
        from usages
    </insert>

    <insert id="addScenarioShares" parameterType="map">
        with shares as materialized (
            select
                uuid_generate_v4() df_acl_share_detail_uid,
                #{scenario.id} df_acl_scenario_uid,
                sd.df_acl_scenario_detail_uid,
                sd.wr_wrk_inst,
                gd.type_of_use,
                gd.rh_account_number,
                slc.aggregate_licensee_class_id,
                number_of_copies * usage_age_weight volume_weight,
                number_of_copies * usage_age_weight * content_unit_price * pub_type_weight value_weight
            from ${schema}.df_acl_scenario_detail sd
            join ${schema}.df_acl_scenario_licensee_class slc on sd.df_acl_scenario_uid = slc.df_acl_scenario_uid
                and sd.detail_licensee_class_id = slc.detail_licensee_class_id
            <include refid="grantDetailJoinSql">
                <property name="wrWrkInst" value="sd.wr_wrk_inst"/>
                <property name="typeOfUse" value="sd.type_of_use"/>
            </include>
            where sd.df_acl_scenario_uid = #{scenario.id}
        )
        insert into ${schema}.df_acl_share_detail (
            df_acl_share_detail_uid,
            df_acl_scenario_uid,
            df_acl_scenario_detail_uid,
            wr_wrk_inst,
            type_of_use,
            rh_account_number,
            aggregate_licensee_class_id,
            volume_weight,
            value_weight,
            <include refid="StoredEntityMapper.additionalColumns"/>
        )
        select shares.*,
            <include refid="StoredEntityMapper.insert"/>
        from shares
    </insert>

    <update id="populatePubTypeWeights" parameterType="map">
        with pub_type_weights_period_range as materialized (
            select
                df_publication_type_uid,
                weight,
                period as start_period,
                coalesce(lead(period - 1, 1) over (partition by df_publication_type_uid order by period), 209912) as end_period
            from ${schema}.df_acl_scenario_pub_type_weight
            where df_acl_scenario_uid = #{scenarioId}
        )
        update ${schema}.df_acl_scenario_detail sd
        set
            pub_type_weight = (
                select range.weight
                from pub_type_weights_period_range range
                where range.df_publication_type_uid = sd.publication_type_uid
                    and sd.period_end_date between range.start_period and range.end_period
            ),
            <include refid="StoredEntityMapper.update"/>
        where df_acl_scenario_uid = #{scenarioId}
    </update>

    <update id="calculateScenarioShares" parameterType="map">
        with denominators as materialized (
            select
                type_of_use,
                aggregate_licensee_class_id,
                case when sum(volume_weight) != 0 then sum(volume_weight) else 1 end as volume_weight_denominator,
                case when sum(value_weight) != 0 then sum(value_weight) else 1 end as value_weight_denominator
            from ${schema}.df_acl_share_detail
            where df_acl_scenario_uid = #{scenarioId}
            group by type_of_use, aggregate_licensee_class_id
        )
        update ${schema}.df_acl_share_detail sh
        set
            volume_share = volume_weight / d.volume_weight_denominator,
            value_share = value_weight / d.value_weight_denominator,
            detail_share = (volume_weight / d.volume_weight_denominator + value_weight / d.value_weight_denominator) / 2,
            <include refid="StoredEntityMapper.update"/>
        from denominators d
        where sh.df_acl_scenario_uid = #{scenarioId}
            and d.aggregate_licensee_class_id = sh.aggregate_licensee_class_id
            and d.type_of_use = sh.type_of_use
    </update>

    <update id="calculateScenarioAmounts" parameterType="map">
        with agg_class_amounts as materialized (
            select
                sc_det.aggregate_licensee_class_id,
                fpd.type_of_use,
                sum(fpd.net_amount) net_amount,
                sum(fpd.gross_amount) gross_amount
            from ${schema}.df_acl_scenario s
            join ${schema}.df_acl_fund_pool_detail fpd on s.df_acl_fund_pool_uid = fpd.df_acl_fund_pool_uid
            join ${schema}.df_acl_scenario_licensee_class sc_det on fpd.detail_licensee_class_id = sc_det.detail_licensee_class_id
                and sc_det.df_acl_scenario_uid = #{scenarioId}
            where s.df_acl_scenario_uid = #{scenarioId}
            group by fpd.type_of_use, sc_det.aggregate_licensee_class_id
        )
        update ${schema}.df_acl_share_detail sh
        set
            net_amount = detail_share * amounts.net_amount,
            gross_amount = detail_share * amounts.gross_amount,
            service_fee_amount = detail_share * amounts.gross_amount - detail_share * amounts.net_amount,
            <include refid="StoredEntityMapper.update"/>
        from agg_class_amounts amounts
        where sh.df_acl_scenario_uid  = #{scenarioId}
            and amounts.aggregate_licensee_class_id = sh.aggregate_licensee_class_id
            and amounts.type_of_use = sh.type_of_use
    </update>

    <select id="findScenarioDetailsByScenarioId" resultMap="aclScenarioDetailResultMap">
        select
            sd.df_acl_scenario_detail_uid,
            sd.df_acl_scenario_uid,
            period_end_date,
            original_detail_id,
            sd.wr_wrk_inst,
            system_title,
            sd.detail_licensee_class_id,
            dlc.description detail_licensee_class_name,
            slc.aggregate_licensee_class_id,
            alc.description aggregate_licensee_class_name,
            sd.publication_type_uid,
            pub_type_weight,
            price,
            price_flag,
            content,
            content_flag,
            content_unit_price,
            content_unit_price_flag,
            number_of_copies,
            usage_age_weight,
            weighted_copies,
            survey_country,
            reported_type_of_use,
            sd.type_of_use as scenario_detail_type_of_use,
            shd.rh_account_number,
            shd.payee_account_number,
            shd.type_of_use,
            shd.volume_weight,
            shd.value_weight,
            shd.value_share,
            shd.volume_share,
            shd.detail_share,
            shd.volume_weight_denominator,
            shd.value_weight_denominator,
            shd.net_amount,
            shd.gross_amount,
            shd.service_fee_amount
        from ${schema}.df_acl_scenario_detail sd
        left join ${schema}.df_acl_share_detail shd on sd.df_acl_scenario_detail_uid = shd.df_acl_scenario_detail_uid
        join ${schema}.df_acl_scenario_pub_type_weight spt on sd.df_acl_scenario_uid = spt.df_acl_scenario_uid
            and sd.publication_type_uid = spt.df_publication_type_uid
        join ${schema}.df_acl_scenario_licensee_class slc on sd.df_acl_scenario_uid = slc.df_acl_scenario_uid
            and sd.detail_licensee_class_id = slc.detail_licensee_class_id
        join ${schema}.df_detail_licensee_class dlc on slc.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_aggregate_licensee_class alc on slc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        where sd.df_acl_scenario_uid = #{scenarioId}
        order by original_detail_id, shd.type_of_use
    </select>

    <delete id="deleteZeroAmountShares" parameterType="string">
        delete from ${schema}.df_acl_share_detail
        where df_acl_scenario_uid = #{scenarioId}
            and (gross_amount is null or gross_amount = 0)
    </delete>

    <delete id="deleteZeroAmountUsages" parameterType="string">
        delete from ${schema}.df_acl_scenario_detail
        where df_acl_scenario_uid = #{scenarioId}
            and df_acl_scenario_detail_uid not in (
                select df_acl_scenario_detail_uid
                from ${schema}.df_acl_share_detail
                where df_acl_scenario_uid = #{scenarioId}
            )
    </delete>

    <select id="findAclRightsholderTotalsHoldersByScenarioId" parameterType="map" resultMap="aclRightsholderTotalsHolderResultMap">
        <include refid="IAclScenarioUsageMapper.findAclRightsholderTotalsHoldersByScenarioIdSql"/>
    </select>

    <select id="findWithAmountsAndLastAction" parameterType="string" resultMap="aclScenarioDtoResultMap">
        with groups as materialized (
            select
                #{scenarioId} as df_acl_scenario_uid,
                sum(gross_amount) as gross_total,
                sum(service_fee_amount) as service_fee_total,
                sum(net_amount) as net_total,
                count(distinct rh_account_number) number_of_rhs,
                count(distinct wr_wrk_inst) number_of_works,
                type_of_use
            from ${schema}.df_acl_share_detail
            where df_acl_scenario_uid = #{scenarioId}
            group by df_acl_scenario_uid, type_of_use
        )
        select
            <include refid="aclScenarioWithAmountsAndLastActionColumns"/>
        from ${schema}.df_acl_scenario s
        left join groups on s.df_acl_scenario_uid = groups.df_acl_scenario_uid
        left join ${schema}.df_acl_scenario_audit sa on sa.df_acl_scenario_uid = s.df_acl_scenario_uid
            and sa.df_acl_scenario_audit_uid = (
                select df_acl_scenario_audit_uid
                from ${schema}.df_acl_scenario_audit
                where df_acl_scenario_uid = s.df_acl_scenario_uid
                order by created_datetime desc, df_acl_scenario_audit_id desc
                limit 1
            )
        where s.df_acl_scenario_uid = #{scenarioId}
        group by s.df_acl_scenario_uid, sa.df_acl_scenario_audit_uid
    </select>

    <sql id="drillDownSearchWhereClause">
        (original_detail_id ilike '%' || #{searchValue} || '%' or
        cast(scd.wr_wrk_inst as text) like '%' || #{searchValue} || '%' or
        system_title ilike '%' || #{searchValue} || '%' or
        cast(print_details.rh_account_number as text) like '%' || #{searchValue} || '%' or
        print_rh.name ilike '%' || #{searchValue} || '%' or
        cast(digital_details.rh_account_number as text) like '%' || #{searchValue} || '%' or
        digital_rh.name ilike '%' || #{searchValue} || '%')
    </sql>

    <select id="findByScenarioIdAndRhAccountNumber" parameterType="map" resultMap="aclScenarioDetailDtoResultMap">
        <include refid="IAclScenarioUsageMapper.selectScenarioDetailDtosSql"/>
        where s.df_acl_scenario_uid = #{scenarioId}
            and (print_details.rh_account_number = #{accountNumber} or digital_details.rh_account_number = #{accountNumber})
        <if test="null != searchValue">
            and <include refid="drillDownSearchWhereClause"/>
        </if>
        <include refid="IAclScenarioMapper.ifSortable"/>
        <include refid="IUsageMapper.ifPageable"/>
    </select>

    <select id="findCountByScenarioIdAndRhAccountNumber" parameterType="map" resultType="int">
        <include refid="IAclScenarioUsageMapper.selectScenarioDetailDtosCountSql"/>
        where s.df_acl_scenario_uid = #{scenarioId}
            and (print_details.rh_account_number = #{accountNumber} or digital_details.rh_account_number = #{accountNumber})
        <if test="null != searchValue">
            and <include refid="drillDownSearchWhereClause"/>
        </if>
    </select>

    <sql id="viewDetailsSearchWhereClause">
        (original_detail_id ilike '%' || #{searchValue} || '%' or
        cast(scd.wr_wrk_inst as text) like '%' || #{searchValue} || '%' or
        system_title ilike '%' || #{searchValue} || '%' or
        cast(print_details.rh_account_number as text) like '%' || #{searchValue} || '%' or
        print_rh.name ilike '%' || #{searchValue} || '%' or
        cast(digital_details.rh_account_number as text) like '%' || #{searchValue} || '%' or
        digital_rh.name ilike '%' || #{searchValue} || '%' or
        cast(print_details.payee_account_number as text) like '%' || #{searchValue} || '%' or
        print_payee.name ilike '%' || #{searchValue} || '%' or
        cast(digital_details.payee_account_number as text) like '%' || #{searchValue} || '%' or
        digital_payee.name ilike '%' || #{searchValue} || '%')
    </sql>

    <select id="findByScenarioId" parameterType="map" resultMap="aclScenarioDetailDtoResultMap">
        <include refid="IAclScenarioUsageMapper.selectScenarioDetailDtosSql"/>
        where s.df_acl_scenario_uid = #{scenarioId}
        <if test="null != searchValue">
            and <include refid="viewDetailsSearchWhereClause"/>
        </if>
        <include refid="IAclScenarioMapper.ifSortable"/>
        <include refid="IUsageMapper.ifPageable"/>
    </select>

    <select id="findCountByScenarioId" parameterType="map" resultType="int">
        <if test="null == searchValue">
            select count(1)
            from ${schema}.df_acl_scenario_detail
            where df_acl_scenario_uid = #{scenarioId}
        </if>
        <if test="null != searchValue">
            <include refid="IAclScenarioUsageMapper.selectScenarioDetailDtosCountSql"/>
            where s.df_acl_scenario_uid = #{scenarioId}
                and <include refid="viewDetailsSearchWhereClause"/>
        </if>
    </select>

    <select id="findRightsholderDetailsResults" parameterType="map" resultMap="aclScenarioDetailDtoResultMap">
        <include refid="IAclScenarioUsageMapper.selectScenarioDetailDtosSql"/>
        where s.df_acl_scenario_uid = #{scenarioId}
            and (print_details.rh_account_number = #{accountNumber} or digital_details.rh_account_number = #{accountNumber})
            and scd.wr_wrk_inst = #{wrWrkInst}
            and alc.aggregate_licensee_class_id = #{aggregateLicenseeClassId}
        order by scd.updated_datetime desc, scd.df_acl_scenario_detail_uid
    </select>

    <select id="findAclAggregateLicenseeClassesByRightsholder" parameterType="map" resultMap="aclRightsholderTotalsHolderDtoResultMap">
        select
            shd.aggregate_licensee_class_id,
            alc.description as aggregate_licensee_class_name,
            sum(case when shd.type_of_use = 'PRINT' then coalesce(shd.gross_amount, 0) else 0 end) as gross_total_print,
            sum(case when shd.type_of_use = 'PRINT' then coalesce(shd.net_amount, 0) else 0 end) as net_total_print,
            sum(case when shd.type_of_use = 'DIGITAL' then coalesce(shd.gross_amount, 0) else 0 end) as gross_total_digital,
            sum(case when shd.type_of_use = 'DIGITAL' then coalesce(shd.net_amount, 0) else 0 end) as net_total_digital,
            coalesce(sum(shd.gross_amount), 0) as gross_total,
            coalesce(sum(shd.net_amount), 0) as net_total
        from ${schema}.df_acl_share_detail shd
        join ${schema}.df_aggregate_licensee_class alc on shd.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        where shd.df_acl_scenario_uid = #{scenarioId}
            and shd.rh_account_number = #{accountNumber}
            <if test="null != wrWrkInst">
                and shd.wr_wrk_inst = #{wrWrkInst}
            </if>
        group by shd.aggregate_licensee_class_id, aggregate_licensee_class_name
        order by shd.aggregate_licensee_class_id
    </select>

    <select id="findRightsholderTitleResults" parameterType="map" resultMap="aclRightsholderTotalsHolderDtoResultMap">
        select
            scd.wr_wrk_inst,
            scd.system_title,
            sum(case when shd.type_of_use = 'PRINT' then coalesce(shd.gross_amount, 0) else 0 end) as gross_total_print,
            sum(case when shd.type_of_use = 'PRINT' then coalesce(shd.net_amount, 0) else 0 end) as net_total_print,
            sum(case when shd.type_of_use = 'DIGITAL' then coalesce(shd.gross_amount, 0) else 0 end) as gross_total_digital,
            sum(case when shd.type_of_use = 'DIGITAL' then coalesce(shd.net_amount, 0) else 0 end) as net_total_digital,
            coalesce(sum(shd.gross_amount), 0) as gross_total,
            coalesce(sum(shd.net_amount), 0) as net_total
        from ${schema}.df_acl_scenario_detail scd
        join ${schema}.df_acl_share_detail shd on scd.df_acl_scenario_detail_uid = shd.df_acl_scenario_detail_uid
        where scd.df_acl_scenario_uid = #{scenarioId}
            and shd.rh_account_number = #{accountNumber}
        <if test="null != aggregateLicenseeClassId">
            and shd.aggregate_licensee_class_id = #{aggregateLicenseeClassId}
        </if>
        group by scd.wr_wrk_inst, system_title
        order by scd.wr_wrk_inst
    </select>

    <update id="updatePayeeByAccountNumber" parameterType="map">
        update ${schema}.df_acl_share_detail
        set
            payee_account_number = #{payeeAccountNumber}
        where rh_account_number = #{rhAccountNumber}
            and df_acl_scenario_uid = #{scenarioId}
            and type_of_use = #{typeOfUse}
    </update>

    <select id="findRightsholderPayeeProductFamilyHoldersByAclScenarioIds" resultMap="IUsageMapper.rightsholderPayeeProductFamilyHolderResultMap" parameterType="list">
        select
            rh.df_rightsholder_uid rh_uid,
            rh.name rh_name,
            shd.rh_account_number,
            payee.df_rightsholder_uid payee_uid,
            payee.name payee_name,
            shd.payee_account_number,
            'ACL' || shd.type_of_use as product_family
        from (
            select distinct
                rh_account_number,
                payee_account_number,
                type_of_use
            from ${schema}.df_acl_share_detail shd
            where df_acl_scenario_uid in
            <foreach collection="collection" item="scenarioId" open="(" separator="," close=")">
                #{scenarioId}
            </foreach>
        ) shd
        left join ${schema}.df_rightsholder rh on shd.rh_account_number = rh.rh_account_number
        left join ${schema}.df_rightsholder payee on shd.payee_account_number = payee.rh_account_number
    </select>

    <select id="findForSendToLmByScenarioId" resultMap="scenarioLiabilitiesResultMap">
        select
            df_acl_share_detail_uid,
            sda.wr_wrk_inst,
            sda.system_title,
            rh.df_rightsholder_uid rh_id,
            shd.type_of_use,
            case when shd.type_of_use = 'DIGITAL' then 'ACLDIGITAL' else 'ACLPRINT' end as product_family,
            s.license_type,
            alc.description detail_licensee_class_name,
            gross_amount,
            service_fee_amount,
            net_amount
        from ${schema}.df_acl_share_detail shd
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = shd.rh_account_number
        join ${schema}.df_acl_scenario_detail sda on shd.df_acl_scenario_detail_uid = sda.df_acl_scenario_detail_uid
        join ${schema}.df_acl_scenario s on shd.df_acl_scenario_uid = s.df_acl_scenario_uid
        join ${schema}.df_aggregate_licensee_class alc on shd.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
        where sda.df_acl_scenario_uid = #{scenarioId}
        order by df_acl_share_detail_uid
    </select>
</mapper>
