<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IUsageBatchStatusMapper">

    <resultMap id="usageBatchStatusMap" type="UsageBatchStatus">
        <result property="batchName" column="batch_name"/>
        <result property="totalCount" column="total_count"/>
        <result property="newCount" column="new_count"/>
        <result property="workNotFoundCount" column="work_not_found_count"/>
        <result property="workFoundCount" column="work_found_count"/>
        <result property="ntsWithdrawnCount" column="nts_withdrawn_count"/>
        <result property="workResearchCount" column="work_research_count"/>
        <result property="rhNotFoundCount" column="rh_not_found_count"/>
        <result property="rhFoundCount" column="rh_found_count"/>
        <result property="workNotGrantedCount" column="work_not_granted_count"/>
        <result property="sentForRaCount" column="sent_for_ra_count"/>
        <result property="nonStmRhCount" column="non_stm_rh_count"/>
        <result property="usTaxCountryCount" column="us_tax_country_count"/>
        <result property="unclassifiedCount" column="unclassified_count"/>
        <result property="eligibleCount" column="eligible_count"/>
        <result property="excludedCount" column="excluded_count"/>
        <result property="status" column="status"/>
    </resultMap>

    <select id="findUsageBatchStatusesFas" resultMap="usageBatchStatusMap" parameterType="string">
        select
            name batch_name,
            initial_usages_count total_count,
            max(new_count) new_count,
            max(work_found_count) work_found_count,
            max(work_not_found_count) work_not_found_count,
            max(nts_withdrawn_count) nts_withdrawn_count,
            max(work_research_count) work_research_count,
            max(rh_found_count) rh_found_count,
            max(rh_not_found_count) rh_not_found_count,
            max(sent_for_ra_count) sent_for_ra_count,
            max(eligible_count) eligible_count,
            case when max(new_count) + max(work_found_count) + max(rh_found_count) = 0 then 'COMPLETED' else 'IN_PROGRESS' end status
        from (
            select
                name,
                b.created_datetime,
                initial_usages_count,
                case when status_ind = 'NEW' then count(1) else 0 end new_count,
                case when status_ind = 'WORK_NOT_FOUND' then count(1) else 0 end work_not_found_count,
                case when status_ind = 'WORK_FOUND' then count(1) else 0 end work_found_count,
                case when status_ind = 'NTS_WITHDRAWN' then count(1) else 0 end nts_withdrawn_count,
                case when status_ind = 'WORK_RESEARCH' then count(1) else 0 end work_research_count,
                case when status_ind = 'RH_NOT_FOUND' then count(1) else 0 end rh_not_found_count,
                case when status_ind = 'RH_FOUND' then count(1) else 0 end rh_found_count,
                case when status_ind = 'SENT_FOR_RA' then count(1) else 0 end sent_for_ra_count,
                case when status_ind = 'ELIGIBLE' then count(1) else 0 end eligible_count
            from ${schema}.df_usage u
            join ${schema}.df_usage_batch b on b.df_usage_batch_uid = u.df_usage_batch_uid
            where b.df_usage_batch_uid in
                <foreach collection="collection" item="batchId" separator="," open="(" close=")">
                    #{batchId}
                </foreach>
            group by status_ind, name, b.created_datetime, initial_usages_count
        ) nested
        group by name, created_datetime, initial_usages_count
        order by created_datetime desc
    </select>

    <select id="findUsageBatchStatusesNts" resultMap="usageBatchStatusMap" parameterType="string">
        select
            name batch_name,
            initial_usages_count total_count,
            max(work_found_count) work_found_count,
            max(rh_found_count) rh_found_count,
            max(non_stm_rh_count) non_stm_rh_count,
            max(us_tax_country_count) us_tax_country_count,
            max(unclassified_count) unclassified_count,
            max(eligible_count) eligible_count,
            initial_usages_count - sum(status_count) excluded_count,
            case when max(work_found_count) + max (non_stm_rh_count) + max(us_tax_country_count) + max(rh_found_count) = 0 then 'COMPLETED' else 'IN_PROGRESS' end status
        from (
            select
                name,
                b.created_datetime,
                initial_usages_count,
                count(1) status_count,
                case when status_ind = 'WORK_FOUND' then count(1) else 0 end work_found_count,
                case when status_ind = 'RH_FOUND' then count(1) else 0 end rh_found_count,
                case when status_ind = 'NON_STM_RH' then count(1) else 0 end non_stm_rh_count,
                case when status_ind = 'US_TAX_COUNTRY' then count(1) else 0 end us_tax_country_count,
                case when status_ind = 'UNCLASSIFIED' then count(1) else 0 end unclassified_count,
                case when status_ind = 'ELIGIBLE' then count(1) else 0 end eligible_count
            from ${schema}.df_usage u
            join ${schema}.df_usage_batch b on b.df_usage_batch_uid = u.df_usage_batch_uid
            where b.df_usage_batch_uid in
                <foreach collection="collection" item="batchId" separator="," open="(" close=")">
                    #{batchId}
                </foreach>
            group by status_ind, name, b.created_datetime, initial_usages_count
        ) nested
        group by name, created_datetime, initial_usages_count
        order by created_datetime desc
    </select>

    <select id="findUsageBatchStatusesAacl" resultMap="usageBatchStatusMap" parameterType="string">
        select
            name batch_name,
            initial_usages_count total_count,
            max(new_count) new_count,
            max(work_not_found_count) work_not_found_count,
            max(work_found_count) work_found_count,
            max(rh_found_count) rh_found_count,
            max(work_research_count) work_research_count,
            max(eligible_count) eligible_count,
            initial_usages_count - sum(status_count) excluded_count,
            case when max(new_count) + max(work_found_count) = 0 then 'COMPLETED' else 'IN_PROGRESS' end status
        from (
            select
                name,
                b.created_datetime,
                initial_usages_count,
                count(1) status_count,
                case when status_ind = 'NEW' then count(1) else 0 end new_count,
                case when status_ind = 'WORK_NOT_FOUND' then count(1) else 0 end work_not_found_count,
                case when status_ind = 'WORK_FOUND' then count(1) else 0 end work_found_count,
                case when status_ind = 'RH_FOUND' then count(1) else 0 end rh_found_count,
                case when status_ind = 'WORK_RESEARCH' then count(1) else 0 end work_research_count,
                case when status_ind = 'ELIGIBLE' then count(1) else 0 end eligible_count
            from ${schema}.df_usage u
            join ${schema}.df_usage_batch b on b.df_usage_batch_uid = u.df_usage_batch_uid
            where b.df_usage_batch_uid in
                <foreach collection="collection" item="batchId" separator="," open="(" close=")">
                    #{batchId}
                </foreach>
            group by status_ind, name, b.created_datetime, initial_usages_count
        ) nested
        group by name, created_datetime, initial_usages_count
        order by created_datetime desc
    </select>

    <select id="findUsageBatchStatusesSal" resultMap="usageBatchStatusMap" parameterType="string">
        select
            name batch_name,
            initial_usages_count total_count,
            max(new_count) new_count,
            max(work_not_found_count) work_not_found_count,
            max(work_found_count) work_found_count,
            max(work_not_granted_count) work_not_granted_count,
            max(rh_not_found_count) rh_not_found_count,
            max(rh_found_count) rh_found_count,
            max(eligible_count) eligible_count,
            case when max(new_count) + max(work_found_count) + max(rh_found_count) = 0 then 'COMPLETED' else 'IN_PROGRESS' end status
        from (
            select
                name,
                b.created_datetime,
                initial_usages_count,
                count(1) status_count,
                case when status_ind = 'NEW' then count(1) else 0 end new_count,
                case when status_ind = 'WORK_NOT_FOUND' then count(1) else 0 end work_not_found_count,
                case when status_ind = 'WORK_FOUND' then count(1) else 0 end work_found_count,
                case when status_ind = 'WORK_NOT_GRANTED' then count(1) else 0 end work_not_granted_count,
                case when status_ind = 'RH_NOT_FOUND' then count(1) else 0 end rh_not_found_count,
                case when status_ind = 'RH_FOUND' then count(1) else 0 end rh_found_count,
                case when status_ind = 'ELIGIBLE' then count(1) else 0 end eligible_count
            from ${schema}.df_usage u
            join ${schema}.df_usage_batch b on b.df_usage_batch_uid = u.df_usage_batch_uid
            where b.df_usage_batch_uid in
                <foreach collection="collection" item="batchId" separator="," open="(" close=")">
                    #{batchId}
                </foreach>
            group by status_ind, name, b.created_datetime, initial_usages_count
        ) nested
        group by name, created_datetime, initial_usages_count
        order by created_datetime desc
    </select>

    <select id="findFasUsageBatchIdsEligibleForStatistic" resultType="string" parameterType="map">
        select df_usage_batch_uid
        from (
            select
                b.df_usage_batch_uid,
                u.df_scenario_uid,
                ufas.df_fund_pool_uid
            from ${schema}.df_usage_batch b
            join ${schema}.df_usage u on b.df_usage_batch_uid = u.df_usage_batch_uid
            join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
            left join ${schema}.df_usage_archive ua on b.df_usage_batch_uid = ua.df_usage_batch_uid
            where b.product_family = #{productFamily}
                and b.created_datetime::date > #{startDate}
                and ua.df_usage_batch_uid is null
            group by b.df_usage_batch_uid, u.df_scenario_uid, ufas.df_fund_pool_uid
        ) nested
        group by df_usage_batch_uid
        having min(df_scenario_uid) is null
            and min(df_fund_pool_uid) is null
            and count(1) = 1
    </select>

    <select id="findUsageBatchIdsEligibleForStatistic" resultType="string" parameterType="map">
        select b.df_usage_batch_uid
        from ${schema}.df_usage_batch b
        left join ${schema}.df_scenario_usage_filter_to_usage_batches_ids_map map on b.df_usage_batch_uid = map.df_usage_batch_uid
        where b.product_family = #{productFamily}
            and b.created_datetime::date > #{startDate}
            and map.df_usage_batch_uid is null
    </select>

    <select id="isBatchProcessingCompleted" resultType="boolean" parameterType="map">
        select not exists (
            select 1
            from ${schema}.df_usage
            where df_usage_batch_uid = #{batchId}
                and status_ind in
                <foreach collection="statuses" item="status" separator="," open="(" close=")">
                    #{status}
                </foreach>
        )
    </select>
</mapper>
