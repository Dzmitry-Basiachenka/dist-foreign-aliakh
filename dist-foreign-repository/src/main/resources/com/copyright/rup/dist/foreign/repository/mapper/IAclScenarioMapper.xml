<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IAclScenarioMapper">

    <resultMap id="aclScenarioResultMap" type="AclScenario" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_scenario_uid"/>
        <result property="usageBatchId" column="df_acl_usage_batch_uid"/>
        <result property="fundPoolId" column="df_acl_fund_pool_uid"/>
        <result property="grantSetId" column="df_acl_grant_set_uid"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="status" column="status_ind"/>
        <result property="editableFlag" column="is_editable"/>
        <result property="periodEndDate" column="period_end_date"/>
        <result property="licenseType" column="license_type"/>
        <collection property="usageAges" javaType="java.util.List" ofType="com.copyright.rup.dist.foreign.domain.UsageAge">
            <result property="period" column="period_prior"/>
            <result property="weight" column="usage_weight"/>
        </collection>
        <collection property="publicationTypes" javaType="java.util.List" ofType="com.copyright.rup.dist.foreign.domain.AclPublicationType">
            <result property="id" column="df_publication_type_uid"/>
            <result property="weight" column="pub_type_weight"/>
            <result property="period" column="pub_type_period"/>
        </collection>
        <collection property="detailLicenseeClasses" javaType="java.util.List" ofType="com.copyright.rup.dist.foreign.domain.DetailLicenseeClass">
            <result property="id" column="detail_licensee_class_id"/>
            <result property="aggregateLicenseeClass.id" column="aggregate_licensee_class_id"/>
        </collection>
    </resultMap>

    <sql id="aclScenarioColumns">
        s.df_acl_scenario_uid,
        df_acl_usage_batch_uid,
        df_acl_fund_pool_uid,
        df_acl_grant_set_uid,
        name,
        description,
        status_ind,
        is_editable,
        period_end_date,
        license_type,
        sua.period_prior,
        sua.weight usage_weight,
        spt.df_publication_type_uid,
        spt.weight pub_type_weight,
        spt.period pub_type_period,
        slc.detail_licensee_class_id,
        slc.aggregate_licensee_class_id,
        s.created_datetime,
        s.updated_datetime,
        s.updated_by_user,
        s.created_by_user
    </sql>

    <sql id="drillDownSearchWhereClause">
        (original_detail_id ilike '%' || #{searchValue} || '%' or
        cast(scd.wr_wrk_inst as text) like '%' || #{searchValue} || '%' or
        system_title ilike '%' || #{searchValue} || '%' or
        cast(print_details.rh_account_number as text) like '%' || #{searchValue} || '%' or
        print_details.rh_name ilike '%' || #{searchValue} || '%' or
        cast(digital_details.rh_account_number as text) like '%' || #{searchValue} || '%' or
        digital_details.rh_name ilike '%' || #{searchValue} || '%')
    </sql>

    <sql id="ifSortable">
        order by
        <choose>
            <when test="null != sort">
                <include refid="IAclScenarioMapper.chooseSortProperty">
                    <property name="detail_uid" value="scd.df_acl_scenario_detail_uid"/>
                </include>
            </when>
            <otherwise>
                scd.updated_datetime desc
            </otherwise>
        </choose>,
        scd.df_acl_scenario_detail_uid
    </sql>

    <sql id="chooseSortProperty">
        <choose>
            <when test="sort.property == 'detailId'">
                ${detail_uid} <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageDetailId'">
                original_detail_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'productFamily'">
                product_family <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageBatchName'">
                ub.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'periodEndDate'">
                s.period_end_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'wrWrkInst'">
                wr_wrk_inst <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'systemTitle'">
                system_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhAccountNumberPrint'">
                rh_account_number_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhNamePrint'">
                rh_name_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhAccountNumberDigital'">
                rh_account_number_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhNameDigital'">
                rh_name_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usagePeriod'">
                scd.period_end_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageAgeWeight'">
                usage_age_weight <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailLicenseeClassId'">
                scd.detail_licensee_class_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailLicenseeClassName'">
                dlc.description <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'aggregateLicenseeClassId'">
                alc.aggregate_licensee_class_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'aggregateLicenseeClassName'">
                alc.description <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'surveyCountry'">
                survey_country <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedTypeOfUse'">
                reported_type_of_use <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'numberOfCopies'">
                usage_quantity <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'weightedCopies'">
                weighted_copies <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'publicationType'">
                pt.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'pubTypeWeight'">
                pub_type_weight <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'price'">
                price <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'priceFlag'">
                price_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'content'">
                content <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentFlag'">
                content_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentUnitPrice'">
                content_unit_price <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentUnitPriceFlag'">
                content_unit_price_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'valueSharePrint'">
                value_share_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'volumeSharePrint'">
                volume_share_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailSharePrint'">
                detail_share_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'netAmountPrint'">
                net_amount_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'valueShareDigital'">
                value_share_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'volumeShareDigital'">
                volume_share_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailShareDigital'">
                detail_share_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'netAmountDigital'">
                net_amount_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'combinedNetAmount'">
                combined_net_amount <include refid="IUsageMapper.direction"/>
            </when>
        </choose>
    </sql>

    <insert id="insert" parameterType="AclScenario">
        insert into ${schema}.df_acl_scenario (
            df_acl_scenario_uid,
            df_acl_usage_batch_uid,
            df_acl_fund_pool_uid,
            df_acl_grant_set_uid,
            name,
            status_ind,
            description,
            is_editable,
            period_end_date,
            license_type,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            #{id},
            #{usageBatchId},
            #{fundPoolId},
            #{grantSetId},
            #{name},
            #{status},
            #{description},
            #{editableFlag},
            #{periodEndDate},
            #{licenseType},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <insert id="insertAclScenarioUsageAgeWeight" parameterType="map">
        insert into ${schema}.df_acl_scenario_usage_age_weight (
            df_acl_scenario_usage_age_weight_uid,
            df_acl_scenario_uid,
            period_prior,
            weight,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            uuid_generate_v4(),
            #{scenarioId},
            #{usageAge.period},
            #{usageAge.weight},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <insert id="insertAclScenarioLicenseeClass" parameterType="map">
        insert into ${schema}.df_acl_scenario_licensee_class (
            df_acl_scenario_licensee_class_uid,
            df_acl_scenario_uid,
            detail_licensee_class_id,
            aggregate_licensee_class_id,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            uuid_generate_v4(),
            #{scenarioId},
            #{licenseeClass.id},
            #{licenseeClass.aggregateLicenseeClass.id},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <insert id="insertAclScenarioPubTypeWeight" parameterType="map">
        insert into ${schema}.df_acl_scenario_pub_type_weight (
            df_acl_scenario_pub_type_weight_uid,
            df_acl_scenario_uid,
            df_publication_type_uid,
            weight,
            period,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            uuid_generate_v4(),
            #{scenarioId},
            #{publicationType.id},
            #{publicationType.weight},
            #{publicationType.period},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <select id="findAll" resultMap="aclScenarioResultMap">
        select
            df_acl_scenario_uid,
            df_acl_usage_batch_uid,
            df_acl_fund_pool_uid,
            df_acl_grant_set_uid,
            name,
            description,
            status_ind,
            is_editable,
            period_end_date,
            license_type,
            <include refid="StoredEntityMapper.additionalColumns"/>
        from ${schema}.df_acl_scenario
        order by updated_datetime desc
    </select>

    <select id="findScenarioById" resultMap="aclScenarioResultMap" parameterType="string">
        select
            <include refid="aclScenarioColumns"/>
        from ${schema}.df_acl_scenario s
        join ${schema}.df_acl_scenario_usage_age_weight sua on s.df_acl_scenario_uid = sua.df_acl_scenario_uid
        join ${schema}.df_acl_scenario_pub_type_weight spt on s.df_acl_scenario_uid = spt.df_acl_scenario_uid
        join ${schema}.df_acl_scenario_licensee_class slc on s.df_acl_scenario_uid = slc.df_acl_scenario_uid
        where s.df_acl_scenario_uid = #{scenarioId}
        order by updated_datetime desc
    </select>

    <select id="findCountByName" parameterType="string" resultType="int">
        select count(name)
        from ${schema}.df_acl_scenario
        where upper(name) = upper(#{name})
    </select>

    <select id="findScenarioNamesByFundPoolId" parameterType="string" resultType="string">
        select name
        from ${schema}.df_acl_scenario
        where df_acl_fund_pool_uid = #{fundPoolId}
    </select>

    <select id="findScenarioNamesByGrantSetId" parameterType="string" resultType="string">
        select name
        from ${schema}.df_acl_scenario
        where df_acl_grant_set_uid = #{grantSetId}
    </select>
</mapper>
