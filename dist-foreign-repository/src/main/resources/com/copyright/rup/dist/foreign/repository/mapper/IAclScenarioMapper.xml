<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IAclScenarioMapper">

    <resultMap id="aclScenarioResultMap" type="AclScenario" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_scenario_uid"/>
        <result property="usageBatchId" column="df_acl_usage_batch_uid"/>
        <result property="fundPoolId" column="df_acl_fund_pool_uid"/>
        <result property="grantSetId" column="df_acl_grant_set_uid"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="status" column="status_ind"/>
        <result property="editableFlag" column="is_editable"/>
        <result property="periodEndDate" column="period_end_date"/>
        <result property="licenseType" column="license_type"/>
        <collection property="usageAges" javaType="java.util.List" ofType="com.copyright.rup.dist.foreign.domain.UsageAge">
            <result property="period" column="period_prior"/>
            <result property="weight" column="usage_weight"/>
        </collection>
        <collection property="publicationTypes" javaType="java.util.List" ofType="com.copyright.rup.dist.foreign.domain.AclPublicationType">
            <result property="id" column="df_publication_type_uid"/>
            <result property="weight" column="pub_type_weight"/>
            <result property="period" column="pub_type_period"/>
        </collection>
        <collection property="detailLicenseeClasses" javaType="java.util.List" ofType="com.copyright.rup.dist.foreign.domain.DetailLicenseeClass">
            <result property="id" column="detail_licensee_class_id"/>
            <result property="aggregateLicenseeClass.id" column="aggregate_licensee_class_id"/>
        </collection>
    </resultMap>

    <resultMap id="aclScenarioDtoResultMap" type="AclScenarioDto" extends="aclScenarioResultMap">
        <result property="grossTotal" column="gross_total"/>
        <result property="grossTotalPrint" column="gross_total_print"/>
        <result property="grossTotalDigital" column="gross_total_digital"/>
        <result property="serviceFeeTotal" column="service_fee_total"/>
        <result property="serviceFeeTotalPrint" column="service_fee_total_print"/>
        <result property="serviceFeeTotalDigital" column="service_fee_total_digital"/>
        <result property="netTotal" column="net_total"/>
        <result property="netTotalPrint" column="net_total_print"/>
        <result property="netTotalDigital" column="net_total_digital"/>
        <result property="numberOfRhsPrint" column="number_of_rhs_print"/>
        <result property="numberOfRhsDigital" column="number_of_rhs_digital"/>
        <result property="numberOfWorksPrint" column="number_of_works_print"/>
        <result property="numberOfWorksDigital" column="number_of_works_digital"/>
        <association property="auditItem" resultMap="IScenarioAuditMapper.scenarioAuditItemResultMap" columnPrefix="action_"/>
    </resultMap>

    <resultMap id="aclScenarioDetailDtoResultMap" type="AclScenarioDetailDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_scenario_detail_uid"/>
        <result property="originalDetailId" column="original_detail_id"/>
        <result property="productFamily" column="product_family"/>
        <result property="usageBatchName" column="usage_batch_name"/>
        <result property="periodEndPeriod" column="period_end_date"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="rhAccountNumberPrint" column="rh_account_number_print"/>
        <result property="rhNamePrint" column="rh_name_print"/>
        <result property="rhAccountNumberDigital" column="rh_account_number_digital"/>
        <result property="rhNameDigital" column="rh_name_digital"/>
        <result property="usagePeriod" column="usage_period"/>
        <result property="usageAgeWeight" column="usage_age_weight"/>
        <result property="detailLicenseeClassId" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClassName" column="detail_licensee_class_name"/>
        <result property="aggregateLicenseeClassId" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClassName" column="aggregate_licensee_class_name"/>
        <result property="surveyCountry" column="survey_country"/>
        <result property="reportedTypeOfUse" column="reported_type_of_use"/>
        <result property="numberOfCopies" column="number_of_copies"/>
        <result property="weightedCopies" column="weighted_copies"/>
        <result property="publicationType.id" column="publication_type_uid"/>
        <result property="publicationType.name" column="pub_type_name"/>
        <result property="publicationType.weight" column="pub_type_weight"/>
        <result property="price" column="price"/>
        <result property="priceFlag" column="price_flag"/>
        <result property="content" column="content"/>
        <result property="contentFlag" column="content_flag"/>
        <result property="contentUnitPrice" column="content_unit_price"/>
        <result property="contentUnitPriceFlag" column="content_unit_price_flag"/>
        <result property="valueSharePrint" column="value_share_print"/>
        <result property="volumeSharePrint" column="volume_share_print"/>
        <result property="detailSharePrint" column="detail_share_print"/>
        <result property="netAmountPrint" column="net_amount_print"/>
        <result property="valueShareDigital" column="value_share_digital"/>
        <result property="volumeShareDigital" column="volume_share_digital"/>
        <result property="detailShareDigital" column="detail_share_digital"/>
        <result property="netAmountDigital" column="net_amount_digital"/>
        <result property="combinedNetAmount" column="combined_net_amount"/>
    </resultMap>

    <sql id="fullScenarioInformation">
        s.df_acl_scenario_uid,
        s.df_acl_usage_batch_uid,
        s.df_acl_fund_pool_uid,
        s.df_acl_grant_set_uid,
        s.name,
        s.description,
        s.status_ind,
        s.is_editable,
        s.period_end_date,
        s.license_type,
        coalesce(sum(gross_total), 0) gross_total,
        coalesce(sum(service_fee_total), 0) service_fee_total,
        coalesce(sum(net_total), 0) net_total,
        sum(case when type_of_use = 'PRINT' then gross_total else 0 end) gross_total_print,
        sum(case when type_of_use = 'PRINT' then service_fee_total else 0 end) service_fee_total_print,
        sum(case when type_of_use = 'PRINT' then net_total else 0 end) net_total_print,
        sum(case when type_of_use = 'PRINT' then number_of_rhs else 0 end) number_of_rhs_print,
        sum(case when type_of_use = 'PRINT' then number_of_works else 0 end) number_of_works_print,
        sum(case when type_of_use = 'DIGITAL' then gross_total else 0 end) gross_total_digital,
        sum(case when type_of_use = 'DIGITAL' then service_fee_total else 0 end) service_fee_total_digital,
        sum(case when type_of_use = 'DIGITAL' then net_total else 0 end) net_total_digital,
        sum(case when type_of_use = 'DIGITAL' then number_of_rhs else 0 end) number_of_rhs_digital,
        sum(case when type_of_use = 'DIGITAL' then number_of_works else 0 end) number_of_works_digital,
        sa.df_acl_scenario_audit_uid action_df_scenario_audit_uid,
        sa.df_acl_scenario_uid action_df_scenario_uid,
        sa.action_type_ind action_action_type_ind,
        sa.action_reason action_action_reason,
        sa.created_datetime action_created_datetime,
        sa.updated_datetime action_updated_datetime,
        sa.created_by_user action_created_by_user,
        sa.updated_by_user action_updated_by_user,
        s.record_version action_record_version,
        s.created_datetime created_datetime,
        s.updated_datetime updated_datetime,
        s.created_by_user created_by_user,
        s.updated_by_user updated_by_user,
        s.record_version record_version
    </sql>

    <sql id="aclScenarioColumns">
        s.df_acl_scenario_uid,
        df_acl_usage_batch_uid,
        df_acl_fund_pool_uid,
        df_acl_grant_set_uid,
        name,
        description,
        status_ind,
        is_editable,
        period_end_date,
        license_type,
        sua.period_prior,
        sua.weight usage_weight,
        spt.df_publication_type_uid,
        spt.weight pub_type_weight,
        spt.period pub_type_period,
        slc.detail_licensee_class_id,
        slc.aggregate_licensee_class_id,
        s.created_datetime,
        s.updated_datetime,
        s.updated_by_user,
        s.created_by_user
    </sql>

    <sql id="selectScenarioDetailDtosSql">
        select
            scd.df_acl_scenario_detail_uid,
            original_detail_id,
            'ACL' product_family,
            ub.name usage_batch_name,
            s.period_end_date,
            wr_wrk_inst,
            system_title,
            print_details.rh_account_number rh_account_number_print,
            print_details.rh_name rh_name_print,
            digital_details.rh_account_number rh_account_number_digital,
            digital_details.rh_name rh_name_digital,
            scd.period_end_date usage_period,
            usage_age_weight,
            scd.detail_licensee_class_id,
            dlc.description detail_licensee_class_name,
            alc.aggregate_licensee_class_id,
            alc.description aggregate_licensee_class_name,
            survey_country,
            reported_type_of_use,
            usage_quantity number_of_copies,
            weighted_copies,
            scd.publication_type_uid,
            pt.name pub_type_name,
            pub_type_weight,
            price,
            price_flag,
            content,
            content_flag,
            content_unit_price,
            content_unit_price_flag,
            print_details.value_share value_share_print,
            print_details.volume_share volume_share_print,
            print_details.detail_share detail_share_print,
            coalesce(print_details.net_amount, 0) net_amount_print,
            digital_details.value_share value_share_digital,
            digital_details.volume_share volume_share_digital,
            digital_details.detail_share detail_share_digital,
            coalesce(digital_details.net_amount, 0) net_amount_digital,
            coalesce(print_details.net_amount,0) + coalesce(digital_details.net_amount, 0) combined_net_amount
        from ${schema}.df_acl_scenario s
        join ${schema}.df_acl_usage_batch ub on s.df_acl_usage_batch_uid = ub.df_acl_usage_batch_uid
        join ${schema}.df_acl_scenario_detail scd on s.df_acl_scenario_uid = scd.df_acl_scenario_uid
        left join (
            <include refid="IAclScenarioMapper.selectPrintShareDetailsSql"/>
        ) as print_details on scd.df_acl_scenario_detail_uid = print_details.df_acl_scenario_detail_uid
        left join (
            <include refid="IAclScenarioMapper.selectDigitalShareDetailsSql"/>
        ) as digital_details on scd.df_acl_scenario_detail_uid = digital_details.df_acl_scenario_detail_uid
        join ${schema}.df_publication_type pt on scd.publication_type_uid = pt.df_publication_type_uid
        join ${schema}.df_detail_licensee_class dlc on scd.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_acl_scenario_licensee_class slc on dlc.detail_licensee_class_id = slc.detail_licensee_class_id
            and slc.df_acl_scenario_uid = #{scenarioId}
        join ${schema}.df_aggregate_licensee_class alc on slc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
    </sql>

    <sql id="selectScenarioDetailDtosCountSql">
        select count(1)
        from ${schema}.df_acl_scenario s
        join ${schema}.df_acl_usage_batch ub on s.df_acl_usage_batch_uid = ub.df_acl_usage_batch_uid
        join ${schema}.df_acl_scenario_detail scd on s.df_acl_scenario_uid = scd.df_acl_scenario_uid
        left join (
            <include refid="IAclScenarioMapper.selectPrintShareDetailsSql"/>
        ) as print_details on scd.df_acl_scenario_detail_uid = print_details.df_acl_scenario_detail_uid
        left join (
            <include refid="IAclScenarioMapper.selectDigitalShareDetailsSql"/>
        ) as digital_details on scd.df_acl_scenario_detail_uid = digital_details.df_acl_scenario_detail_uid
        join ${schema}.df_publication_type pt on scd.publication_type_uid = pt.df_publication_type_uid
        join ${schema}.df_detail_licensee_class dlc on scd.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_acl_scenario_licensee_class slc on dlc.detail_licensee_class_id = slc.detail_licensee_class_id
            and slc.df_acl_scenario_uid = #{scenarioId}
        join ${schema}.df_aggregate_licensee_class alc on slc.aggregate_licensee_class_id = alc.aggregate_licensee_class_id
    </sql>

    <sql id="selectPrintShareDetailsSql">
        select
            <include refid="IAclScenarioMapper.shareDetailColumns"/>
        from ${schema}.df_acl_share_detail shd
        left join ${schema}.df_rightsholder r on shd.rh_account_number = r.rh_account_number
        where df_acl_scenario_uid = #{scenarioId}
            and type_of_use = 'PRINT'
        <if test="null != accountNumber">
            and shd.rh_account_number = #{accountNumber}
        </if>
    </sql>

    <sql id="selectDigitalShareDetailsSql">
        select
            <include refid="IAclScenarioMapper.shareDetailColumns"/>
        from ${schema}.df_acl_share_detail shd
        left join ${schema}.df_rightsholder r on shd.rh_account_number = r.rh_account_number
        where df_acl_scenario_uid = #{scenarioId}
            and type_of_use = 'DIGITAL'
        <if test="null != accountNumber">
            and shd.rh_account_number = #{accountNumber}
        </if>
    </sql>

    <sql id="shareDetailColumns">
        df_acl_scenario_detail_uid,
        shd.rh_account_number,
        r.name rh_name,
        value_share,
        volume_share,
        detail_share,
        net_amount
    </sql>

    <sql id="drillDownSearchWhereClause">
        (original_detail_id ilike '%' || #{searchValue} || '%' or
        cast(scd.wr_wrk_inst as text) like '%' || #{searchValue} || '%' or
        system_title ilike '%' || #{searchValue} || '%' or
        cast(print_details.rh_account_number as text) like '%' || #{searchValue} || '%' or
        print_details.rh_name ilike '%' || #{searchValue} || '%' or
        cast(digital_details.rh_account_number as text) like '%' || #{searchValue} || '%' or
        digital_details.rh_name ilike '%' || #{searchValue} || '%')
    </sql>

    <sql id="ifSortable">
        order by
        <choose>
            <when test="null != sort">
                <include refid="IAclScenarioMapper.chooseSortProperty">
                    <property name="detail_uid" value="scd.df_acl_scenario_detail_uid"/>
                </include>
            </when>
            <otherwise>
                scd.updated_datetime desc
            </otherwise>
        </choose>,
        scd.df_acl_scenario_detail_uid
    </sql>

    <sql id="chooseSortProperty">
        <choose>
            <when test="sort.property == 'detailId'">
                ${detail_uid} <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageDetailId'">
                original_detail_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'productFamily'">
                product_family <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageBatchName'">
                ub.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'periodEndDate'">
                s.period_end_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'wrWrkInst'">
                wr_wrk_inst <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'systemTitle'">
                system_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhAccountNumberPrint'">
                rh_account_number_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhNamePrint'">
                rh_name_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhAccountNumberDigital'">
                rh_account_number_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhNameDigital'">
                rh_name_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usagePeriod'">
                scd.period_end_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageAgeWeight'">
                usage_age_weight <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailLicenseeClassId'">
                scd.detail_licensee_class_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailLicenseeClassName'">
                dlc.description <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'aggregateLicenseeClassId'">
                alc.aggregate_licensee_class_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'aggregateLicenseeClassName'">
                alc.description <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'surveyCountry'">
                survey_country <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedTypeOfUse'">
                reported_type_of_use <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'numberOfCopies'">
                usage_quantity <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'weightedCopies'">
                weighted_copies <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'publicationType'">
                pt.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'pubTypeWeight'">
                pub_type_weight <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'price'">
                price <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'priceFlag'">
                price_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'content'">
                content <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentFlag'">
                content_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentUnitPrice'">
                content_unit_price <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentUnitPriceFlag'">
                content_unit_price_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'valueSharePrint'">
                value_share_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'volumeSharePrint'">
                volume_share_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailSharePrint'">
                detail_share_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'netAmountPrint'">
                net_amount_print <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'valueShareDigital'">
                value_share_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'volumeShareDigital'">
                volume_share_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailShareDigital'">
                detail_share_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'netAmountDigital'">
                net_amount_digital <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'combinedNetAmount'">
                combined_net_amount <include refid="IUsageMapper.direction"/>
            </when>
        </choose>
    </sql>

    <sql id="selectDtosByScenarioIdSql">
        <include refid="IAclScenarioMapper.selectScenarioDetailDtosSql"/>
        where s.df_acl_scenario_uid = #{scenarioId}
        order by scd.df_acl_scenario_detail_uid
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="selectDtosCountByScenarioIdSql">
        <include refid="IAclScenarioMapper.selectScenarioDetailDtosCountSql"/>
        where s.df_acl_scenario_uid = #{scenarioId}
    </sql>

    <insert id="insert" parameterType="AclScenario">
        insert into ${schema}.df_acl_scenario (
            df_acl_scenario_uid,
            df_acl_usage_batch_uid,
            df_acl_fund_pool_uid,
            df_acl_grant_set_uid,
            name,
            status_ind,
            description,
            is_editable,
            period_end_date,
            license_type,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            #{id},
            #{usageBatchId},
            #{fundPoolId},
            #{grantSetId},
            #{name},
            #{status},
            #{description},
            #{editableFlag},
            #{periodEndDate},
            #{licenseType},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <insert id="insertAclScenarioUsageAgeWeight" parameterType="map">
        insert into ${schema}.df_acl_scenario_usage_age_weight (
            df_acl_scenario_usage_age_weight_uid,
            df_acl_scenario_uid,
            period_prior,
            weight,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            uuid_generate_v4(),
            #{scenarioId},
            #{usageAge.period},
            #{usageAge.weight},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <insert id="insertAclScenarioLicenseeClass" parameterType="map">
        insert into ${schema}.df_acl_scenario_licensee_class (
            df_acl_scenario_licensee_class_uid,
            df_acl_scenario_uid,
            detail_licensee_class_id,
            aggregate_licensee_class_id,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            uuid_generate_v4(),
            #{scenarioId},
            #{licenseeClass.id},
            #{licenseeClass.aggregateLicenseeClass.id},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <insert id="insertAclScenarioPubTypeWeight" parameterType="map">
        insert into ${schema}.df_acl_scenario_pub_type_weight (
            df_acl_scenario_pub_type_weight_uid,
            df_acl_scenario_uid,
            df_publication_type_uid,
            weight,
            period,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            uuid_generate_v4(),
            #{scenarioId},
            #{publicationType.id},
            #{publicationType.weight},
            #{publicationType.period},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <select id="findAll" resultMap="aclScenarioResultMap">
        select
            df_acl_scenario_uid,
            df_acl_usage_batch_uid,
            df_acl_fund_pool_uid,
            df_acl_grant_set_uid,
            name,
            description,
            status_ind,
            is_editable,
            period_end_date,
            license_type,
            <include refid="StoredEntityMapper.additionalColumns"/>
        from ${schema}.df_acl_scenario
        order by updated_datetime desc
    </select>

    <select id="findScenarioById" resultMap="aclScenarioResultMap" parameterType="string">
        select
            <include refid="aclScenarioColumns"/>
        from ${schema}.df_acl_scenario s
        join ${schema}.df_acl_scenario_usage_age_weight sua on s.df_acl_scenario_uid = sua.df_acl_scenario_uid
        join ${schema}.df_acl_scenario_pub_type_weight spt on s.df_acl_scenario_uid = spt.df_acl_scenario_uid
        join ${schema}.df_acl_scenario_licensee_class slc on s.df_acl_scenario_uid = slc.df_acl_scenario_uid
        where s.df_acl_scenario_uid = #{scenarioId}
        order by updated_datetime desc
    </select>

    <select id="findCountByName" parameterType="string" resultType="int">
        select count(name)
        from ${schema}.df_acl_scenario
        where upper(name) = upper(#{name})
    </select>

    <select id="findWithAmountsAndLastAction" parameterType="string" resultMap="aclScenarioDtoResultMap">
        select
            <include refid="fullScenarioInformation"/>
        from (
            select 
                df_acl_scenario_uid,
                sum(gross_amount) as gross_total,
                sum(service_fee_amount) as service_fee_total,
                sum(net_amount) as net_total,
                count(distinct rh_account_number) number_of_rhs,
                count(distinct wr_wrk_inst) number_of_works,
                type_of_use
                from (
                    select        
                        s1.df_acl_scenario_uid,
                        shd.gross_amount,
                        shd.service_fee_amount,
                        shd.net_amount,
                        shd.type_of_use,
                        shd.rh_account_number,
                        scd.wr_wrk_inst           
                    from ${schema}.df_acl_scenario s1
                    left join ${schema}.df_acl_share_detail shd on shd.df_acl_scenario_uid = s1.df_acl_scenario_uid
                    left join ${schema}.df_acl_scenario_detail scd on scd.df_acl_scenario_detail_uid = shd.df_acl_scenario_detail_uid
                    where s1.df_acl_scenario_uid = #{scenarioId}
                ) as values
                group by df_acl_scenario_uid, type_of_use
            ) as groups    
        join ${schema}.df_acl_scenario s on s.df_acl_scenario_uid = groups.df_acl_scenario_uid
        left join ${schema}.df_acl_scenario_audit sa on sa.df_acl_scenario_uid = s.df_acl_scenario_uid
            and sa.created_datetime = (
                select
                    max(created_datetime)
                from ${schema}.df_acl_scenario_audit
                where df_acl_scenario_uid = s.df_acl_scenario_uid)
        group by s.df_acl_scenario_uid, sa.df_acl_scenario_audit_uid
    </select>

    <select id="findByScenarioIdAndRhAccountNumber" parameterType="map" resultMap="aclScenarioDetailDtoResultMap">
        <include refid="IAclScenarioMapper.selectScenarioDetailDtosSql"/>
        where s.df_acl_scenario_uid = #{scenarioId}
            and (print_details.rh_account_number = #{accountNumber} or digital_details.rh_account_number = #{accountNumber})
        <if test="null != searchValue">
            and <include refid="IAclScenarioMapper.drillDownSearchWhereClause"/>
        </if>
        <include refid="IAclScenarioMapper.ifSortable"/>
        <include refid="IUsageMapper.ifPageable"/>
    </select>

    <select id="findCountByScenarioIdAndRhAccountNumber" parameterType="map" resultType="int">
        <include refid="IAclScenarioMapper.selectScenarioDetailDtosCountSql"/>
        where s.df_acl_scenario_uid = #{scenarioId}
            and (print_details.rh_account_number = #{accountNumber} or digital_details.rh_account_number = #{accountNumber})
        <if test="null != searchValue">
            and <include refid="IAclScenarioMapper.drillDownSearchWhereClause"/>
        </if>
    </select>

    <select id="findScenarioNamesByFundPoolId" parameterType="string" resultType="string">
        select name
        from ${schema}.df_acl_scenario
        where df_acl_fund_pool_uid = #{fundPoolId}
    </select>

    <select id="findScenarioNamesByGrantSetId" parameterType="string" resultType="string">
        select name
        from ${schema}.df_acl_scenario
        where df_acl_grant_set_uid = #{grantSetId}
    </select>
</mapper>
