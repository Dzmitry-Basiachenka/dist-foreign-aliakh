<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IReportMapper">

    <resultMap id="undistributedLiabilitiesReportDtoResultMap" type="UndistributedLiabilitiesReportDto">
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="grossAmount" column="usages_gross_amount"/>
        <result property="estimatedServiceFeeAmount" column="estimated_service_fee_amount"/>
        <result property="estimatedNetAmount" column="estimated_net_amount"/>
        <result property="estimatedServiceFee" column="estimated_service_fee"/>
        <result property="withdrawnGrossAmount" column="withdrawn_gross_amount"/>
    </resultMap>

    <resultMap id="serviceFeeTrueUpReportDtoResultMap" type="ServiceFeeTrueUpReportDto">
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="grossAmountSentToLm" column="gross_amount_sent_to_lm"/>
        <result property="serviceFeeAmountSentToLm" column="service_fee_amount_sent_to_lm"/>
        <result property="serviceFeeSentToLm" column="service_fee_sent_to_lm"/>
        <result property="netAmountSentToLm" column="net_amount_sent_to_lm"/>
        <result property="estimatedServiceFeeAmountSentToLm" column="estimated_service_fee_amount_sent_to_lm"/>
        <result property="estimatedServiceFee" column="estimated_service_fee"/>
        <result property="serviceFeeTrueUp" column="service_fee_true_up"/>
        <result property="grossAmountReturnToCla" column="gross_amount_return_to_cla"/>
        <result property="estimatedServiceFeeAmountReturnToCla" column="estimated_service_fee_amount_return_to_cla"/>
        <result property="serviceFeeAmountReturnToCla" column="service_fee_amount_return_to_cla"/>
        <result property="netAmountReturnToCla" column="net_amount_return_to_cla"/>
        <result property="serviceFeeTrueUpReturnToCla" column="service_fee_true_up_return_to_cla"/>
    </resultMap>

    <resultMap id="researchStatusReportDtoResultMap" type="ResearchStatusReportDto">
        <result property="batchName" column="batch_name"/>
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="workNotFoundDetailsCount" column="work_not_found_details_count"/>
        <result property="workNotFoundGrossAmount" column="work_not_found_gross_amount"/>
        <result property="workResearchDetailsCount" column="work_research_details_count"/>
        <result property="workResearchGrossAmount" column="work_research_gross_amount"/>
        <result property="sendForRaDetailsCount" column="send_for_ra_details_count"/>
        <result property="sendForRaGrossAmount" column="send_for_ra_gross_amount"/>
        <result property="rhNotFoundDetailsCount" column="rh_not_found_details_count"/>
        <result property="rhNotFoundGrossAmount" column="rh_not_found_gross_amount"/>
    </resultMap>

    <resultMap id="summaryMarketReportDtoResultMap" type="SummaryMarketReportDto">
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="batchName" column="batch_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="market" column="market"/>
        <result property="marketTotalAmount" column="market_total_amount"/>
        <result property="totalPaymentAmount" column="total_payment_amount"/>
    </resultMap>

    <resultMap id="fasBatchSummaryReportDtoResultMap" type="FasBatchSummaryReportDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="batchName" column="batch_name"/>
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="nonEligibleDetailsCount" column="non_eligible_details_count"/>
        <result property="nonEligibleDetailsGrossAmount" column="non_eligible_details_gross_amount"/>
        <result property="ntsDetailsCount" column="nts_details_count"/>
        <result property="ntsDetailsGrossAmount" column="nts_details_gross_amount"/>
        <result property="fasAndClaFasEligibleDetailsCount" column="fas_and_cla_fas_eligible_details_count"/>
        <result property="fasAndClaFasEligibleDetailsGrossAmount" column="fas_and_cla_fas_eligible_details_gross_amount"/>
        <result property="scenariosDetailsCount" column="scenarios_details_count"/>
        <result property="scenariosDetailsGrossAmount" column="scenarios_details_gross_amount"/>
        <result property="scenariosDetailsNetAmount" column="scenarios_details_net_amount"/>
        <result property="returnToClaDetailsCount" column="return_to_cla_details_count"/>
        <result property="returnToClaDetailsGrossAmount" column="return_to_cla_details_gross_amount"/>
    </resultMap>

    <resultMap id="ntsWithdrawnBatchSummaryReportDtoResultMap" type="NtsWithDrawnBatchSummaryReportDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="batchName" column="batch_name"/>
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="batchGrossAmount" column="gross_amount"/>
        <result property="ntsDetailsCount" column="nts_details_count"/>
        <result property="ntsDetailsGrossAmount" column="nts_details_gross_amount"/>
    </resultMap>

    <resultMap id="workSharesByAggLcClassReportDtoResultMap" type="WorkSharesByAggLcClassReportDto">
        <result property="aggregateLicenseeClass.id" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClass.discipline" column="aggregate_licensee_discipline"/>
        <result property="aggregateLicenseeClass.enrollmentProfile" column="aggregate_licensee_enrollment"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="workTitle" column="title"/>
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="rightsholder.name" column="rh_name"/>
        <result property="volumeShare" column="volume_share"/>
        <result property="valueShare" column="value_share"/>
        <result property="totalShare" column="total_share"/>
        <result property="netAmount" column="net_amount"/>
    </resultMap>

    <resultMap id="aaclUndistributedLiabilitiesReportResultMap" type="FundPool" extends="IFundPoolMapper.fundPoolResultMap">
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="netAmount" column="net_amount"/>
    </resultMap>

    <resultMap id="aaclBaselineUsageDtoMap" type="UsageDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="aaclUsage.baselineId" column="baseline_uid"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="aaclUsage.usageAge.period" column="usage_period"/>
        <result property="aaclUsage.usageSource" column="usage_source"/>
        <result property="numberOfCopies" column="number_of_copies"/>
        <result property="aaclUsage.numberOfPages" column="number_of_pages"/>
        <result property="aaclUsage.detailLicenseeClass.id" column="detail_licensee_class_id"/>
        <result property="aaclUsage.detailLicenseeClass.enrollmentProfile" column="detail_licensee_enrollment"/>
        <result property="aaclUsage.detailLicenseeClass.discipline" column="detail_licensee_discipline"/>
        <result property="aaclUsage.publicationType.name" column="pub_type_name"/>
        <result property="aaclUsage.publicationType.weight" column="publication_type_weight"/>
        <result property="aaclUsage.originalPublicationType" column="original_publication_type"/>
        <result property="aaclUsage.institution" column="institution"/>
        <result property="comment" column="comment"/>
    </resultMap>

    <sql id="workSharesByAggLcClassSummaryFromWhereClauses">
        from ${schema}.df_scenario s
        join ${schema}.${usage_table} u on s.df_scenario_uid = u.df_scenario_uid
        join ${schema}.df_usage_aacl uaacl on u.${usage_uid_column} = uaacl.df_usage_aacl_uid
        join jsonb_array_elements(s.aacl_fields -> 'detailLicenseeClasses') detailLicenseeClasses
            on (detailLicenseeClasses ->> 'detailLicenseeClassId')::int = uaacl.detail_licensee_class_id
        join ${schema}.df_aggregate_licensee_class alc
            on (detailLicenseeClasses ->> 'aggregateLicenseeClassId')::int = alc.aggregate_licensee_class_id
        where u.df_scenario_uid = #{scenarioId}
        group by alc.aggregate_licensee_class_id, aggregate_licensee_discipline, aggregate_licensee_enrollment
        order by alc.aggregate_licensee_class_id
    </sql>

    <sql id="workSharesByAggLcClassFromWhereClauses">
        from ${schema}.df_scenario s
        join ${schema}.${usage_table} u on s.df_scenario_uid = u.df_scenario_uid
        join ${schema}.df_usage_aacl uaacl on u.${usage_uid_column} = uaacl.df_usage_aacl_uid
        join jsonb_array_elements(s.aacl_fields -> 'detailLicenseeClasses') detailLicenseeClasses
            on (detailLicenseeClasses ->> 'detailLicenseeClassId')::int = uaacl.detail_licensee_class_id
        join ${schema}.df_aggregate_licensee_class alc
            on (detailLicenseeClasses ->> 'aggregateLicenseeClassId')::int = alc.aggregate_licensee_class_id
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        where u.df_scenario_uid = #{scenarioId}
        group by alc.aggregate_licensee_class_id, aggregate_licensee_discipline, aggregate_licensee_enrollment,
            wr_wrk_inst, system_title, rh.rh_account_number, rh.name
        order by alc.aggregate_licensee_class_id
    </sql>

    <select id="findUndistributedLiabilitiesReportDtos" parameterType="map" resultMap="undistributedLiabilitiesReportDtoResultMap">
        select
            reportInfo.rro_account_number,
            rh.name rro_name,
            reportInfo.payment_date,
            reportInfo.usages_gross_amount,
            reportInfo.usages_gross_amount * reportInfo.estimated_service_fee estimated_service_fee_amount,
            reportInfo.usages_gross_amount - (reportInfo.usages_gross_amount * reportInfo.estimated_service_fee) estimated_net_amount,
            reportInfo.estimated_service_fee,
            reportInfo.withdrawn_gross_amount
        from (
            select
                batch.rro_account_number,
                batch.payment_date,
                coalesce(sum(u.gross_amount), 0) usages_gross_amount,
                coalesce(fee.estimated_service_fee, #{defaultEstimatedServiceFee}) estimated_service_fee,
                coalesce(sum(u.withdrawn_gross_amount), 0) withdrawn_gross_amount
            from ${schema}.df_usage_batch batch
            left join ${schema}.df_rro_estimated_service_fee_percentage fee on fee.rro_account_number = batch.rro_account_number
            left join (
                select
                df_usage_batch_uid,
                gross_amount,
                case when status_ind in
                    <foreach collection="withdrawnStatuses" item="withdrawnStatus" separator="," open="(" close=")">
                        #{withdrawnStatus}
                    </foreach>
                then gross_amount else 0 end withdrawn_gross_amount
            from ${schema}.df_usage) u on u.df_usage_batch_uid = batch.df_usage_batch_uid
            where <![CDATA[batch.payment_date <= #{paymentDate}]]>
                and batch.product_family in
                    <foreach collection="productFamilies" item="productFamily" separator="," open="(" close=")">
                        #{productFamily}
                    </foreach>
            group by payment_date, batch.rro_account_number, fee.estimated_service_fee
        ) as reportInfo
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = reportInfo.rro_account_number
        where reportInfo.usages_gross_amount != 0
        order by reportInfo.rro_account_number, reportInfo.payment_date
    </select>

    <select id="findResearchStatusReportDtos" resultMap="researchStatusReportDtoResultMap">
        select
            batch_name,
            rro_account_number,
            rro_name,
            payment_date,
            work_not_found_details_count,
            work_not_found_gross_amount,
            work_research_details_count,
            work_research_gross_amount,
            send_for_ra_details_count,
            send_for_ra_gross_amount,
            rh_not_found_details_count,
            rh_not_found_gross_amount
        from ${schema}.v_research_status_report
    </select>

    <select id="findSummaryMarketReportDtos" parameterType="list" resultMap="summaryMarketReportDtoResultMap">
        select
            report.rro_account_number,
            rro.name rro_name,
            report.name batch_name,
            report.payment_date,
            report.market,
            sum(report.market_total_amount) market_total_amount,
            report.total_payment_amount
        from (
            select
                b.rro_account_number,
                b.name,
                b.payment_date,
                ufas.market,
                sum(u.gross_amount) market_total_amount,
                b.gross_amount total_payment_amount
            from ${schema}.df_usage u
            join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
            join ${schema}.df_usage_batch b on b.df_usage_batch_uid = u.df_usage_batch_uid
            where u.df_usage_batch_uid in
                <foreach collection="list" item="batchId" open="(" separator="," close=")">
                    #{batchId}
                </foreach>
            group by rro_account_number, b.name, b.payment_date, ufas.market, b.gross_amount
            union all
            select
                b.rro_account_number,
                b.name,
                b.payment_date,
                ufas.market,
                sum(ua.gross_amount) market_total_amount,
                b.gross_amount total_payment_amount
            from ${schema}.df_usage_archive ua
            join ${schema}.df_usage_fas ufas on ua.df_usage_archive_uid = ufas.df_usage_fas_uid
            join ${schema}.df_usage_batch b on b.df_usage_batch_uid = ua.df_usage_batch_uid
            where ua.df_usage_batch_uid in
                <foreach collection="list" item="batchId" open="(" separator="," close=")">
                    #{batchId}
                </foreach>
            group by rro_account_number, b.name, b.payment_date, ufas.market, b.gross_amount
        ) report
        left join ${schema}.df_rightsholder rro on rro.rh_account_number = report.rro_account_number
        group by report.rro_account_number, rro.name, report.name, report.payment_date, report.market, report.total_payment_amount
        order by report.payment_date desc, report.name
    </select>

    <select id="findFasBatchSummaryReportDtos" resultMap="fasBatchSummaryReportDtoResultMap">
        select
            batch_name,
            rro_account_number,
            rro_name,
            payment_date,
            gross_amount,
            non_eligible_details_count,
            non_eligible_details_gross_amount,
            nts_details_count,
            nts_details_gross_amount,
            fas_and_cla_fas_eligible_details_count,
            fas_and_cla_fas_eligible_details_gross_amount,
            scenarios_details_count,
            scenarios_details_gross_amount,
            scenarios_details_net_amount,
            return_to_cla_details_count,
            return_to_cla_details_gross_amount,
            created_datetime
        from ${schema}.v_fas_batch_summary_report
    </select>

    <select id="findNtsWithdrawnBatchSummaryReportDtos" resultMap="ntsWithdrawnBatchSummaryReportDtoResultMap">
        select
            batch_name,
            rro_account_number,
            rro_name,
            payment_date,
            gross_amount,
            nts_details_count,
            nts_details_gross_amount,
            created_datetime
        from ${schema}.v_nts_withdrawn_batch_summary_report
        order by batch_name
    </select>

    <select id="findServiceFeeTrueUpReportDtos" resultMap="serviceFeeTrueUpReportDtoResultMap">
        select
            nestedReport.rro_account_number,
            rh.name rro_name,
            nestedReport.payment_date,
            nestedReport.gross_amount_sent_to_lm,
            nestedReport.service_fee_amount_sent_to_lm,
            coalesce(nestedReport.service_fee_amount_sent_to_lm / nestedReport.gross_amount_sent_to_lm, 0) service_fee_sent_to_lm,
            nestedReport.net_amount_sent_to_lm,
            nestedReport.gross_amount_sent_to_lm * coalesce(fee.estimated_service_fee, #{defaultEstimatedServiceFee}) estimated_service_fee_amount_sent_to_lm,
            coalesce(fee.estimated_service_fee, #{defaultEstimatedServiceFee}) estimated_service_fee,
            nestedReport.gross_amount_sent_to_lm * coalesce(fee.estimated_service_fee, #{defaultEstimatedServiceFee}) - service_fee_amount_sent_to_lm service_fee_true_up,
            nestedReport.gross_amount_return_to_cla,
            nestedReport.gross_amount_return_to_cla * coalesce(fee.estimated_service_fee, #{defaultEstimatedServiceFee}) estimated_service_fee_amount_return_to_cla,
            nestedReport.service_fee_amount_return_to_cla,
            nestedReport.net_amount_return_to_cla,
            nestedReport.gross_amount_return_to_cla * coalesce(fee.estimated_service_fee, #{defaultEstimatedServiceFee}) - nestedReport.service_fee_amount_return_to_cla service_fee_true_up_return_to_cla
        from (
            select
                nestedReport2.rro_account_number,
                nestedReport2.payment_date,
                sum(nestedReport2.gross_amount_sent_to_lm) gross_amount_sent_to_lm,
                sum(nestedReport2.service_fee_amount_sent_to_lm) service_fee_amount_sent_to_lm,
                sum(nestedReport2.net_amount_sent_to_lm) net_amount_sent_to_lm,
                sum(nestedReport2.gross_amount_return_to_cla) gross_amount_return_to_cla,
                sum(nestedReport2.service_fee_amount_return_to_cla) service_fee_amount_return_to_cla,
                sum(nestedReport2.net_amount_return_to_cla) net_amount_return_to_cla
            from (
                select
                    ua.product_family,
                    ua.payee_account_number,
                    batch.rro_account_number,
                    batch.payment_date,
                    sum(ua.gross_amount) gross_amount_sent_to_lm,
                    sum(ua.service_fee_amount) service_fee_amount_sent_to_lm,
                    sum(ua.net_amount) net_amount_sent_to_lm,
                    case when (ua.product_family = #{productFamilyClaFas} and ua.payee_account_number = #{accountNumberClaFas}) then sum(ua.gross_amount) else 0 end gross_amount_return_to_cla,
                    case when (ua.product_family = #{productFamilyClaFas} and ua.payee_account_number = #{accountNumberClaFas}) then sum(ua.service_fee_amount) else 0 end service_fee_amount_return_to_cla,
                    case when (ua.product_family = #{productFamilyClaFas} and ua.payee_account_number = #{accountNumberClaFas}) then sum(ua.net_amount) else 0 end net_amount_return_to_cla
                from ${schema}.df_usage_batch batch
                join ${schema}.df_usage_archive ua on ua.df_usage_batch_uid = batch.df_usage_batch_uid and ua.status_ind = #{status}
                join ${schema}.df_scenario_audit sa on sa.df_scenario_uid = ua.df_scenario_uid
                    and sa.created_datetime::date between #{fromDate} and #{toDate}
                    and sa.action_type_ind = #{action}
                where <![CDATA[batch.payment_date <= #{paymentDateTo}]]>
                group by batch.payment_date, batch.rro_account_number, ua.product_family, ua.payee_account_number
            ) as nestedReport2
            group by nestedReport2.payment_date, nestedReport2.rro_account_number
        ) as nestedReport
        left join ${schema}.df_rro_estimated_service_fee_percentage fee on fee.rro_account_number = nestedReport.rro_account_number
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = nestedReport.rro_account_number
        order by nestedReport.payment_date, rh.rh_account_number
    </select>

    <select id="findOwnershipAdjustmentReportDtos" parameterType="map" resultMap="IRightsholderDiscrepancyMapper.rightsholderDiscrepancyResultMap">
        <include refid="IRightsholderDiscrepancyMapper.selectRightsholderDiscrepancies"/>
    </select>

    <select id="findScenarioUsageDtosCount" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage u
        where df_scenario_uid = #{scenarioId}
    </select>

    <select id="findArchivedScenarioUsageDtosCount" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage_archive ua
        where df_scenario_uid = #{scenarioId}
    </select>

    <select id="findAaclUndistributedLiabilitiesReportFundPools" parameterType="map"
            resultMap="aaclUndistributedLiabilitiesReportResultMap">
        select
            f.name,
            f.total_amount,
            f.total_amount * #{serviceFee} as service_fee_amount,
            f.total_amount - (f.total_amount * #{serviceFee}) as net_amount
        from apps.df_fund_pool f
        left join apps.df_scenario s on s.aacl_fields ->> 'fund_pool_uid' = f.df_fund_pool_uid
        where f.product_family = #{productFamily}
            and (s.status_ind is null or s.status_ind in
                <foreach collection="statuses" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>)
    </select>

    <select id="findWorkSharesByAggLcClassSummaryReportDtos" parameterType="map"
            resultMap="workSharesByAggLcClassReportDtoResultMap">
        select
            alc.aggregate_licensee_class_id,
            alc.discipline aggregate_licensee_discipline,
            alc.enrollment_profile aggregate_licensee_enrollment,
            sum(uaacl.total_share) total_share
        <choose>
            <when test="status in archivedStatuses">
                <include refid="workSharesByAggLcClassSummaryFromWhereClauses">
                    <property name="usage_table" value="df_usage_archive"/>
                    <property name="usage_uid_column" value="df_usage_archive_uid"/>
                </include>
            </when>
            <otherwise>
                <include refid="workSharesByAggLcClassSummaryFromWhereClauses">
                    <property name="usage_table" value="df_usage"/>
                    <property name="usage_uid_column" value="df_usage_uid"/>
                </include>
            </otherwise>
        </choose>
    </select>

    <select id="findWorkSharesByAggLcClassReportDtos" parameterType="map"
            resultMap="workSharesByAggLcClassReportDtoResultMap">
        select
            alc.aggregate_licensee_class_id,
            alc.discipline aggregate_licensee_discipline,
            alc.enrollment_profile aggregate_licensee_enrollment,
            wr_wrk_inst,
            system_title title,
            rh.rh_account_number,
            rh.name rh_name,
            sum(uaacl.total_share) total_share,
            sum(uaacl.volume_share) volume_share,
            sum(uaacl.value_share) value_share,
            sum(u.net_amount) net_amount
        <choose>
            <when test="status in archivedStatuses">
                <include refid="workSharesByAggLcClassFromWhereClauses">
                    <property name="usage_table" value="df_usage_archive"/>
                    <property name="usage_uid_column" value="df_usage_archive_uid"/>
                </include>
            </when>
            <otherwise>
                <include refid="workSharesByAggLcClassFromWhereClauses">
                    <property name="usage_table" value="df_usage"/>
                    <property name="usage_uid_column" value="df_usage_uid"/>
                </include>
            </otherwise>
        </choose>
    </select>

    <select id="findAaclBaselineUsages" parameterType="int" resultMap="aaclBaselineUsageDtoMap">
        select
            df_usage_baseline_aacl_uid baseline_uid,
            wr_wrk_inst,
            usage_period,
            usage_source,
            number_of_copies,
            number_of_pages,
            dlc.detail_licensee_class_id,
            dlc.enrollment_profile detail_licensee_enrollment,
            discipline detail_licensee_discipline,
            pt.name pub_type_name,
            publication_type_weight,
            original_publication_type,
            institution,
            comment,
            u.updated_by_user,
            u.updated_datetime
        from ${schema}.df_usage_baseline_aacl u
        join ${schema}.df_publication_type pt on pt.df_publication_type_uid = u.df_publication_type_uid
        join ${schema}.df_detail_licensee_class dlc on dlc.detail_licensee_class_id = u.detail_licensee_class_id
        where usage_period in (
            select distinct usage_period
            from ${schema}.df_usage_baseline_aacl
            order by usage_period desc
            limit #{numberOfYears}
        )
    </select>

    <select id="findScenarioUsageReportDtos" resultMap="IUsageMapper.usageDtoResultMap">
        <include refid="IUsageMapper.selectDtoByScenarioIdSql"/>
    </select>

    <select id="findAaclScenarioUsageReportDtos" resultMap="IAaclUsageMapper.aaclUsageDtoResultMap">
        <include refid="IAaclUsageMapper.selectDtoByScenarioIdSql"/>
    </select>

    <select id="findArchivedScenarioUsageReportDtos" resultMap="IUsageMapper.usageDtoResultMap">
        <include refid="IUsageArchiveMapper.selectDtoByScenarioIdSql"/>
    </select>

    <select id="findAaclArchivedScenarioUsageReportDtos" resultMap="IAaclUsageMapper.aaclUsageDtoResultMap">
        <include refid="IAaclUsageMapper.selectArchivedDtoByScenarioIdSql"/>
    </select>

    <select id="findRightsholderTotalsHoldersReportDtos" parameterType="map" resultMap="IUsageMapper.rightsholderTotalsHolderResultMap">
        <include refid="IUsageMapper.selectRightsholderTotalsHoldersByScenarioIdSql"/>
    </select>

    <select id="findArchivedRightsholderTotalsHoldersReportDtos" parameterType="map" resultMap="IUsageMapper.rightsholderTotalsHolderResultMap">
        <include refid="IUsageArchiveMapper.selectRightsholderTotalsHoldersByScenarioIdSql"/>
    </select>

    <select id="findUsagesCountByFilter" parameterType="map" resultType="int">
        <include refid="IUsageMapper.selectCountByFilterSql"/>
    </select>

    <select id="findUsageReportDtos" resultMap="IUsageMapper.usageDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="IUsageMapper.selectDtosByFilterSql"/>
    </select>

    <select id="findAaclUsagesCountByFilter" parameterType="map" resultType="int">
        <include refid="IAaclUsageMapper.selectCountByFilterSql"/>
    </select>

    <select id="findAaclUsageReportDtos" resultMap="IAaclUsageMapper.aaclUsageDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="IAaclUsageMapper.selectDtosByFilterSql"/>
    </select>

    <select id="findAaclUsagesCountForAudit" resultType="int" parameterType="map">
        <include refid="IAaclUsageMapper.selectCountForAuditSql"/>
    </select>

    <select id="findUsagesCountForAudit" resultType="int" parameterType="map">
        <include refid="IUsageMapper.selectCountForAuditSql"/>
    </select>

    <select id="findAuditReportDtos" resultMap="IUsageMapper.usageDtoResultMap" parameterType="map">
        <include refid="IUsageMapper.selectForAuditSql"/>
    </select>

    <select id="findAuditAaclReportDtos" resultMap="IAaclUsageMapper.aaclUsageDtoResultMap" parameterType="map">
        <include refid="IAaclUsageMapper.selectForAuditSql"/>
    </select>

    <select id="findWorkClassificationCountByBatchIds" resultType="int" parameterType="map">
        <include refid="IWorkClassificationMapper.findCountByBatchIdsSql"/>
    </select>

    <select id="findWorkClassificationByBatchIds" resultMap="IWorkClassificationMapper.workClassificationResultMap" parameterType="map">
        <include refid="IWorkClassificationMapper.findByBatchIdsSql"/>
    </select>

    <select id="findWorkClassificationCountBySearch" resultType="int" parameterType="map">
        <include refid="IWorkClassificationMapper.findCountBySearchSql"/>
    </select>

    <select id="findWorkClassificationBySearch" resultMap="IWorkClassificationMapper.workClassificationResultMap" parameterType="map">
        <include refid="IWorkClassificationMapper.findBySearchSql"/>
    </select>
</mapper>
