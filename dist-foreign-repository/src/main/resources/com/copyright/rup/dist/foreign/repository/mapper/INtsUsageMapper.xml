<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="INtsUsageMapper">

    <select id="insertUsages" parameterType="map" resultType="string">
        with nts_usages as (
            select
                uuid_generate_v4() df_usage_uid,
                #{batchId} df_usage_batch_uid,
                ua.wr_wrk_inst,
                work_title,
                system_title,
                'WORK_FOUND' status_ind,
                'NTS' product_family,
                standard_number,
                standard_number_type,
                ufas.market,
                ufas.market_period_from,
                ufas.market_period_to,
                gross_amount reported_value,
                comment,
                <include refid="StoredEntityMapper.insert"/>
            from ${schema}.df_usage_archive ua
            join ${schema}.df_usage_fas ufas on ua.df_usage_archive_uid = ufas.df_usage_fas_uid
            left join ${schema}.df_work_classification wc on ua.wr_wrk_inst = wc.wr_wrk_inst
            <include refid="batchWhereClause"/>
                <if test="0 == stmAmount">
                    and (wc.classification = 'NON-STM' or wc.classification is null)
                </if>
                <if test="0 == nonStmAmount">
                    and (wc.classification = 'STM' or wc.classification is null)
                </if>
        ),
        <!--cutoff amounts for classified works - STM and NON-STM-->
        cutoff_amounts as (
            select
                'STM' classification,
                case when sum(u.reported_value *
                    (#{fundPoolPeriodDividend} / (u.market_period_to - u.market_period_from + 1))) is not null
                then round(#{stmMinAmount} * sum(u.reported_value *
                    (#{fundPoolPeriodDividend} / (u.market_period_to - u.market_period_from + 1))) / #{stmAmount}, 2)
                else 0.00 end cutoff_amount
            from nts_usages u
            join ${schema}.df_work_classification wc on u.wr_wrk_inst = wc.wr_wrk_inst
            where classification = 'STM'
            union
            select
                'NON-STM' classification,
                case when sum(u.reported_value *
                    (#{fundPoolPeriodDividend} / (u.market_period_to - u.market_period_from + 1))) is not null
                then round(#{nonStmMinAmount} * sum(u.reported_value *
                    (#{fundPoolPeriodDividend} / (u.market_period_to - u.market_period_from + 1))) / #{nonStmAmount}, 2)
                else 0.00 end cutoff_amount
            from nts_usages u
            join ${schema}.df_work_classification wc on u.wr_wrk_inst = wc.wr_wrk_inst
            where classification = 'NON-STM'
        ),
        <!--cutoff amount for unclassified works as minimum of STM and NON-STM-->
        unclassified_cutoff_amount as (
            select greatest(
                (select cutoff_amount from cutoff_amounts where classification = 'STM'),
                (select cutoff_amount from cutoff_amounts where classification = 'NON-STM')) unclassified_cutoff
        ),
        <!--total works weight-->
        work_total_weight_subquery as (
            select u.wr_wrk_inst,
                wc.classification,
                sum(u.reported_value *
                    (#{fundPoolPeriodDividend} / (u.market_period_to - u.market_period_from +1))) work_total_weight
            from nts_usages u
            left join ${schema}.df_work_classification wc on u.wr_wrk_inst = wc.wr_wrk_inst
            group by u.wr_wrk_inst, wc.classification
        ),
        usage_ids as (
            insert into ${schema}.df_usage (
                df_usage_uid,
                df_usage_batch_uid,
                wr_wrk_inst,
                work_title,
                system_title,
                status_ind,
                product_family,
                standard_number,
                standard_number_type,
                comment,
                <include refid="StoredEntityMapper.additionalColumns"/>
            )
            select
                ua.df_usage_uid,
                ua.df_usage_batch_uid,
                ua.wr_wrk_inst,
                ua.work_title,
                ua.system_title,
                ua.status_ind,
                ua.product_family,
                ua.standard_number,
                ua.standard_number_type,
                ua.comment,
                <include refid="StoredEntityMapper.insert"/>
            from nts_usages ua
            join work_total_weight_subquery sub on sub.wr_wrk_inst = ua.wr_wrk_inst
            where ((sub.work_total_weight &gt;= (select cutoff_amount from cutoff_amounts c where c.classification = sub.classification))
                or (sub.classification is null and sub.work_total_weight &gt;= (select unclassified_cutoff from unclassified_cutoff_amount)))
            returning df_usage_uid
        )
        insert into ${schema}.df_usage_fas (
            df_usage_fas_uid,
            market,
            market_period_from,
            market_period_to,
            reported_value,
            <include refid="StoredEntityMapper.additionalColumns"/>
        )
        select
            df_usage_uid,
            market,
            market_period_from,
            market_period_to,
            reported_value,
            <include refid="StoredEntityMapper.insert"/>
        from nts_usages
        where df_usage_uid::text in (select df_usage_uid from usage_ids)
        returning df_usage_fas_uid
    </select>

    <select id="findCountForBatch" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage_archive ua
        join ${schema}.df_usage_fas ufas on ua.df_usage_archive_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_work_classification wc on ua.wr_wrk_inst = wc.wr_wrk_inst
        <include refid="batchWhereClause"/>
    </select>

    <sql id="batchWhereClause">
        where
            <foreach collection="markets" item="market" separator="or" open="(" close=")">
                ufas.market ilike '%' || #{market} || '%'
            </foreach>
            and <![CDATA[ufas.market_period_from <= #{marketPeriodTo}]]>
            and <![CDATA[ufas.market_period_to >= #{marketPeriodFrom}]]>
            and status_ind = #{status}
            and coalesce(wc.classification, '') != #{excludeClassification}
    </sql>

    <update id="deleteFromPreServiceFeeFund" parameterType="map">
        with ufas as (
            update
                ${schema}.df_usage_fas
            set
                df_fund_pool_uid = null,
                <include refid="StoredEntityMapper.update"/>
            where df_fund_pool_uid = #{fundPoolId}
            returning df_usage_fas_uid
        )
        update ${schema}.df_usage
        set
            status_ind = #{status},
            <include refid="StoredEntityMapper.update"/>
        from ufas
        where df_usage_uid = ufas.df_usage_fas_uid
    </update>

    <delete id="deleteBelletristicByScenarioId" parameterType="map">
        with u as (
            delete from ${schema}.df_usage
            where df_usage_uid in (
                select u.df_usage_uid
                from ${schema}.df_usage u
                join ${schema}.df_work_classification wc on wc.wr_wrk_inst = u.wr_wrk_inst
                    and wc.classification = #{belletristicClassification}
                where <include refid="IUsageMapper.scenarioBatchesFilter"/>)
            returning df_usage_uid
        )
        delete from ${schema}.df_usage_fas
        where df_usage_fas_uid in (select df_usage_uid from u)
    </delete>

    <update id="deleteFromScenario" parameterType="map">
        with usage_ids as (
            update
                ${schema}.df_usage u
            set
                status_ind = case when usage_with_classification.classification is not null then #{eligibleStatus} else #{unclassifiedStatus} end,
                df_scenario_uid = null,
                service_fee = null,
                service_fee_amount = 0,
                net_amount = 0,
                gross_amount = 0,
                <include refid="StoredEntityMapper.update"/>
            from (
                select
                    u.df_usage_uid,
                    wc.classification
                from ${schema}.df_usage u
                left join ${schema}.df_work_classification wc on wc.wr_wrk_inst = u.wr_wrk_inst
                where <include refid="IUsageMapper.scenarioBatchesFilter"/>
                    and status_ind in
                    <foreach collection="statusesToUpdate" item="statusToUpdate" separator="," open="(" close=")">
                        #{statusToUpdate}
                    </foreach>) as usage_with_classification
            where u.df_usage_uid = usage_with_classification.df_usage_uid
            returning u.df_usage_uid
        )
        update ${schema}.df_usage_fas
        set
            is_rh_participating_flag = false,
            <include refid="StoredEntityMapper.update"/>
        from usage_ids
        where df_usage_fas_uid = usage_ids.df_usage_uid
    </update>

</mapper>
