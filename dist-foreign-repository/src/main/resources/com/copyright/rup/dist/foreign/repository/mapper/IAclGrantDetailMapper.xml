<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IAclGrantDetailMapper">

    <resultMap id="aclGrantDetailResultMap" type="AclGrantDetail" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_grant_detail_uid"/>
        <result property="grantSetId" column="df_acl_grant_set_uid"/>
        <result property="grantStatus" column="grant_status"/>
        <result property="typeOfUse" column="type_of_use"/>
        <result property="typeOfUseStatus" column="type_of_use_status"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="eligible" column="is_eligible"/>
        <result property="manualUploadFlag" column="manual_upload_flag"/>
        <result property="payeeAccountNumber" column="payee_account_number"/>
    </resultMap>

    <resultMap id="aclGrantDetailDtoResultMap" type="AclGrantDetailDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_acl_grant_detail_uid"/>
        <result property="licenseType" column="license_type"/>
        <result property="typeOfUseStatus" column="type_of_use_status"/>
        <result property="grantStatus" column="grant_status"/>
        <result property="eligible" column="is_eligible"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="rhName" column="rh_name"/>
        <result property="typeOfUse" column="type_of_use"/>
        <result property="grantPeriod" column="grant_period"/>
        <result property="grantSetName" column="name"/>
        <result property="editable" column="is_editable"/>
        <result property="manualUploadFlag" column="manual_upload_flag"/>
        <result property="payeeAccountNumber" column="payee_account_number"/>
    </resultMap>

    <sql id="aclGrantDetailColumns">
        df_acl_grant_detail_uid,
        df_acl_grant_set_uid,
        grant_status,
        type_of_use,
        type_of_use_status,
        wr_wrk_inst,
        system_title,
        rh_account_number,
        is_eligible,
        manual_upload_flag,
        payee_account_number,
        <include refid="StoredEntityMapper.additionalColumns"/>
    </sql>

    <sql id="selectCountByFilterSql">
        select count(1)
        from ${schema}.df_acl_grant_detail gd
        join ${schema}.df_acl_grant_set gs on gd.df_acl_grant_set_uid = gs.df_acl_grant_set_uid
        left join ${schema}.df_rightsholder r on gd.rh_account_number = r.rh_account_number
        <include refid="IAclGrantDetailMapper.aclGrantDetailFilter"/>
    </sql>

    <sql id="selectDtosByFilterSql">
        select
            df_acl_grant_detail_uid,
            license_type,
            type_of_use_status,
            grant_status,
            is_eligible,
            wr_wrk_inst,
            system_title,
            gd.rh_account_number,
            r.name rh_name,
            type_of_use,
            grant_period,
            gs.name,
            gs.is_editable,
            manual_upload_flag,
            payee_account_number,
            gd.created_datetime,
            gd.updated_datetime
        from ${schema}.df_acl_grant_detail gd
        join ${schema}.df_acl_grant_set gs on gd.df_acl_grant_set_uid = gs.df_acl_grant_set_uid
        left join ${schema}.df_rightsholder r on gd.rh_account_number = r.rh_account_number
        <include refid="IAclGrantDetailMapper.aclGrantDetailFilter"/>
        order by
        <choose>
            <when test="null != sort">
                <include refid="IAclGrantDetailMapper.chooseSortProperty"/>
            </when>
            <otherwise>
                wr_wrk_inst
            </otherwise>
        </choose>,
        gd.df_acl_grant_detail_uid
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="aclGrantDetailFilter">
        <where>
            <if test="filter.grantSetNames.size() > 0">
                and
                <foreach collection="filter.grantSetNames" item="grantSetName" open="(" separator=" or " close=")">
                    gs.name = #{grantSetName}
                </foreach>
            </if>
            <if test="filter.licenseTypes.size() > 0">
                and
                <foreach collection="filter.licenseTypes" item="licenseType" open="(" separator=" or " close=")">
                    gs.license_type = #{licenseType}
                </foreach>
            </if>
            <if test="filter.grantStatuses.size() > 0">
                and
                <foreach collection="filter.grantStatuses" item="grantStatus" open="(" separator=" or " close=")">
                    gd.grant_status = #{grantStatus}
                </foreach>
            </if>
            <if test="filter.typeOfUses.size() > 0">
                and
                <foreach collection="filter.typeOfUses" item="typeOfUse" open="(" separator=" or " close=")">
                    gd.type_of_use = #{typeOfUse}
                </foreach>
            </if>
            <if test="null != filter.grantSetPeriod">
                and gs.grant_period = #{filter.grantSetPeriod}
            </if>
            <if test="!filter.wrWrkInstExpression.isEmpty()">
                <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                    <property name="column" value="wr_wrk_inst"/>
                    <property name="operator" value="filter.wrWrkInstExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.wrWrkInstExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.wrWrkInstExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.rhAccountNumberExpression.isEmpty()">
                <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                    <property name="column" value="gd.rh_account_number"/>
                    <property name="operator" value="filter.rhAccountNumberExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.rhAccountNumberExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.rhAccountNumberExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.rhNameExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="r.name"/>
                    <property name="operator" value="filter.rhNameExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.rhNameExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.rhNameExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.eligibleExpression.isEmpty()">
                <include refid="IUdmCommonMapper.booleanFieldFilterExpression">
                    <property name="column" value="is_eligible"/>
                    <property name="operator" value="filter.eligibleExpression.operator"/>
                </include>
            </if>
            <if test="!filter.editableExpression.isEmpty()">
                <include refid="IUdmCommonMapper.booleanFieldFilterExpression">
                    <property name="column" value="gs.is_editable"/>
                    <property name="operator" value="filter.editableExpression.operator"/>
                </include>
            </if>
        </where>
    </sql>

    <sql id="chooseSortProperty">
        <choose>
            <when test="sort.property == 'grantSetName'">
                gs.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'grantPeriod'">
                grant_period <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'licenseType'">
                license_type <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'typeOfUseStatus'">
                type_of_use_status <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'grantStatus'">
                grant_status <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'eligible'">
                is_eligible <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'wrWrkInst'">
                wr_wrk_inst <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'systemTitle'">
                system_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhAccountNumber'">
                gd.rh_account_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhName'">
                r.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'typeOfUse'">
                type_of_use <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'createDate'">
                gd.created_datetime <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'updateDate'">
                gd.updated_datetime <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'manualUploadFlag'">
                manual_upload_flag <include refid="IUsageMapper.direction"/>
            </when>
        </choose>
    </sql>

    <update id="update" parameterType="AclGrantDetailDto">
        update ${schema}.df_acl_grant_detail
        set
            grant_status = #{grantStatus},
            type_of_use_status = #{typeOfUseStatus},
            rh_account_number = #{rhAccountNumber},
            is_eligible = #{eligible},
            <include refid="StoredEntityMapper.update"/>
        where df_acl_grant_detail_uid = #{id}
    </update>

    <select id="findPairForGrantById" resultMap="aclGrantDetailDtoResultMap" parameterType="string">
        select
            gd.df_acl_grant_detail_uid,
            gd.df_acl_grant_set_uid,
            gd.grant_status,
            gd.type_of_use,
            gd.type_of_use_status,
            gd.wr_wrk_inst,
            gd.rh_account_number,
            gd.is_eligible,
            gd.manual_upload_flag,
            gd.payee_account_number
        from ${schema}.df_acl_grant_detail gd
        left join ${schema}.df_acl_grant_detail gd2 on gd.df_acl_grant_set_uid = gd2.df_acl_grant_set_uid
            and gd2.wr_wrk_inst = gd.wr_wrk_inst
            and gd.df_acl_grant_detail_uid != #{grantId}
        where gd2.df_acl_grant_detail_uid = #{grantId}
    </select>

    <insert id="insert" parameterType="AclGrantDetail">
        insert into ${schema}.df_acl_grant_detail (
            <include refid="aclGrantDetailColumns"/>
        ) values (
            #{id},
            #{grantSetId},
            #{grantStatus},
            #{typeOfUse},
            #{typeOfUseStatus},
            #{wrWrkInst},
            #{systemTitle},
            #{rhAccountNumber},
            #{eligible},
            #{manualUploadFlag},
            #{payeeAccountNumber},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <select id="findByIds" resultMap="aclGrantDetailResultMap">
        select
            <include refid="aclGrantDetailColumns"/>
        from ${schema}.df_acl_grant_detail
        where df_acl_grant_detail_uid in
            <foreach collection="list" item="grantDetailId" open="(" separator="," close=")">
                #{grantDetailId}
            </foreach>
        order by df_acl_grant_detail_uid
    </select>

    <select id="findCountByFilter" parameterType="map" resultType="int">
        <include refid="IAclGrantDetailMapper.selectCountByFilterSql"/>
    </select>

    <select id="findDtosByFilter" resultMap="aclGrantDetailDtoResultMap" parameterType="map"
            fetchSize="${usageSelectFetchSize}">
        <include refid="IAclGrantDetailMapper.selectDtosByFilterSql"/>
    </select>

    <delete id="deleteByGrantSetId" parameterType="string">
        delete from ${schema}.df_acl_grant_detail
        where df_acl_grant_set_uid = #{grantSetId}
    </delete>

    <select id="isGrantDetailExist" parameterType="map" resultType="boolean">
        select exists (
            select 1
            from ${schema}.df_acl_grant_detail
            where df_acl_grant_set_uid = #{grantSetId}
                and wr_wrk_inst = #{wrWrkInst}
                and type_of_use = #{typeOfUse}
        )
    </select>

    <select id="copyGrantDetails" parameterType="map" resultType="String">
        insert into ${schema}.df_acl_grant_detail (
            <include refid="aclGrantDetailColumns"/>
        )
        select
            uuid_generate_v4(),
            #{targetGrantSetId},
            grant_status,
            type_of_use,
            type_of_use_status,
            wr_wrk_inst,
            system_title,
            rh_account_number,
            is_eligible,
            manual_upload_flag,
            payee_account_number,
            <include refid="StoredEntityMapper.insert"/>
        from ${schema}.df_acl_grant_detail
        where df_acl_grant_set_uid = #{sourceGrantSetId}
        returning df_acl_grant_detail_uid
    </select>

    <update id="updatePayeeAccountNumber" parameterType="map">
        update ${schema}.df_acl_grant_detail
        set
            payee_account_number = #{payeeAccountNumber}
        where df_acl_grant_set_uid = #{grantSetId}
            and rh_account_number = #{rhAccountNumber}
            and type_of_use = #{typeOfUse}
    </update>
</mapper>
