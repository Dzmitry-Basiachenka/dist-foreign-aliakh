<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IRightsholderDiscrepancyMapper">

    <resultMap id="rightsholderDiscrepancyResultMap" type="RightsholderDiscrepancy" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_rightsholder_discrepancy_uid"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="workTitle" column="work_title"/>
        <result property="productFamily" column="product_family"/>
        <result property="status" column="status_ind"/>
        <result property="oldRightsholder.id" column="old_rh_id"/>
        <result property="oldRightsholder.name" column="old_rh_name"/>
        <result property="oldRightsholder.accountNumber" column="old_rh_account_number"/>
        <result property="newRightsholder.id" column="new_rh_id"/>
        <result property="newRightsholder.accountNumber" column="new_rh_account_number"/>
        <result property="newRightsholder.name" column="new_rh_name"/>
    </resultMap>

    <sql id="direction">
        <choose>
            <when test="sort.direction == 'asc'">
                asc
            </when>
            <otherwise>
                desc
            </otherwise>
        </choose>
    </sql>

    <sql id="chooseSortProperty">
        <choose>
            <when test="sort.property == 'wrWrkInst'">
                d.wr_wrk_inst <include refid="direction"/>
            </when>
            <when test="sort.property == 'workTitle'">
                d.work_title <include refid="direction"/>
            </when>
            <when test="sort.property == 'oldRightsholder.rhName'">
                old_rh.name <include refid="direction"/>
            </when>
            <when test="sort.property == 'oldRightsholder.rhAccountNumber'">
                d.old_rh_account_number <include refid="direction"/>
            </when>
            <when test="sort.property == 'newRightsholder.rhName'">
                new_rh.name <include refid="direction"/>
            </when>
            <when test="sort.property == 'newRightsholder.rhAccountNumber'">
                d.new_rh_account_number <include refid="direction"/>
            </when>
        </choose>
    </sql>

    <insert id="insert" parameterType="map">
        insert into ${schema}.df_rightsholder_discrepancy (
            df_rightsholder_discrepancy_uid,
            df_scenario_uid,
            old_rh_account_number,
            new_rh_account_number,
            wr_wrk_inst,
            work_title,
            product_family,
            status_ind,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            #{rightsholderDiscrepancy.id},
            #{scenarioId},
            #{rightsholderDiscrepancy.oldRightsholder.accountNumber},
            #{rightsholderDiscrepancy.newRightsholder.accountNumber},
            #{rightsholderDiscrepancy.wrWrkInst},
            #{rightsholderDiscrepancy.workTitle},
            #{rightsholderDiscrepancy.productFamily},
            #{rightsholderDiscrepancy.status},
            now(),
            now(),
            #{rightsholderDiscrepancy.createUser},
            #{rightsholderDiscrepancy.updateUser},
            1
        )
    </insert>

    <select id="findProhibitedAccountNumbers" parameterType="map" resultType="long">
        select distinct old_rh_account_number
        from ${schema}.df_rightsholder_discrepancy
        where new_rh_account_number is null
            and df_scenario_uid = #{scenarioId}
            and status_ind = #{status}
    </select>

    <select id="findCountByScenarioIdAndStatus" parameterType="map" resultType="int">
        select count(1)
        from (
            select distinct
                old_rh_account_number,
                new_rh_account_number,
                wr_wrk_inst,
                work_title
            from ${schema}.df_rightsholder_discrepancy
            where df_scenario_uid = #{scenarioId}
                and status_ind = #{status}
        ) discrepancies
    </select>

    <select id="findByScenarioIdAndStatus" parameterType="map" resultMap="rightsholderDiscrepancyResultMap">
        select distinct
            d.old_rh_account_number,
            old_rh.name old_rh_name,
            old_rh.df_rightsholder_uid old_rh_id,
            d.new_rh_account_number,
            new_rh.name new_rh_name,
            new_rh.df_rightsholder_uid new_rh_id,
            d.wr_wrk_inst,
            d.work_title,
            d.product_family
        from ${schema}.df_rightsholder_discrepancy d
        left join ${schema}.df_rightsholder new_rh on new_rh.rh_account_number = d.new_rh_account_number
        left join ${schema}.df_rightsholder old_rh on old_rh.rh_account_number = d.old_rh_account_number
        where d.df_scenario_uid = #{scenarioId}
            <if test="null != status">
                and status_ind = #{status}
            </if>
        order by
        <choose>
            <when test="null != sort">
                <include refid="chooseSortProperty"/>
            </when>
            <otherwise>
                d.old_rh_account_number asc
            </otherwise>
        </choose>
        <if test="null != pageable">
            limit #{pageable.limit}
            offset #{pageable.offset}
        </if>
    </select>

    <delete id="deleteByScenarioIdAndStatus" parameterType="map">
        delete from ${schema}.df_rightsholder_discrepancy
        where df_scenario_uid = #{scenarioId}
            and status_ind = #{status}
    </delete>

    <delete id="deleteByScenarioId">
        delete from ${schema}.df_rightsholder_discrepancy
        where df_scenario_uid = #{scenarioId}
    </delete>

    <update id="approveByScenarioId" parameterType="map">
        update ${schema}.df_rightsholder_discrepancy
        set status_ind = #{status}
        where df_scenario_uid = #{scenarioId}
    </update>
</mapper>
