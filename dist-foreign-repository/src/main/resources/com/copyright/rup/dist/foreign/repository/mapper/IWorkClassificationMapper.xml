<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IWorkClassificationMapper">

    <resultMap id="workClassificationResultMap" type="WorkClassification">
        <result property="id" column="df_work_classification_uid"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="article" column="article"/>
        <result property="author" column="author"/>
        <result property="publisher" column="publisher"/>
        <result property="classification" column="classification"/>
        <result property="standardNumber" column="standard_number"/>
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="rhName" column="rh_name"/>
        <result property="updateDate" column="updated_datetime"/>
    </resultMap>

    <insert id="insertOrUpdate" parameterType="WorkClassification">
        with result as (
            update ${schema}.df_work_classification
            set classification = #{classification},
                <include refid="StoredEntityMapper.update"/>
            where wr_wrk_inst = #{wrWrkInst}
        )
        insert into ${schema}.df_work_classification (
            df_work_classification_uid,
            wr_wrk_inst,
            classification,
            <include refid="StoredEntityMapper.additionalColumns"/>)
        values(
            #{id},
            #{wrWrkInst},
            #{classification},
            <include refid="StoredEntityMapper.insert"/>)
        on conflict (wr_wrk_inst)
        do nothing
    </insert>

    <delete id="deleteByWrWrkInst" parameterType="long">
        delete from ${schema}.df_work_classification
        where wr_wrk_inst = #{wrWrkInst}
    </delete>

    <select id="findClassificationByWrWrkInst" resultType="string" parameterType="long">
        select classification
        from ${schema}.df_work_classification
        where wr_wrk_inst = #{wrWrkInst}
    </select>

    <sql id="searchClause">
        (cast(${wr_wrk_inst} as text) ilike '%' || #{searchValue} || '%' or
        standard_number ilike '%' || #{searchValue} || '%' or
        system_title ilike '%' || #{searchValue} || '%' or
        cast(rh.rh_account_number as text) like '%' || #{searchValue} || '%' or
        rh.name ilike '%' || #{searchValue} || '%')
    </sql>

    <sql id="classificationOrderByClause">
        order by
        <choose>
            <when test="null != sort">
                <choose>
                    <when test="sort.property == 'article'">
                        article <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'standardNumber'">
                        standard_number <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'wrWrkInst'">
                        wr_wrk_inst <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'systemTitle'">
                        system_title <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'rhAccountNumber'">
                        rh_account_number <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'rhName'">
                        rh_name <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'publisher'">
                        publisher <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'author'">
                        author <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'classification'">
                        classification <include refid="IUsageMapper.direction"/>
                    </when>
                </choose>
            </when>
            <otherwise>
                wc.updated_datetime desc
            </otherwise>
        </choose>
    </sql>

    <select id="findByBatchIds" resultMap="workClassificationResultMap" parameterType="map">
        select
            wc.df_work_classification_uid,
            wc.classification,
            internal.wr_wrk_inst wr_wrk_inst,
            system_title,
            article,
            author,
            publisher,
            standard_number,
            rh_account_number,
            rh_name
        from (
            select distinct on (u.wr_wrk_inst)
                u.wr_wrk_inst,
                u.system_title,
                u.article,
                u.author,
                u.publisher,
                u.standard_number,
                u.rh_account_number,
                u.updated_datetime,
                rh.name rh_name
            from ${schema}.df_usage u
            left join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
            left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
            where
                u.df_usage_batch_uid in
                <foreach collection="batchesIds" item="batchId" separator="," open="(" close=")">
                    #{batchId}
                </foreach>
                <if test="null != searchValue">
                    and
                        <include refid="searchClause">
                            <property name="wr_wrk_inst" value="u.wr_wrk_inst"/>
                        </include>
                </if>
            order by u.wr_wrk_inst, u.updated_datetime desc
            ) internal
        left join ${schema}.df_work_classification wc on wc.wr_wrk_inst = internal.wr_wrk_inst
        <include refid="classificationOrderByClause"/>
        <include refid="IUsageMapper.ifPageable"/>
    </select>

    <select id="findBySearch" resultMap="workClassificationResultMap">
        select
            wc.df_work_classification_uid,
            wc.classification,
            wc.wr_wrk_inst wr_wrk_inst,
            system_title,
            article,
            author,
            publisher,
            standard_number,
            rh.rh_account_number,
            rh.name rh_name
        from ${schema}.df_work_classification wc
        left join lateral (
            select
                u.wr_wrk_inst,
                u.system_title,
                u.article,
                u.author,
                u.publisher,
                u.standard_number,
                u.rh_account_number
            from ${schema}.df_usage_archive u
            where u.wr_wrk_inst = wc.wr_wrk_inst
            limit 1
        ) u on true
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        <if test="null != searchValue">
            where
                <include refid="searchClause">
                    <property name="wr_wrk_inst" value="wc.wr_wrk_inst"/>
                </include>
        </if>
        <include refid="classificationOrderByClause"/>
        <include refid="IUsageMapper.ifPageable"/>
    </select>

    <select id="findCountByBatchIds" parameterType="map" resultType="int">
        select count(distinct wr_wrk_inst)
        from ${schema}.df_usage u
        left join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        where
            u.df_usage_batch_uid in
            <foreach collection="batchesIds" item="batchId" separator="," open="(" close=")">
                #{batchId}
            </foreach>
        <if test="null != searchValue">
            and
                <include refid="searchClause">
                    <property name="wr_wrk_inst" value="u.wr_wrk_inst"/>
                </include>
        </if>
    </select>

    <select id="findCountBySearch" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_work_classification wc
        left join lateral (
            select
                u.wr_wrk_inst,
                u.system_title,
                u.article,
                u.author,
                u.publisher,
                u.standard_number,
                u.rh_account_number
            from ${schema}.df_usage_archive u
            where u.wr_wrk_inst = wc.wr_wrk_inst
            limit 1
        ) u on true
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        <if test="null != searchValue">
            where
                <include refid="searchClause">
                    <property name="wr_wrk_inst" value="wc.wr_wrk_inst"/>
                </include>
        </if>
    </select>
</mapper>
