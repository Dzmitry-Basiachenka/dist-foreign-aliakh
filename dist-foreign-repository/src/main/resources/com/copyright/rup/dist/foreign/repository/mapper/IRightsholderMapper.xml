<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="RightsholderMapper">

    <resultMap id="rroResultMap" type="Rightsholder">
        <result property="id" column="df_rightsholder_uid"/>
        <result property="accountNumber" column="rro_account_number"/>
        <result property="name" column="name"/>
    </resultMap>

    <resultMap id="rightsholderPayeePairResultMap" type="RightsholderPayeePair">
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="rightsholder.name" column="rh_name"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="payee.name" column="payee_name"/>
    </resultMap>

    <resultMap id="rightsholderTypeOfUserPairResultMap" type="RightsholderAccountTypeOfUsePair">
        <result property="rightsholder.id" column="rightsholder_uid"/>
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="typeOfUse" column="type_of_use"/>
    </resultMap>

    <select id="findRros" resultMap="rroResultMap" parameterType="string">
        select distinct
            ub.rro_account_number,
            r.name,
            r.df_rightsholder_uid
        from ${schema}.df_usage_batch ub
        left join ${schema}.df_rightsholder r on r.rh_account_number = ub.rro_account_number
        where ub.product_family = #{productFamily}
        order by r.name
    </select>

    <select id="findAccountNumbers" resultType="long">
        select distinct rro_account_number
        from ${schema}.df_usage_batch
        where rro_account_number is not null
        union
        select distinct rh_account_number
        from ${schema}.df_usage
        where rh_account_number is not null
        union
        select distinct payee_account_number
        from ${schema}.df_usage
        where payee_account_number is not null
        union
        select distinct rh_account_number
        from ${schema}.df_usage_archive
        where rh_account_number is not null
        union
        select distinct payee_account_number
        from ${schema}.df_usage_archive
        where payee_account_number is not null
        union
        select distinct old_rh_account_number
        from ${schema}.df_rightsholder_discrepancy
        where old_rh_account_number is not null
        union
        select distinct new_rh_account_number
        from ${schema}.df_rightsholder_discrepancy
        where new_rh_account_number is not null
        union
        select distinct rh_account_number
        from ${schema}.df_udm_usage
        where rh_account_number is not null
        union
        select distinct rh_account_number
        from ${schema}.df_udm_value
        where rh_account_number is not null
        union
        select distinct rh_account_number
        from ${schema}.df_acl_grant_detail
        where rh_account_number is not null
        union
        select distinct payee_account_number
        from ${schema}.df_acl_share_detail
        where payee_account_number is not null
    </select>

    <delete id="deleteByAccountNumber" parameterType="long">
        delete from ${schema}.df_rightsholder
        where rh_account_number = #{accountNumber}
    </delete>

    <select id="findCountWithSearch" parameterType="string" resultType="int">
        select count(1)
        from ${schema}.df_rightsholder
        where rh_account_number is not null
        <if test="null != searchValue">
            and (name ilike '%' || #{searchValue} || '%' or
            cast(rh_account_number as text) like '%' || #{searchValue} || '%')
        </if>
    </select>

    <select id="findAllWithSearch" resultMap="rightsholderResultMap" parameterType="map" >
        select distinct on (rh_account_number)
            rh_account_number,
            name
        from ${schema}.df_rightsholder
        where rh_account_number is not null
        <if test="null != searchValue">
            and (name ilike '%' || #{searchValue} || '%' or
            cast(rh_account_number as text) like '%' || #{searchValue} || '%')
        </if>
        order by rh_account_number
        <if test="null != pageable">
            limit #{pageable.limit}
            offset #{pageable.offset}
        </if>
    </select>

    <select id="findByScenarioId" resultMap="rightsholderResultMap" parameterType="string">
        select distinct
            rh.df_rightsholder_uid rightsholder_uid,
            rh.rh_account_number
        from ${schema}.df_usage u
        join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        where u.df_scenario_uid = #{scenarioId}
        order by rh.df_rightsholder_uid
    </select>

    <select id="findByAclGrantSetId" resultMap="rightsholderTypeOfUserPairResultMap" parameterType="string">
        select distinct
            rh.df_rightsholder_uid rightsholder_uid,
            rh.rh_account_number,
            gd.type_of_use
        from ${schema}.df_acl_grant_detail gd
        join ${schema}.df_acl_grant_set gs on gd.df_acl_grant_set_uid = gs.df_acl_grant_set_uid
        join ${schema}.df_rightsholder rh on gd.rh_account_number = rh.rh_account_number
        where gs.df_acl_grant_set_uid = #{grantSetId}
        order by rh.df_rightsholder_uid, gd.type_of_use
    </select>

    <select id="findRhPayeeByScenarioIds" parameterType="string" resultMap="rightsholderPayeePairResultMap">
        select distinct
            u.rh_account_number,
            r.name rh_name,
            u.payee_account_number,
            p.name payee_name
        from ${schema}.df_usage u
        left join ${schema}.df_rightsholder r on r.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where u.df_scenario_uid = #{scenarioId}
        order by rh_name asc
    </select>
</mapper>
