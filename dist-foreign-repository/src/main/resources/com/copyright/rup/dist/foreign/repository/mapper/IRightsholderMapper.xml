<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="RightsholderMapper">

    <resultMap id="rroResultMap" type="Rightsholder">
        <result property="id" column="df_rightsholder_uid"/>
        <result property="accountNumber" column="rro_account_number"/>
        <result property="name" column="name"/>
    </resultMap>

    <select id="findRros" resultMap="rroResultMap" parameterType="string">
        select distinct
            ub.rro_account_number,
            r.name,
            r.df_rightsholder_uid
        from ${schema}.df_usage_batch ub
        left join ${schema}.df_rightsholder r on r.rh_account_number = ub.rro_account_number
        where ub.product_family = #{productFamily}
        order by r.name
    </select>

    <select id="findAccountNumbers" resultType="long">
        select
            distinct rro_account_number account_number
        from ${schema}.df_usage_batch
        where rro_account_number is not null
        union
        select
            distinct rh_account_number account_number
        from ${schema}.df_usage
        where rh_account_number is not null
        union
        select
            distinct payee_account_number account_number
        from ${schema}.df_usage
        where payee_account_number is not null
        union
        select
            distinct rh_account_number account_number
        from ${schema}.df_usage_archive
        where rh_account_number is not null
        union
        select
            distinct payee_account_number account_number
        from ${schema}.df_usage_archive
        where payee_account_number is not null
    </select>

    <delete id="deleteByAccountNumber" parameterType="long">
        delete from ${schema}.df_rightsholder
        where rh_account_number = #{accountNumber}
    </delete>

    <select id="findCountFromUsages" parameterType="string" resultType="int">
        select count(1)
        from(
            select distinct u.rh_account_number
            from ${schema}.df_usage u
            left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
            where u.rh_account_number is not null
            <if test="null != searchValue">
                and <include refid="IUsageMapper.searchWhereClause"/>
            </if>
            union
            select distinct u.rh_account_number
            from ${schema}.df_usage_archive u
            left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
            where u.rh_account_number is not null
            <if test="null != searchValue">
                and <include refid="IUsageMapper.searchWhereClause"/>
            </if>
        ) accountNumbers
    </select>

    <select id="findFromUsages" parameterType="map" resultMap="rightsholderResultMap">
        select distinct on (u.rh_account_number)
            u.rh_account_number,
            r.name
        from ${schema}.df_usage u
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        where u.rh_account_number is not null
        <if test="null != searchValue">
            and <include refid="IUsageMapper.searchWhereClause"/>
        </if>
        union
        select distinct on (u.rh_account_number)
            u.rh_account_number,
            r.name
        from ${schema}.df_usage_archive u
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        where u.rh_account_number is not null
        <if test="null != searchValue">
            and <include refid="IUsageMapper.searchWhereClause"/>
        </if>
        <if test="null != pageable">
            limit #{pageable.limit}
            offset #{pageable.offset}
        </if>
    </select>
</mapper>
