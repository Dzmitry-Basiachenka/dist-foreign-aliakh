<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IScenarioMapper">

    <resultMap id="scenarioResultMap" type="Scenario" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_scenario_uid"/>
        <result property="name" column="name"/>
        <result property="productFamily" column="product_family"/>
        <result property="status" column="status_ind"/>
        <result property="netTotal" column="net_total"/>
        <result property="serviceFeeTotal" column="service_fee_total"/>
        <result property="grossTotal" column="gross_total"/>
        <result property="reportedTotal" column="reported_total"/>
        <result property="description" column="description"/>
        <result property="aaclFields" column="aacl_fields" typeHandler="AaclScenarioFieldsTypeHandler"/>
        <result property="ntsFields" column="nts_fields" typeHandler="NtsScenarioFieldsTypeHandler"/>
        <result property="ntsFields.preServiceFeeFundName" column="pre_service_fee_fund_name"/>
        <result property="ntsFields.preServiceFeeFundTotal" column="pre_service_fee_fund_total"/>
        <association property="auditItem" resultMap="IScenarioAuditMapper.scenarioAuditItemResultMap" columnPrefix="action_"/>
    </resultMap>

    <resultMap id="rightsholderPayeePairResultMap" type="RightsholderPayeePair">
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="rightsholder.name" column="rh_name"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="payee.name" column="payee_name"/>
    </resultMap>

    <sql id="scenarioColumns">
        df_scenario_uid,
        name,
        status_ind,
        description,
        aacl_fields,
        nts_fields,
        <include refid="StoredEntityMapper.additionalColumns"/>
    </sql>

    <sql id="fullScenarioInformation">
        s.df_scenario_uid,
        s.name,
        s.status_ind,
        f.product_family,
        coalesce(sum(ufas.reported_value), 0) reported_total,
        coalesce(sum(u.gross_amount), 0) gross_total,
        coalesce(sum(u.service_fee_amount), 0) service_fee_total,
        coalesce(sum(u.net_amount), 0) net_total,
        s.description,
        s.aacl_fields,
        s.nts_fields,
        fund.name pre_service_fee_fund_name,
        fund.total_amount pre_service_fee_fund_total,
        a1.df_scenario_audit_uid action_df_scenario_audit_uid,
        a1.df_scenario_uid action_df_scenario_uid,
        a1.action_type_ind action_action_type_ind,
        a1.action_reason action_action_reason,
        a1.created_datetime action_created_datetime,
        a1.updated_datetime action_updated_datetime,
        a1.created_by_user action_created_by_user,
        a1.updated_by_user action_updated_by_user,
        s.record_version action_record_version,
        s.created_datetime created_datetime,
        s.updated_datetime updated_datetime,
        s.created_by_user created_by_user,
        s.updated_by_user updated_by_user,
        s.record_version record_version
    </sql>

    <insert id="insert" parameterType="Scenario">
        insert into ${schema}.df_scenario(
            <include refid="scenarioColumns"/>
        ) values (
            #{id},
            #{name},
            #{status},
            #{description},
            #{aaclFields, typeHandler=AaclScenarioFieldsTypeHandler},
            #{ntsFields, typeHandler=NtsScenarioFieldsTypeHandler},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <sql id="selectUsageAmountsTable">
        <if test="null != scenario.ntsFields.preServiceFeeFundId or scenario.ntsFields.preServiceFeeAmount > 0">
            usage_amounts_with_pre_service_fee
        </if>
        <if test="null == scenario.ntsFields.preServiceFeeFundId and scenario.ntsFields.preServiceFeeAmount == 0">
            usage_amounts
        </if>
    </sql>

    <insert id="insertNtsScenarioAndAddUsages" parameterType="map">
        with result as (
            insert into ${schema}.df_scenario (
                <include refid="scenarioColumns"/>
            ) values (
                #{scenario.id},
                #{scenario.name},
                #{scenario.status},
                #{scenario.description},
                null,
                #{scenario.ntsFields, typeHandler=NtsScenarioFieldsTypeHandler},
                <include refid="StoredEntityMapper.insert"/>
            )
        ),
        <!-- Calculates numerator weight for each usage -->
        numerator as (
            select
                u.df_usage_uid,
                u.df_usage_batch_uid,
                u.rh_account_number,
                wc.classification,
                ufas.reported_value * ((ub.nts_fields ->> 'fund_pool_period_to')::int - (ub.nts_fields ->> 'fund_pool_period_from')::int + 1) /
                (ufas.market_period_to - ufas.market_period_from + 1) as numerator_weight,
                case when wc.classification = 'STM' then (ub.nts_fields ->> 'stm_amount')::numeric else (ub.nts_fields ->> 'non_stm_amount')::numeric end fund_pool_amount
            from ${schema}.df_usage u
            join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
            join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
            join ${schema}.df_work_classification wc on wc.wr_wrk_inst = u.wr_wrk_inst
            <include refid="IUsageMapper.usageFilter"/>
        ),
        <!-- Calculates denominator weight for each classification in each NTS fund pool -->
        denominator as (
            select
                n.classification,
                n.df_usage_batch_uid,
                sum(n.numerator_weight) as denominator_weight
            from numerator n
            group by n.classification, df_usage_batch_uid
        ),
        <!-- Calculates amount for each usage -->
        usage_amounts as (
            select
                n.df_usage_uid,
                n.rh_account_number,
                n.numerator_weight / d.denominator_weight * n.fund_pool_amount as gross_amount
            from numerator n
            join denominator d on n.classification = d.classification and n.df_usage_batch_uid = d.df_usage_batch_uid
        ),
        <if test="null != scenario.ntsFields.preServiceFeeFundId || scenario.ntsFields.preServiceFeeAmount > 0">
            <!-- Calculates Pre-Service fee factor-->
            pre_service_fee_factor as (
                select
                    (sum(gross_amount) + #{scenario.ntsFields.preServiceFeeAmount}
                        + coalesce((select total_amount from ${schema}.df_fund_pool where df_fund_pool_uid = #{scenario.ntsFields.preServiceFeeFundId}), 0))
                        / sum(gross_amount)  as factor
                from usage_amounts
            ),
            <!-- Recalculates gross_amount based on Pre-Service fee factor -->
            usage_amounts_with_pre_service_fee as (
                select
                    df_usage_uid,
                    rh_account_number,
                    gross_amount * (select factor from pre_service_fee_factor) gross_amount
                from usage_amounts
            ),
        </if>
        <!-- Calculates amount for each rightsholder under minimum -->
        under_minimum_rh_totals as (
            select
                rh_account_number,
                sum(gross_amount) rh_total
            from <include refid="selectUsageAmountsTable"/>
            group by rh_account_number
            having sum(gross_amount) &lt; #{scenario.ntsFields.rhMinimumAmount}
        ),
        <!-- Calculates GT factor based on scenario gross amount -->
        gt_factor as (
            select sum(gross_amount) / (sum(gross_amount) - under_minimum_total) as factor
            from (
                select coalesce(sum(rh_total), 0) under_minimum_total
                from under_minimum_rh_totals
            ) under_minimum, <include refid="selectUsageAmountsTable"/>
            group by under_minimum_total
        )
        <!-- Update usages based on rh account numbers -->
        update
            ${schema}.df_usage u
        set
            status_ind = case when u.rh_account_number in (select rh_account_number from under_minimum_rh_totals) then 'SCENARIO_EXCLUDED' else 'LOCKED' end,
            df_scenario_uid = case when u.rh_account_number in (select rh_account_number from under_minimum_rh_totals) then null else #{scenario.id} end,
            gross_amount = case when u.rh_account_number in (select rh_account_number from under_minimum_rh_totals) then 0.00 else amounts.gross_amount * (select factor from gt_factor) end,
            <include refid="StoredEntityMapper.update"/>
        from <include refid="selectUsageAmountsTable"/> amounts
        where amounts.df_usage_uid = u.df_usage_uid
    </insert>

    <update id="refresh" parameterType="Scenario">
        update ${schema}.df_scenario
        set
            <include refid="StoredEntityMapper.update"/>
        where df_scenario_uid = #{id}
    </update>

    <update id="updateStatusById" parameterType="map">
        update ${schema}.df_scenario
        set
            status_ind = #{status},
            <include refid="StoredEntityMapper.update"/>
        where df_scenario_uid = #{scenarioId}
    </update>

    <select id="findCountByName" parameterType="string" resultType="int">
        select count(name)
        from ${schema}.df_scenario
        where upper(name) = upper(#{name})
    </select>

    <select id="findByProductFamily" resultMap="scenarioResultMap">
        select
            s.df_scenario_uid,
            s.name,
            s.status_ind,
            s.description,
            s.aacl_fields,
            s.nts_fields,
            s.created_by_user,
            s.created_datetime,
            s.updated_datetime,
            f.product_family
        from ${schema}.df_scenario s
        join ${schema}.df_scenario_usage_filter f on s.df_scenario_uid = f.df_scenario_uid
        where f.product_family = #{productFamily}
        order by s.updated_datetime desc
    </select>

    <select id="findNamesByUsageBatchId" parameterType="string" resultType="string">
        select distinct name
        from ${schema}.df_scenario
        where df_scenario_uid in (
            select df_scenario_uid
            from ${schema}.df_usage
            where df_usage_batch_uid = #{df_usage_batch_id}
            union
            select df_scenario_uid
            from ${schema}.df_usage_archive
            where df_usage_batch_uid = #{df_usage_batch_id}
            union
            select s.df_scenario_uid
            from ${schema}.df_scenario s
            left join ${schema}.df_scenario_usage_filter f on s.df_scenario_uid = f.df_scenario_uid
            left join ${schema}.df_scenario_usage_filter_to_usage_batches_ids_map ub on f.df_scenario_usage_filter_uid = ub.df_scenario_usage_filter_uid
            where ub.df_usage_batch_uid = #{df_usage_batch_id}
        )
    </select>

    <select id="findNameByNtsFundPoolId" parameterType="string" resultType="string">
        select name
        from ${schema}.df_scenario
        where nts_fields->>'pre_service_fee_fund_uid' = #{fundPoolId}
    </select>

    <delete id="remove" parameterType="string">
        delete from ${schema}.df_scenario
        where df_scenario_uid = #{scenarioId}
    </delete>

    <select id="findSourceRros" parameterType="string" resultMap="RightsholderMapper.rightsholderResultMap">
        select distinct
            b.rro_account_number rh_account_number,
            r.name,
            r.df_rightsholder_uid
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch b on b.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_rightsholder r on r.rh_account_number = b.rro_account_number
        where u.df_scenario_uid = #{scenarioId}
        order by r.name
    </select>

    <select id="findWithAmountsAndLastAction" parameterType="string" resultMap="scenarioResultMap">
        select
            <include refid="fullScenarioInformation"/>
        from ${schema}.df_scenario s
        join ${schema}.df_scenario_usage_filter f on s.df_scenario_uid = f.df_scenario_uid
        left join ${schema}.df_usage u on u.df_scenario_uid = s.df_scenario_uid
        left join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_fund_pool fund on (s.nts_fields->>'pre_service_fee_fund_uid') = fund.df_fund_pool_uid
        left join ${schema}.df_scenario_audit a1 on s.df_scenario_uid = a1.df_scenario_uid
        left join ${schema}.df_scenario_audit a2 on s.df_scenario_uid = a2.df_scenario_uid
            <![CDATA[and a1.created_datetime < a2.created_datetime]]>
        where s.df_scenario_uid = #{scenarioId}
            and a2.df_scenario_uid is null
        group by
            s.df_scenario_uid,
            s.name,
            a1.df_scenario_audit_uid,
            fund.name,
            fund.total_amount,
            f.product_family
    </select>

    <select id="findArchivedWithAmountsAndLastAction" parameterType="string" resultMap="scenarioResultMap">
        select
            <include refid="fullScenarioInformation"/>
        from ${schema}.df_scenario s
        join ${schema}.df_scenario_usage_filter f on s.df_scenario_uid = f.df_scenario_uid
        left join ${schema}.df_usage_archive u on u.df_scenario_uid = s.df_scenario_uid
        left join ${schema}.df_usage_fas ufas on u.df_usage_archive_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_fund_pool fund on (s.nts_fields->>'pre_service_fee_fund_uid') = fund.df_fund_pool_uid
        left join ${schema}.df_scenario_audit a1 on s.df_scenario_uid = a1.df_scenario_uid
        left join ${schema}.df_scenario_audit a2 on s.df_scenario_uid = a2.df_scenario_uid
            <![CDATA[and a1.created_datetime < a2.created_datetime]]>
        where s.df_scenario_uid = #{scenarioId}
            and a2.df_scenario_uid is null
        group by
            s.df_scenario_uid,
            s.name,
            a1.df_scenario_audit_uid,
            fund.name,
            fund.total_amount,
            f.product_family
    </select>

    <select id="findRightsholdersByScenarioIdAndSourceRro" parameterType="map" resultMap="rightsholderPayeePairResultMap">
        select distinct
            u.rh_account_number,
            r.name rh_name,
            u.payee_account_number,
            p.name payee_name
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch b on b.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_rightsholder r on r.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where u.df_scenario_uid = #{scenarioId} and b.rro_account_number = #{rroAccountNumber}
        order by rh_name asc
    </select>

    <select id="findIdsForArchiving" parameterType="map" resultType="string">
        select df_scenario_uid
        from ${schema}.df_scenario
        where status_ind = #{scenarioStatus}
            and df_scenario_uid in
                (select ua.df_scenario_uid
                 from ${schema}.df_usage_archive ua
                 where ua.status_ind = #{usageStatus}
                 group by ua.df_scenario_uid
                 having count(ua.df_usage_archive_uid) =
                     (select count(u.df_usage_archive_uid)
                      from ${schema}.df_usage_archive u
                      where u.df_scenario_uid = ua.df_scenario_uid))
    </select>
</mapper>
