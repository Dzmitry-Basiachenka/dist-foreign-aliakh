<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IScenarioMapper">

    <resultMap id="scenarioResultMap" type="Scenario" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_scenario_uid"/>
        <result property="name" column="name"/>
        <result property="status" column="status_ind"/>
        <result property="netTotal" column="net_total"/>
        <result property="serviceFeeTotal" column="service_fee_total"/>
        <result property="grossTotal" column="gross_total"/>
        <result property="reportedTotal" column="reported_total"/>
        <result property="description" column="description"/>
    </resultMap>

    <resultMap id="rightsholderPayeePairResultMap" type="RightsholderPayeePair">
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="rightsholder.name" column="rh_name"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="payee.name" column="payee_name"/>
    </resultMap>

    <sql id="scenarioColumns">
        df_scenario_uid,
        name,
        status_ind,
        description,
        <include refid="StoredEntityMapper.additionalColumns"/>
    </sql>

    <insert id="insert" parameterType="Scenario">
        insert into ${schema}.df_scenario(
            <include refid="scenarioColumns"/>
        ) values (
            #{id},
            #{name},
            #{status},
            #{description},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <update id="update" parameterType="Scenario">
        update ${schema}.df_scenario
        set
            name = #{name},
            description = #{description},
            status_ind = #{status},
            <include refid="StoredEntityMapper.update"/>
        where df_scenario_uid = #{id}
    </update>

    <select id="findCountByName" parameterType="string" resultType="int">
        select count(name)
        from ${schema}.df_scenario
        where upper(name) = upper(#{name})
    </select>

    <select id="findAll" resultMap="scenarioResultMap">
        select
        <include refid="scenarioColumns"/>
        from ${schema}.df_scenario
        order by updated_datetime desc
    </select>

    <select id="findNamesByUsageBatchId" parameterType="string" resultType="string">
        select distinct name
        from ${schema}.df_scenario
        where df_scenario_uid in (
            select df_scenario_uid
            from ${schema}.df_usage
            where df_usage_batch_uid = #{df_usage_batch_id})
    </select>

    <delete id="remove" parameterType="string">
        delete from ${schema}.df_scenario
        where df_scenario_uid = #{scenarioId}
    </delete>

    <select id="findSourceRros" parameterType="string" resultMap="RightsholderMapper.rightsholderResultMap">
        select distinct
            b.rro_account_number rh_account_number,
            r.name,
            r.df_rightsholder_uid
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch b on b.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_rightsholder r on r.rh_account_number = b.rro_account_number
        where u.df_scenario_uid = #{scenarioId}
        order by r.name asc
    </select>

    <select id="findWithAmounts" parameterType="string" resultMap="scenarioResultMap">
        select
            s.df_scenario_uid,
            s.name,
            s.status_ind,
            coalesce(sum(u.reported_value), 0) reported_total,
            coalesce(sum(u.gross_amount), 0) gross_total,
            coalesce(sum(u.service_fee_amount), 0) service_fee_total,
            coalesce(sum(u.net_amount), 0) net_total,
            s.description
        from ${schema}.df_scenario s
        left join ${schema}.df_usage u on u.df_scenario_uid = s.df_scenario_uid
        where s.df_scenario_uid = #{scenarioId}
        group by s.df_scenario_uid, s.name
    </select>

    <select id="findRightsholdersByScenarioIdAndSourceRro" parameterType="map" resultMap="rightsholderPayeePairResultMap">
        select distinct
            u.rh_account_number,
            r.name rh_name,
            u.payee_account_number,
            p.name payee_name
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch b on b.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_rightsholder r on r.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where u.df_scenario_uid = #{scenarioId} and b.rro_account_number = #{rroAccountNumber}
        order by rh_name asc
    </select>
</mapper>
