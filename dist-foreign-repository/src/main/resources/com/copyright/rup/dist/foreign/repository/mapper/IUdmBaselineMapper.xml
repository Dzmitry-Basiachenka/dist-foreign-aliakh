<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IUdmBaselineMapper">

    <resultMap id="udmBaselineDtoResultMap" type="UdmBaselineDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_udm_usage_uid"/>
        <result property="period" column="period"/>
        <result property="usageOrigin" column="usage_origin"/>
        <result property="originalDetailId" column="original_detail_id"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="detailLicenseeClassId" column="detail_licensee_class_id"/>
        <result property="detailLicenseeClassName" column="detail_licensee_class_name"/>
        <result property="aggregateLicenseeClassId" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClassName" column="aggregate_licensee_class_name"/>
        <result property="surveyCountry" column="survey_country"/>
        <result property="channel" column="channel"/>
        <result property="typeOfUse" column="reported_type_of_use"/>
        <result property="annualizedCopies" column="annualized_copies"/>
        <result property="valueId" column="df_udm_value_uid"/>
    </resultMap>

    <resultMap id="wrWrkInstToSystemTitleMap" type="WrWrkInstSystemTitlePair">
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
    </resultMap>

    <sql id="udmBaselineFilter">
        <if test="filter.periods.size() > 0">
            and
            <foreach collection="filter.periods" item="period" open="(" separator=" or " close=")">
                u.period = #{period}
            </foreach>
        </if>
        <if test="null != filter.channel">
            and ub.channel = #{filter.channel}
        </if>
        <if test="null != filter.udmUsageOrigin">
            and ub.usage_origin = #{filter.udmUsageOrigin}
        </if>
        <if test="null != filter.detailLicenseeClasses and filter.detailLicenseeClasses.size() > 0">
            and
            <foreach collection="filter.detailLicenseeClasses" item="detailLicenseeClass" open="(" separator=" or " close=")">
                u.detail_licensee_class_id = #{detailLicenseeClass.id}
            </foreach>
        </if>
        <if test="null != filter.aggregateLicenseeClasses and filter.aggregateLicenseeClasses.size() > 0">
            and
            <foreach collection="filter.aggregateLicenseeClasses" item="aggregateLicenseeClass" open="(" separator=" or " close=")">
                dlc.aggregate_licensee_class_id = #{aggregateLicenseeClass.id}
            </foreach>
        </if>
        <if test="null != filter.reportedTypeOfUses and filter.reportedTypeOfUses.size() > 0">
            and
            <foreach collection="filter.reportedTypeOfUses" item="reportedTypeOfUse" open="(" separator=" or " close=")">
                u.reported_type_of_use = #{reportedTypeOfUse}
            </foreach>
        </if>
        <if test="!filter.wrWrkInstExpression.isEmpty()">
            <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                <property name="column" value="u.wr_wrk_inst"/>
                <property name="operator" value="filter.wrWrkInstExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.wrWrkInstExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.wrWrkInstExpression.fieldSecondValue}"/>
            </include>
        </if>
        <if test="!filter.systemTitleExpression.isEmpty()">
            <include refid="IUdmCommonMapper.textFieldFilterExpression">
                <property name="column" value="u.system_title"/>
                <property name="operator" value="filter.systemTitleExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.systemTitleExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.systemTitleExpression.fieldSecondValue}"/>
            </include>
        </if>
        <if test="!filter.usageDetailIdExpression.isEmpty()">
            <include refid="IUdmCommonMapper.textFieldFilterExpression">
                <property name="column" value="u.original_detail_id"/>
                <property name="operator" value="filter.usageDetailIdExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.usageDetailIdExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.usageDetailIdExpression.fieldSecondValue}"/>
            </include>
        </if>
        <if test="!filter.surveyCountryExpression.isEmpty()">
            <include refid="IUdmCommonMapper.textFieldFilterExpression">
                <property name="column" value="u.survey_country"/>
                <property name="operator" value="filter.surveyCountryExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.surveyCountryExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.surveyCountryExpression.fieldSecondValue}"/>
            </include>
        </if>
        <if test="!filter.annualizedCopiesExpression.isEmpty()">
            <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                <property name="column" value="u.annualized_copies"/>
                <property name="operator" value="filter.annualizedCopiesExpression.operator"/>
                <property name="fieldFirstValue" value="${filter.annualizedCopiesExpression.fieldFirstValue}"/>
                <property name="fieldSecondValue" value="${filter.annualizedCopiesExpression.fieldSecondValue}"/>
            </include>
        </if>
    </sql>

    <sql id="udmChooseSortProperty">
        <choose>
            <when test="sort.property == 'detailId'">
                u.df_udm_usage_uid <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'period'">
                u.period <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageOrigin'">
                ub.usage_origin <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'usageDetailId'">
                u.original_detail_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'wrWrkInst'">
                u.wr_wrk_inst <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'systemTitle'">
                u.system_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detLcId'">
                u.detail_licensee_class_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detLcName'">
                dlc.description <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'aggLcId'">
                alc.aggregate_licensee_class_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'aggLcName'">
                alc.description <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'surveyCountry'">
                u.survey_country <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'channel'">
                ub.channel <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedTypeOfUse'">
                u.reported_type_of_use <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'annualizedCopies'">
                u.annualized_copies <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'createDate'">
                u.baseline_created_datetime <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'createUser'">
                u.baseline_created_by_user <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'updateDate'">
                u.updated_datetime <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'updateUser'">
                u.updated_by_user <include refid="IUsageMapper.direction"/>
            </when>
        </choose>
    </sql>

    <sql id="selectDtosByFilterSql">
        select
            df_udm_usage_uid,
            u.period,
            ub.usage_origin,
            u.original_detail_id,
            u.wr_wrk_inst,
            u.system_title,
            u.detail_licensee_class_id,
            dlc.description detail_licensee_class_name,
            alc.aggregate_licensee_class_id,
            alc.description aggregate_licensee_class_name,
            survey_country,
            ub.channel,
            u.reported_type_of_use,
            u.annualized_copies,
            u.df_udm_value_uid,
            u.baseline_created_datetime as created_datetime,
            u.baseline_created_by_user as created_by_user,
            u.updated_datetime,
            u.updated_by_user,
            u.record_version
        from ${schema}.df_udm_usage u
        join ${schema}.df_udm_usage_batch ub on u.df_udm_usage_batch_uid = ub.df_udm_usage_batch_uid
        join ${schema}.df_detail_licensee_class dlc on u.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_aggregate_licensee_class alc on alc.aggregate_licensee_class_id = dlc.aggregate_licensee_class_id
        where is_baseline_flag = true
            <include refid="IUdmBaselineMapper.udmBaselineFilter"/>
        order by
        <choose>
            <when test="null != sort">
                <include refid="IUdmBaselineMapper.udmChooseSortProperty"/>
            </when>
            <otherwise>
                updated_datetime desc
            </otherwise>
        </choose>,
        df_udm_usage_uid
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="selectCountByFilterSql">
        select count(1)
        from ${schema}.df_udm_usage u
        join ${schema}.df_udm_usage_batch ub on u.df_udm_usage_batch_uid = ub.df_udm_usage_batch_uid
        join ${schema}.df_detail_licensee_class dlc on u.detail_licensee_class_id = dlc.detail_licensee_class_id
        join ${schema}.df_aggregate_licensee_class alc on alc.aggregate_licensee_class_id = dlc.aggregate_licensee_class_id
        where is_baseline_flag = true
            <include refid="IUdmBaselineMapper.udmBaselineFilter"/>
    </sql>

    <sql id="selectOldestPeriodWithPositiveAgeWeight">
        last_period_to_select_works as (
            select to_char(to_date(#{period}::text, 'YYYYMM') -
                (((select count(*) from ${schema}.df_udm_age_weight where weight > 0 and period_prior > 0) * 6) || ' months')::INTERVAL, 'YYYYMM')::int as period
        )
    </sql>

    <select id="findDtosByFilter" resultMap="udmBaselineDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="IUdmBaselineMapper.selectDtosByFilterSql"/>
    </select>

    <select id="findCountByFilter" parameterType="map" resultType="int">
        <include refid="IUdmBaselineMapper.selectCountByFilterSql"/>
    </select>

    <select id="findPeriods" resultType="int">
        select distinct period
        from ${schema}.df_udm_usage
        where is_baseline_flag = true
        order by period desc
    </select>

    <select id="findNotPopulatedValuesFromBaseline" resultMap="IUdmValueMapper.udmValueResultMap">
        <!-- Selects works from current period -->
        with current_period_works as (
            select wr_wrk_inst
            from ${schema}.df_udm_value
            where period = #{period}
        ),
        <!-- Selects oldest period with age weight greater than zero -->
        <include refid="IUdmBaselineMapper.selectOldestPeriodWithPositiveAgeWeight"/>
        <!-- The following unique works are included into result:
             1. works that were not populated into value batch for given period
             2. works from previous periods with age weight greater than zero, that were not populated into value batch for any period -->
        select distinct on (u.wr_wrk_inst)
            #{period} as period,
            u.wr_wrk_inst,
            u.system_title,
            u.standard_number
            <!-- TODO: u.standard_number_type -->
        from ${schema}.df_udm_usage u
        left join ${schema}.df_udm_value v on v.wr_wrk_inst = u.wr_wrk_inst
        where u.period between (select period from last_period_to_select_works) and #{period}
            and u.is_baseline_flag = true
            <!-- work is absent in df_udm_value table -->
            and (v.wr_wrk_inst is null
                <!-- work from current period hasn't been populated yet -->
                or (u.period = #{period} and u.wr_wrk_inst not in (select * from current_period_works)))
        order by u.wr_wrk_inst, u.period desc
    </select>

    <select id="populateValueId" parameterType="map" resultType="int">
        with work_to_value_id (wr_wrk_inst, df_udm_value_uid) as (
            values
                <foreach collection="wrWrkInstToValueIdMap" index="wrWrkInst" item="valueId" separator=",">
                    (#{wrWrkInst}, #{valueId})
                </foreach>
        ),
        <!-- Selects oldest period with age weight greater than zero -->
        <include refid="IUdmBaselineMapper.selectOldestPeriodWithPositiveAgeWeight"/>,
        updated_usages_uids as (
            update apps.df_udm_usage u
            set
                df_udm_value_uid = wv.df_udm_value_uid,
                updated_by_user = #{updateUser},
                updated_datetime = now(),
                record_version = u.record_version + 1
            from work_to_value_id wv
            where wv.wr_wrk_inst = u.wr_wrk_inst
                and u.period between (select period from last_period_to_select_works) and #{period}
                and u.df_udm_value_uid is null
                and u.is_baseline_flag is true
            returning df_udm_usage_uid
        )
        select count(*)
        from updated_usages_uids
    </select>

    <update id="removeUdmUsageFromBaselineById" parameterType="string">
        update ${schema}.df_udm_usage
        set
            is_baseline_flag = false,
            baseline_created_by_user = null,
            baseline_created_datetime = null
        where df_udm_usage_uid = #{udmUsageId}
    </update>

    <select id="findWrWrkInstToSystemTitleMap" resultMap="wrWrkInstToSystemTitleMap">
        select
            wr_wrk_inst,
            system_title
        from ${schema}.df_udm_usage
        where is_baseline_flag = true
            and
            <foreach collection="collection" item="period" open="(" separator=" or " close=")">
                period = #{period}
            </foreach>
    </select>
</mapper>
