<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IUsageMapper">

    <resultMap id="undistributedLiabilitiesReportDtoResultMap" type="UndistributedLiabilitiesReportDto">
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="grossAmount" column="usages_gross_amount"/>
        <result property="estimatedServiceFeeAmount" column="estimated_service_fee_amount"/>
        <result property="estimatedNetAmount" column="estimated_net_amount"/>
        <result property="estimatedServiceFee" column="estimated_service_fee"/>
    </resultMap>

    <resultMap id="researchStatusReportDtoResultMap" type="ResearchStatusReportDto">
        <result property="batchName" column="batch_name"/>
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="workNotFoundDetailsCount" column="work_not_found_details_count"/>
        <result property="workNotFoundGrossAmount" column="work_not_found_gross_amount"/>
        <result property="workResearchDetailsCount" column="work_research_details_count"/>
        <result property="workResearchGrossAmount" column="work_research_gross_amount"/>
        <result property="sendForRaDetailsCount" column="send_for_ra_details_count"/>
        <result property="sendForRaGrossAmount" column="send_for_ra_gross_amount"/>
        <result property="rhNotFoundDetailsCount" column="rh_not_found_details_count"/>
        <result property="rhNotFoundGrossAmount" column="rh_not_found_gross_amount"/>
    </resultMap>

    <resultMap id="batchSummaryReportDtoResultMap" type="BatchSummaryReportDto">
        <result property="batchName" column="batch_name"/>
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="nonEligibleDetailsCount" column="non_eligible_details_count"/>
        <result property="nonEligibleDetailsGrossAmount" column="non_eligible_details_gross_amount"/>
        <result property="ntsDetailsCount" column="nts_details_count"/>
        <result property="ntsDetailsGrossAmount" column="nts_details_gross_amount"/>
        <result property="fasAndClaFasEligibleDetailsCount" column="fas_and_cla_fas_eligible_details_count"/>
        <result property="fasAndClaFasEligibleDetailsGrossAmount" column="fas_and_cla_fas_eligible_details_gross_amount"/>
        <result property="scenariosDetailsCount" column="scenarios_details_count"/>
        <result property="scenariosDetailsGrossAmount" column="scenarios_details_gross_amount"/>
        <result property="scenariosDetailsNetAmount" column="scenarios_details_net_amount"/>
        <result property="returnToClaDetailsCount" column="return_to_cla_details_count"/>
        <result property="returnToClaDetailsGrossAmount" column="return_to_cla_details_gross_amount"/>
    </resultMap>

    <resultMap id="usageDtoResultMap" type="UsageDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_usage_uid"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="workTitle" column="work_title"/>
        <result property="systemTitle" column="system_title"/>
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="rhName" column="rh_name"/>
        <result property="status" column="status_ind"/>
        <result property="productFamily" column="product_family"/>
        <result property="article" column="article"/>
        <result property="standardNumber" column="standard_number"/>
        <result property="publisher" column="publisher"/>
        <result property="publicationDate" column="publication_date"/>
        <result property="market" column="market"/>
        <result property="marketPeriodFrom" column="market_period_from"/>
        <result property="marketPeriodTo" column="market_period_to"/>
        <result property="author" column="author"/>
        <result property="numberOfCopies" column="number_of_copies"/>
        <result property="reportedValue" column="reported_value"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="batchGrossAmount" column="batch_gross_amount"/>
        <result property="batchName" column="batch_name"/>
        <result property="scenarioName" column="scenario_name"/>
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="fiscalYear" column="fiscal_year"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="netAmount" column="net_amount"/>
        <result property="serviceFee" column="service_fee"/>
        <result property="payeeAccountNumber" column="payee_account_number"/>
        <result property="payeeName" column="payee_name"/>
        <result property="rhParticipating" column="is_rh_participating_flag"/>
        <result property="checkNumber" column="check_number"/>
        <result property="checkDate" column="check_date"/>
        <result property="cccEventId" column="ccc_event_id"/>
        <result property="distributionName" column="distribution_name"/>
        <result property="distributionDate" column="distribution_date"/>
        <result property="periodEndDate" column="period_end_date"/>
    </resultMap>

    <resultMap id="usageAmountResultMap" type="Usage" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_usage_uid"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="netAmount" column="net_amount"/>
        <result property="serviceFee" column="service_fee"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="reportedValue" column="reported_value"/>
        <result property="status" column="status_ind"/>
        <result property="productFamily" column="product_family"/>
        <result property="rightsholder.id" column="rh_id"/>
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="rightsholder.name" column="rh_name"/>
    </resultMap>

    <resultMap id="rightsholderTotalsHolderResultMap" type="RightsholderTotalsHolder">
        <result property="rightsholder.name" column="rh_name"/>
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="payee.name" column="payee_name"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="grossTotal" column="gross_total"/>
        <result property="serviceFeeTotal" column="service_fee_total"/>
        <result property="netTotal" column="net_total"/>
        <result property="serviceFee" column="service_fee"/>
    </resultMap>

    <resultMap id="usageResultMap" type="Usage" extends="usageAmountResultMap">
        <result property="batchId" column="df_usage_batch_uid"/>
        <result property="scenarioId" column="df_scenario_uid"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="workTitle" column="work_title"/>
        <result property="systemTitle" column="system_title"/>
        <result property="article" column="article"/>
        <result property="standardNumber" column="standard_number"/>
        <result property="publisher" column="publisher"/>
        <result property="publicationDate" column="publication_date"/>
        <result property="market" column="market"/>
        <result property="marketPeriodFrom" column="market_period_from"/>
        <result property="marketPeriodTo" column="market_period_to"/>
        <result property="author" column="author"/>
        <result property="numberOfCopies" column="number_of_copies"/>
        <result property="payee.id" column="payee_id"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="payee.name" column="payee_name"/>
        <result property="rhParticipating" column="is_rh_participating_flag"/>
    </resultMap>

    <sql id="usageColumns">
        df_usage_batch_uid,
        df_scenario_uid,
        wr_wrk_inst,
        work_title,
        system_title,
        rh_account_number,
        status_ind,
        product_family,
        article,
        standard_number,
        publisher,
        publication_date,
        market,
        market_period_from,
        market_period_to,
        author,
        number_of_copies,
        reported_value,
        gross_amount
    </sql>

    <sql id="usageDtoColumns">
        u.df_scenario_uid,
        u.wr_wrk_inst,
        u.work_title,
        u.system_title,
        u.rh_account_number,
        rh.name rh_name,
        u.payee_account_number,
        p.name payee_name,
        u.status_ind,
        u.product_family,
        u.article,
        u.standard_number,
        u.publisher,
        u.publication_date,
        u.market,
        u.market_period_from,
        u.market_period_to,
        u.author,
        u.number_of_copies,
        u.reported_value,
        u.gross_amount,
        u.service_fee_amount,
        u.net_amount,
        u.service_fee,
        ub.gross_amount batch_gross_amount,
        ub.name batch_name,
        ub.rro_account_number,
        rro.name rro_name,
        ub.payment_date,
        ub.fiscal_year,
        u.updated_datetime
    </sql>

    <sql id="selectUsageDtos">
        select
            u.df_usage_uid,
            <include refid="usageDtoColumns"/>
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder rro on rro.rh_account_number = ub.rro_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
    </sql>

    <sql id="usageFilter">
        <where>
            <if test="filter.usageBatchesIds.size() > 0">
                and
                <foreach collection="filter.usageBatchesIds" item="usageBatchId" open="(" separator=" or " close=")">
                    u.df_usage_batch_uid = #{usageBatchId}
                </foreach>
            </if>
            <if test="filter.rhAccountNumbers.size() > 0">
                and
                <foreach collection="filter.rhAccountNumbers" item="rhAccountNumber" open="(" separator=" or " close=")">
                    ub.rro_account_number = #{rhAccountNumber}
                </foreach>
            </if>
            <if test="filter.productFamilies.size() > 0">
                and
                <foreach collection="filter.productFamilies" item="productFamily" open="(" separator=" or " close=")">
                    u.product_family = #{productFamily}
                </foreach>
            </if>
            <if test="null != filter.paymentDate">
                and <![CDATA[ub.payment_date <= #{filter.paymentDate}]]>
            </if>
            <if test="null != filter.usageStatus">
                and u.status_ind = #{filter.usageStatus}
            </if>
            <if test="null != filter.fiscalYear">
                and <![CDATA[ub.fiscal_year <= #{filter.fiscalYear}]]>
            </if>
        </where>
    </sql>

    <sql id="ifPageable">
        <if test="null != pageable">
            limit #{pageable.limit}
            offset #{pageable.offset}
        </if>
    </sql>

    <sql id="direction">
        <choose>
            <when test="sort.direction == 'asc'">
                asc
            </when>
            <otherwise>
                desc
            </otherwise>
        </choose>
    </sql>

    <sql id="chooseSortProperty">
        <choose>
            <when test="sort.property == 'productFamily'">
                u.product_family <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailId'">
                ${detail_uid} <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'batchName'">
                ub.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'fiscalYear'">
                ub.fiscal_year <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rroAccountNumber'">
                ub.rro_account_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rroName'">
                rro.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'paymentDate'">
                ub.payment_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'workTitle'">
                u.work_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'article'">
                u.article <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'standardNumber'">
                u.standard_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'wrWrkInst'">
                u.wr_wrk_inst <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhAccountNumber'">
                u.rh_account_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhName'">
                rh.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'publisher'">
                u.publisher <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'publicationDate'">
                u.publication_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'numberOfCopies'">
                u.number_of_copies <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedValue'">
                u.reported_value <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'grossAmount'">
                u.gross_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'batchGrossAmount'">
                ub.gross_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'serviceFeeAmount'">
                u.service_fee_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'netAmount'">
                u.net_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'serviceFee'">
                u.service_fee <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'market'">
                u.market <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'marketPeriodFrom'">
                u.market_period_from <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'marketPeriodTo'">
                u.market_period_to <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'author'">
                u.author <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'status'">
                u.status_ind <include refid="IUsageMapper.direction"/>
            </when>
        </choose>
    </sql>

    <sql id="rightsholderTotalHoldersOrderBy">
        order by
        <choose>
            <when test="null != sort">
                <choose>
                    <when test="sort.property == 'rightsholder.name'">
                        r.name <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'rightsholder.accountNumber'">
                        u.rh_account_number <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'payee.name'">
                        p.name <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'payee.accountNumber'">
                        p.rh_account_number <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'grossTotal'">
                        u.gross_total <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'serviceFeeTotal'">
                        u.service_fee_total <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'serviceFee'">
                        u.service_fee <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'netTotal'">
                        u.net_total <include refid="IUsageMapper.direction"/>
                    </when>
                </choose>
            </when>
            <otherwise>
                r.name asc
            </otherwise>
        </choose>
    </sql>

    <sql id="searchWhereClause">
        upper(r.name) like '%' || upper(#{searchValue}) || '%' or
        cast(u.rh_account_number as text) like '%' || #{searchValue} || '%'
    </sql>

    <sql id="drillDownSearchWhereClause">
        ${detail_uid} like '%' || #{searchValue} || '%' or
        upper(u.standard_number) like '%' || upper(#{searchValue}) || '%' or
        cast(u.wr_wrk_inst as text) like '%' || #{searchValue} || '%' or
        upper(rro.name) like '%' || upper(#{searchValue}) || '%' or
        cast(ub.rro_account_number as text) like '%' || #{searchValue} || '%'
    </sql>

    <sql id="deleteFromScenarioSql">
        update
            ${schema}.df_usage
        set
            status_ind = #{status},
            df_scenario_uid = null,
            payee_account_number = null,
            service_fee = null,
            is_rh_participating_flag = false,
            service_fee_amount = 0,
            net_amount = 0,
            <include refid="StoredEntityMapper.update"/>
    </sql>

    <insert id="insert" parameterType="Usage">
        insert into ${schema}.df_usage(
            df_usage_uid,
            <include refid="usageColumns"/>,
            payee_account_number,
            <include refid="StoredEntityMapper.additionalColumns"/>)
        values(
            #{id},
            #{batchId},
            #{scenarioId},
            #{wrWrkInst},
            #{workTitle},
            #{systemTitle},
            #{rightsholder.accountNumber},
            #{status},
            #{productFamily},
            #{article},
            #{standardNumber},
            #{publisher},
            #{publicationDate},
            #{market},
            #{marketPeriodFrom},
            #{marketPeriodTo},
            #{author},
            #{numberOfCopies},
            #{reportedValue},
            #{grossAmount},
            #{payee.accountNumber},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <select id="findByFilter" resultMap="usageDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="selectUsageDtos"/>
        <include refid="usageFilter"/>
        and u.df_scenario_uid is null
        order by
        <choose>
            <when test="null != sort">
                <include refid="chooseSortProperty">
                    <property name="detail_uid" value="u.df_usage_uid"/>
                </include>
            </when>
            <otherwise>
                updated_datetime desc
            </otherwise>
        </choose>
        <include refid="ifPageable"/>
    </select>

    <select id="findCountByScenarioId" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage u
        where df_scenario_uid = #{scenarioId}
    </select>

    <select id="findByScenarioId" resultMap="usageResultMap" parameterType="string">
        select
            u.df_usage_uid,
            u.df_usage_batch_uid,
            u.df_scenario_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.rh_account_number,
            rh.name rh_name,
            u.status_ind,
            u.product_family,
            u.article,
            u.standard_number,
            u.publisher,
            u.publication_date,
            u.market,
            u.market_period_from,
            u.market_period_to,
            u.author,
            u.number_of_copies,
            u.reported_value,
            u.gross_amount,
            u.service_fee,
            u.service_fee_amount,
            u.net_amount,
            u.payee_account_number,
            p.name payee_name,
            u.is_rh_participating_flag
        from ${schema}.df_usage u
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where df_scenario_uid = #{scenarioId}
    </select>

    <select id="findForReconcile" resultMap="usageResultMap" parameterType="string">
        select
            u.df_usage_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.rh_account_number,
            rh.name rh_name,
            u.payee_account_number,
            p.name payee_name,
            u.product_family,
            u.status_ind,
            u.gross_amount
        from ${schema}.df_usage u
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where df_scenario_uid = #{scenarioId}
    </select>

    <select id="findRightsholdersInformation" resultMap="usageResultMap" parameterType="string">
        select distinct
            u.rh_account_number,
            rh.df_rightsholder_uid rh_id,
            u.payee_account_number,
            u.is_rh_participating_flag
        from ${schema}.df_usage u
        join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where df_scenario_uid = #{scenarioId}
    </select>

    <select id="findDtoByScenarioId" resultMap="usageDtoResultMap">
        <include refid="selectUsageDtos"/>
        where df_scenario_uid = #{scenarioId}
        order by u.rh_account_number
        <include refid="ifPageable"/>
    </select>

    <select id="findCountByFilter" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder rro on rro.rh_account_number = ub.rro_account_number
        <include refid="usageFilter"/>
        and u.df_scenario_uid is null
    </select>

    <select id="findById" resultMap="usageResultMap" parameterType="string">
        select
            u.df_usage_uid,
            u.df_usage_batch_uid,
            u.df_scenario_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.rh_account_number,
            r.name rh_name,
            r.df_rightsholder_uid rh_id,
            u.payee_account_number,
            p.name payee_name,
            p.df_rightsholder_uid payee_id,
            u.status_ind,
            u.product_family,
            u.article,
            u.standard_number,
            u.publisher,
            u.publication_date,
            u.market,
            u.market_period_from,
            u.market_period_to,
            u.author,
            u.number_of_copies,
            u.reported_value,
            u.gross_amount,
            u.service_fee_amount,
            u.service_fee,
            u.net_amount,
            u.is_rh_participating_flag,
            u.created_datetime,
            u.updated_datetime,
            u.created_by_user,
            u.updated_by_user,
            u.record_version
        from ${schema}.df_usage u
        left join ${schema}.df_rightsholder r on r.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where u.df_usage_uid = #{usageId}
    </select>

    <delete id="deleteUsages" parameterType="string">
        delete from ${schema}.df_usage
        where df_usage_batch_uid = #{batchId}
    </delete>

    <delete id="deleteByScenarioId" parameterType="string">
        delete from ${schema}.df_usage
        where df_scenario_uid = #{scenarioId}
    </delete>

    <select id="findWithAmountsAndRightsholders" parameterType="map" resultMap="usageAmountResultMap">
        select
            u.df_usage_uid,
            u.gross_amount,
            u.net_amount,
            u.service_fee,
            u.service_fee_amount,
            u.reported_value,
            u.service_fee,
            u.created_datetime,
            u.updated_datetime,
            u.created_by_user,
            u.updated_by_user,
            u.record_version,
            u.status_ind,
            u.product_family,
            r.df_rightsholder_uid rh_id,
            u.rh_account_number,
            r.name rh_name
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        <include refid="usageFilter"/>
        and u.status_ind = #{status}
    </select>

    <select id="findInvalidRightsholdersByFilter" parameterType="map" resultType="long">
        select distinct
            u.rh_account_number
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        <include refid="usageFilter"/>
            and r.df_rightsholder_uid is null
    </select>

    <update id="addToScenario" parameterType="Usage">
        update
            ${schema}.df_usage
        set
            status_ind = #{status},
            df_scenario_uid = #{scenarioId},
            payee_account_number = #{payee.accountNumber},
            net_amount = #{netAmount},
            service_fee_amount = #{serviceFeeAmount},
            service_fee = #{serviceFee},
            is_rh_participating_flag = #{rhParticipating},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid = #{id}
    </update>

    <update id="deleteFromScenario" parameterType="map">
        <include refid="deleteFromScenarioSql"/>
        where df_scenario_uid = #{scenarioId}
    </update>

    <update id="deleteFromScenarioByUsageId" parameterType="map">
        <include refid="deleteFromScenarioSql"/>
        where df_usage_uid = #{usageId}
    </update>

    <select id="findCountByUsageIdAndStatus" parameterType="map" resultType="int">
        select count(1)
            from (
                select df_usage_uid
                from ${schema}.df_usage
                where df_usage_uid = #{usageId}
                    and status_ind = #{status}
            union
                select df_usage_archive_uid
                from ${schema}.df_usage_archive
                where df_usage_archive_uid = #{usageId}
                    and status_ind = #{status}
            ) as usage_uid;
    </select>

    <select id="findRightsholderTotalsHoldersByScenarioId" parameterType="map" resultMap="rightsholderTotalsHolderResultMap">
        select
            r.name rh_name,
            u.rh_account_number,
            p.name payee_name,
            u.payee_account_number,
            u.gross_total,
            u.service_fee_total,
            u.net_total,
            u.service_fee
        from (
            select
                rh_account_number,
                payee_account_number,
                sum(gross_amount) gross_total,
                sum(service_fee_amount) service_fee_total,
                sum(net_amount) net_total,
                service_fee
            from ${schema}.df_usage
            where df_scenario_uid = #{scenarioId}
            group by rh_account_number, payee_account_number, service_fee) u
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        left join ${schema}.df_rightsholder p on u.payee_account_number = p.rh_account_number
        <if test="null != searchValue">
            where <include refid="searchWhereClause"/>
        </if>
        <include refid="rightsholderTotalHoldersOrderBy"/>
        <if test="null != pageable">
            limit #{pageable.limit}
            offset #{pageable.offset}
        </if>
    </select>

    <select id="findRightsholderTotalsHolderCountByScenarioId" parameterType="map" resultType="int">
        select count(1)
        from (
            select distinct rh_account_number
            from ${schema}.df_usage
            where df_scenario_uid = #{scenarioId}) u
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        <if test="null != searchValue">
            where <include refid="searchWhereClause"/>
        </if>
    </select>

    <select id="isScenarioEmpty" parameterType="string" resultType="boolean">
        select not exists (
            select
            from ${schema}.df_usage
            where df_scenario_uid = #{scenarioId}
        )
    </select>

    <select id="findCountByScenarioIdAndRhAccountNumber" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rro on ub.rro_account_number = rro.rh_account_number
        where df_scenario_uid = #{scenarioId} and u.rh_account_number = #{accountNumber}
        <if test="null != searchValue">
            and (
                <include refid="drillDownSearchWhereClause">
                    <property name="detail_uid" value="u.df_usage_uid"/>
                </include>
            )
        </if>
    </select>

    <select id="findByScenarioIdAndRhAccountNumber" parameterType="map" resultMap="usageDtoResultMap">
        <include refid="selectUsageDtos"/>
        where u.df_scenario_uid = #{scenarioId} and u.rh_account_number = #{accountNumber}
        <if test="null != searchValue">
            and (
                <include refid="drillDownSearchWhereClause">
                    <property name="detail_uid" value="u.df_usage_uid"/>
                </include>
            )
        </if>
        order by
        <choose>
            <when test="null != sort">
                <include refid="chooseSortProperty">
                    <property name="detail_uid" value="u.df_usage_uid"/>
                </include>
            </when>
            <otherwise>
                df_usage_uid
            </otherwise>
        </choose>
        <include refid="ifPageable"/>
    </select>

    <select id="findIdsByScenarioIdRroAccountNumberRhAccountNumbers" resultType="string" parameterType="map">
        select df_usage_uid
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch b on u.df_usage_batch_uid = b.df_usage_batch_uid
        where u.df_scenario_uid = #{scenarioId}
            and b.rro_account_number = #{rroAccountNumber}
            and u.rh_account_number in
            <foreach collection="accountNumbers" item="accountNumber" separator="," open="(" close=")">
                #{accountNumber}
            </foreach>
    </select>

    <sql id="selectArchivedCountForAuditSql">
        (select count(1) usage_count
        from ${schema}.df_usage_archive u
        join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
        <include refid="archivedAuditFilterWhereClause"/>)
    </sql>

    <select id="findCountForAudit" resultType="int" parameterType="map">
        select
        <choose>
            <when test="null != filter.cccEventId || null != filter.distributionName">
                 <include refid="selectArchivedCountForAuditSql"/>
            </when>
            <otherwise>
                (select count(1) usage_count
                from ${schema}.df_usage u
                join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
                left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
                <where>
                    <include refid="commonAuditFilterWhereClause">
                        <property name="detail_uid" value="u.df_usage_uid"/>
                    </include>
                </where>) +
                <include refid="selectArchivedCountForAuditSql"/>
            </otherwise>
        </choose>
    </select>

    <select id="findForAudit" resultMap="usageDtoResultMap" parameterType="map">
        <choose>
            <when test="null != filter.cccEventId || null != filter.distributionName">
                <include refid="selectArchivedUsagesForAuditSql"/>
            </when>
            <otherwise>
                select
                    u.df_usage_uid,
                    u.status_ind,
                    u.product_family,
                    u.df_usage_batch_uid,
                    ub.name batch_name,
                    ub.payment_date,
                    u.rh_account_number,
                    rh.name rh_name,
                    u.payee_account_number,
                    payee.name payee_name,
                    wr_wrk_inst,
                    work_title,
                    system_title,
                    standard_number,
                    u.gross_amount,
                    service_fee,
                    u.updated_datetime,
                    s.name scenario_name,
                    null check_number,
                    null check_date,
                    null ccc_event_id,
                    null distribution_name,
                    null distribution_date,
                    null period_end_date
                from ${schema}.df_usage u
                join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
                left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
                left join ${schema}.df_rightsholder payee on payee.rh_account_number = u.payee_account_number
                left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
                <where>
                    <include refid="commonAuditFilterWhereClause">
                        <property name="detail_uid" value="u.df_usage_uid"/>
                    </include>
                </where>
                union
                <include refid="selectArchivedUsagesForAuditSql"/>
            </otherwise>
        </choose>
        order by
        <choose>
            <when test="null != sort">
                <choose>
                    <when test="sort.property == 'productFamily'">
                        product_family
                    </when>
                    <when test="sort.property == 'detailId'">
                        df_usage_uid
                    </when>
                    <when test="sort.property == 'status'">
                        status_ind
                    </when>
                    <when test="sort.property == 'batchName'">
                        batch_name
                    </when>
                    <when test="sort.property == 'paymentDate'">
                        payment_date
                    </when>
                    <when test="sort.property == 'rhAccountNumber'">
                        rh_account_number
                    </when>
                    <when test="sort.property == 'rhName'">
                        rh_name
                    </when>
                    <when test="sort.property == 'payeeAccountNumber'">
                        payee_account_number
                    </when>
                    <when test="sort.property == 'payeeName'">
                        payee_name
                    </when>
                    <when test="sort.property == 'wrWrkInst'">
                        wr_wrk_inst
                    </when>
                    <when test="sort.property == 'workTitle'">
                        work_title
                    </when>
                    <when test="sort.property == 'standardNumber'">
                        standard_number
                    </when>
                    <when test="sort.property == 'grossAmount'">
                        gross_amount
                    </when>
                    <when test="sort.property == 'serviceFee'">
                        service_fee
                    </when>
                    <when test="sort.property == 'scenarioName'">
                        scenario_name
                    </when>
                    <when test="sort.property == 'checkNumber'">
                        check_number
                    </when>
                    <when test="sort.property == 'checkDate'">
                        check_date
                    </when>
                    <when test="sort.property == 'cccEventId'">
                        ccc_event_id
                    </when>
                    <when test="sort.property == 'distributionName'">
                        distribution_name
                    </when>
                    <when test="sort.property == 'distributionDate'">
                        distribution_date
                    </when>
                    <when test="sort.property == 'periodEndDate'">
                        period_end_date
                    </when>
                </choose>
                <include refid="IUsageMapper.direction"/>
            </when>
            <otherwise>
                df_usage_uid asc
            </otherwise>
        </choose>
        <include refid="ifPageable"/>
    </select>

    <sql id="selectArchivedUsagesForAuditSql">
        select
            df_usage_archive_uid df_usage_uid,
            u.status_ind,
            u.product_family,
            u.df_usage_batch_uid,
            ub.name batch_name,
            ub.payment_date,
            u.rh_account_number,
            rh.name rh_name,
            u.payee_account_number,
            payee.name payee_name,
            wr_wrk_inst,
            work_title,
            system_title,
            standard_number,
            u.gross_amount,
            service_fee,
            u.updated_datetime,
            s.name scenario_name,
            u.check_number,
            u.check_date,
            u.ccc_event_id,
            u.distribution_name,
            u.distribution_date,
            u.period_end_date
        from ${schema}.df_usage_archive u
        join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder payee on payee.rh_account_number = u.payee_account_number
        left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
        <include refid="archivedAuditFilterWhereClause"/>
    </sql>

    <sql id="archivedAuditFilterWhereClause">
        <where>
            <include refid="commonAuditFilterWhereClause">
                <property name="detail_uid" value="u.df_usage_archive_uid"/>
            </include>
            <if test="null != filter.cccEventId">
                and upper(ccc_event_id) like '%' || upper(#{filter.cccEventId}) || '%'
            </if>
            <if test="null != filter.distributionName">
                and upper(distribution_name) like '%' || upper(#{filter.distributionName}) || '%'
            </if>
        </where>
    </sql>

    <sql id="commonAuditFilterWhereClause">
        <if test="!filter.rhAccountNumbers.isEmpty()">
            u.rh_account_number in
            <foreach collection="filter.rhAccountNumbers" item="accountNumber" separator="," open="(" close=")">
                #{accountNumber}
            </foreach>
        </if>
        <if test="!filter.batchesIds.isEmpty()">
            and ub.df_usage_batch_uid in
            <foreach collection="filter.batchesIds" item="batchId" separator="," open="(" close=")">
                #{batchId}
            </foreach>
        </if>
        <if test="!filter.statuses.isEmpty()">
            and u.status_ind in
            <foreach collection="filter.statuses" item="status" separator="," open="(" close=")">
                #{status}
            </foreach>
        </if>
        <if test="!filter.productFamilies.isEmpty()">
            and u.product_family in
            <foreach collection="filter.productFamilies" item="productFamily" open="(" separator="," close=")">
                #{productFamily}
            </foreach>
        </if>
        <if test="null != filter.searchValue">
            and (
                ${detail_uid} like '%' || #{filter.searchValue} || '%' or
                cast(wr_wrk_inst as text) like '%' || #{filter.searchValue} || '%' or
                upper(work_title) like '%' || upper(#{filter.searchValue}) || '%')
        </if>
    </sql>

    <select id="findByStatuses" resultMap="usageResultMap">
        select
            df_usage_uid,
            <include refid="usageColumns"/>
        from ${schema}.df_usage
        where
            status_ind in
            <foreach collection="array" item="status" open="(" separator="," close=")">
                #{status}
            </foreach>
    </select>

    <update id="updateStatus" parameterType="map">
        update ${schema}.df_usage
        set status_ind = #{status},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid = #{usageId}
    </update>

    <update id="updateStatusAndRhAccountNumber" parameterType="map">
        update ${schema}.df_usage
        set
            status_ind = #{status},
            rh_account_number = #{rhAccountNumber},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid in
            <foreach collection="usageIds" item="usageId" open="(" separator="," close=")">
                #{usageId}
            </foreach>
    </update>

    <select id="findStandardNumbersCount" resultType="int">
        select count(1)
        from (
            select distinct
                standard_number,
                work_title
            from ${schema}.df_usage
            where standard_number is not null
                and status_ind = #{status}) standardNumbers
    </select>

    <select id="findTitlesCount" resultType="int">
        select count(1)
        from (
            select distinct
                work_title
            from ${schema}.df_usage
            where standard_number is null
                and work_title is not null
                and status_ind = #{status}) titles
    </select>

    <select id="findWithStandardNumber" resultMap="usageResultMap" parameterType="map">
        select distinct
            standard_number,
            work_title,
            system_title,
            status_ind
        from ${schema}.df_usage
        where standard_number is not null
            and status_ind = #{status}
        order by standard_number
        limit #{limit}
        offset #{offset}
    </select>

    <select id="findWithTitle" resultMap="usageResultMap" parameterType="map">
        select distinct
            work_title,
            system_title,
            status_ind
        from ${schema}.df_usage
        where standard_number is null
            and work_title is not null
            and status_ind = #{status}
        order by work_title
        limit #{limit}
        offset #{offset}
    </select>

    <select id="findByStandardNumberAndStatus" resultMap="usageResultMap" parameterType="map">
        select
            df_usage_uid,
            <include refid="usageColumns"/>
        from ${schema}.df_usage
        where status_ind = #{status}
            and standard_number = #{standardNumber}
    </select>

    <select id="findByStandardNumberTitleAndStatus" resultMap="usageResultMap" parameterType="map">
        select
            df_usage_uid,
            <include refid="usageColumns"/>
        from ${schema}.df_usage
        where status_ind = #{status}
            and standard_number = #{standardNumber}
            <if test="null == workTitle">
                and work_title is null
            </if>
            <if test="null != workTitle">
                and work_title = #{workTitle}
            </if>
    </select>

    <select id="findByTitleAndStatus" resultMap="usageResultMap" parameterType="map">
        select
            df_usage_uid,
            <include refid="usageColumns"/>
        from ${schema}.df_usage
        where work_title = #{workTitle}
            and standard_number is null
            and status_ind = #{status}
    </select>

    <select id="findWithoutStandardNumberAndTitle" resultMap="usageResultMap">
        select
            df_usage_uid,
            <include refid="usageColumns"/>
        from ${schema}.df_usage
        where standard_number is null
            and work_title is null
            and status_ind = #{status}
    </select>

    <update id="update" parameterType="Usage">
        update ${schema}.df_usage
        set
            status_ind = #{status},
            wr_wrk_inst = #{wrWrkInst},
            product_family = #{productFamily},
            work_title = #{workTitle},
            system_title = #{systemTitle},
            rh_account_number = #{rightsholder.accountNumber},
            payee_account_number = #{payee.accountNumber},
            net_amount = #{netAmount},
            service_fee_amount = #{serviceFeeAmount},
            service_fee = #{serviceFee},
            is_rh_participating_flag = #{rhParticipating},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid = #{id}
    </update>

    <update id="updateStatusAndWrWrkInstByStandardNumberAndTitle" parameterType="map">
        update ${schema}.df_usage
        set
            status_ind = #{usage.status},
            wr_wrk_inst = #{usage.wrWrkInst},
            system_title = #{usage.systemTitle},
            <include refid="StoredEntityMapper.update"/>
        where standard_number = #{usage.standardNumber}
            and status_ind = #{status}
            <if test="null == usage.workTitle">
                and work_title is null
            </if>
            <if test="null != usage.workTitle">
                and work_title = #{usage.workTitle}
            </if>
    </update>

    <update id="updateStatusAndWrWrkInstByTitle" parameterType="map">
        update ${schema}.df_usage
        set
            status_ind = #{usage.status},
            wr_wrk_inst = #{usage.wrWrkInst},
            system_title = #{usage.systemTitle},
            <include refid="StoredEntityMapper.update"/>
        where standard_number is null
            and work_title = #{usage.workTitle}
            and status_ind = #{status}
    </update>

    <update id="updateToNtsEligible" parameterType="map">
        update ${schema}.df_usage
        set
            status_ind = #{status},
            product_family = #{productFamily},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid = #{usageId}
    </update>

    <update id="updateResearchedUsage" parameterType="map">
        update ${schema}.df_usage
        set
            system_title = #{usage.systemTitle},
            wr_wrk_inst = #{usage.wrWrkInst},
            status_ind = #{status},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid = #{usage.usageId}
    </update>

    <select id="findUndistributedLiabilitiesReportDtos" parameterType="map" resultMap="undistributedLiabilitiesReportDtoResultMap">
        select
            reportInfo.rro_account_number,
            rh.name rro_name,
            reportInfo.payment_date,
            reportInfo.usages_gross_amount,
            reportInfo.usages_gross_amount * reportInfo.estimated_service_fee estimated_service_fee_amount,
            reportInfo.usages_gross_amount - (reportInfo.usages_gross_amount * reportInfo.estimated_service_fee) estimated_net_amount,
            reportInfo.estimated_service_fee
        from
            (select
                batch.rro_account_number,
                batch.payment_date,
                coalesce(sum(u.gross_amount), 0) usages_gross_amount,
                coalesce(fee.estimated_service_fee, 0.00000) estimated_service_fee
            from apps.df_usage_batch batch
            left join apps.df_rro_estimated_service_fee_percentage fee on fee.rro_account_number = batch.rro_account_number
            left join apps.df_usage u on u.df_usage_batch_uid = batch.df_usage_batch_uid
            where <![CDATA[batch.payment_date <= #{paymentDate}]]>
            group by payment_date, batch.rro_account_number, fee.estimated_service_fee) as reportInfo
        left join apps.df_rightsholder rh on rh.rh_account_number = reportInfo.rro_account_number
        where reportInfo.usages_gross_amount != 0
        order by reportInfo.rro_account_number, reportInfo.payment_date
    </select>

    <select id="findResearchStatusReportDtos" resultMap="researchStatusReportDtoResultMap">
        select
            batch_name,
            rro_account_number,
            rro_name,
            payment_date,
            work_not_found_details_count,
            work_not_found_gross_amount,
            work_research_details_count,
            work_research_gross_amount,
            send_for_ra_details_count,
            send_for_ra_gross_amount,
            rh_not_found_details_count,
            rh_not_found_gross_amount
        from ${schema}.v_research_status_report
    </select>

    <select id="findBatchSummaryReportDtos" resultMap="batchSummaryReportDtoResultMap">
        select
            batch_name,
            rro_account_number,
            rro_name,
            payment_date,
            gross_amount,
            non_eligible_details_count,
            non_eligible_details_gross_amount,
            nts_details_count,
            nts_details_gross_amount,
            fas_and_cla_fas_eligible_details_count,
            fas_and_cla_fas_eligible_details_gross_amount,
            scenarios_details_count,
            scenarios_details_gross_amount,
            scenarios_details_net_amount,
            return_to_cla_details_count,
            return_to_cla_details_gross_amount
        from ${schema}.v_batch_summary_report
    </select>
</mapper>
