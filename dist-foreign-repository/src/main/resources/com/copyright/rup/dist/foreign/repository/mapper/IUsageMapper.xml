<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IUsageMapper">

    <resultMap id="usageDtoResultMap" type="UsageDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_usage_uid"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="workTitle" column="work_title"/>
        <result property="systemTitle" column="system_title"/>
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="rhName" column="rh_name"/>
        <result property="status" column="status_ind"/>
        <result property="productFamily" column="product_family"/>
        <result property="article" column="article"/>
        <result property="standardNumber" column="standard_number"/>
        <result property="standardNumberType" column="standard_number_type"/>
        <result property="publisher" column="publisher"/>
        <result property="publicationDate" column="publication_date"/>
        <result property="market" column="market"/>
        <result property="marketPeriodFrom" column="market_period_from"/>
        <result property="marketPeriodTo" column="market_period_to"/>
        <result property="author" column="author"/>
        <result property="numberOfCopies" column="number_of_copies"/>
        <result property="reportedValue" column="reported_value"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="batchGrossAmount" column="batch_gross_amount"/>
        <result property="batchName" column="batch_name"/>
        <result property="scenarioName" column="scenario_name"/>
        <result property="rroAccountNumber" column="rro_account_number"/>
        <result property="rroName" column="rro_name"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="fiscalYear" column="fiscal_year"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="netAmount" column="net_amount"/>
        <result property="serviceFee" column="service_fee"/>
        <result property="payeeAccountNumber" column="payee_account_number"/>
        <result property="payeeName" column="payee_name"/>
        <result property="rhParticipating" column="is_rh_participating_flag"/>
        <result property="checkNumber" column="check_number"/>
        <result property="checkDate" column="check_date"/>
        <result property="cccEventId" column="ccc_event_id"/>
        <result property="distributionName" column="distribution_name"/>
        <result property="distributionDate" column="distribution_date"/>
        <result property="periodEndDate" column="period_end_date"/>
        <result property="comment" column="comment"/>
        <result property="aaclUsage.institution" column="institution"/>
        <result property="aaclUsage.usagePeriod" column="usage_period"/>
        <result property="aaclUsage.usageSource" column="usage_source"/>
        <result property="aaclUsage.numberOfPages" column="number_of_pages"/>
        <result property="aaclUsage.rightLimitation" column="right_limitation"/>
        <result property="aaclUsage.batchPeriodEndDate" column="batch_period_end_date"/>
    </resultMap>

    <resultMap id="usageAmountResultMap" type="Usage" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_usage_uid"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="netAmount" column="net_amount"/>
        <result property="serviceFee" column="service_fee"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="reportedValue" column="reported_value"/>
        <result property="status" column="status_ind"/>
        <result property="productFamily" column="product_family"/>
        <result property="rightsholder.id" column="rh_id"/>
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="rightsholder.name" column="rh_name"/>
    </resultMap>

    <resultMap id="rightsholderTotalsHolderResultMap" type="RightsholderTotalsHolder">
        <result property="rightsholder.name" column="rh_name"/>
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="payee.name" column="payee_name"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="grossTotal" column="gross_total"/>
        <result property="serviceFeeTotal" column="service_fee_total"/>
        <result property="netTotal" column="net_total"/>
        <result property="serviceFee" column="service_fee"/>
    </resultMap>

    <resultMap id="usageResultMap" type="Usage" extends="usageAmountResultMap">
        <result property="batchId" column="df_usage_batch_uid"/>
        <result property="scenarioId" column="df_scenario_uid"/>
        <result property="fundPoolId" column="df_fund_pool_uid"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="workTitle" column="work_title"/>
        <result property="systemTitle" column="system_title"/>
        <result property="article" column="article"/>
        <result property="standardNumber" column="standard_number"/>
        <result property="standardNumberType" column="standard_number_type"/>
        <result property="publisher" column="publisher"/>
        <result property="publicationDate" column="publication_date"/>
        <result property="market" column="market"/>
        <result property="marketPeriodFrom" column="market_period_from"/>
        <result property="marketPeriodTo" column="market_period_to"/>
        <result property="author" column="author"/>
        <result property="numberOfCopies" column="number_of_copies"/>
        <result property="payee.id" column="payee_id"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="payee.name" column="payee_name"/>
        <result property="rhParticipating" column="is_rh_participating_flag"/>
        <result property="payeeParticipating" column="is_payee_participating_flag"/>
        <result property="comment" column="comment"/>
        <result property="aaclUsage.institution" column="institution"/>
        <result property="aaclUsage.usageAge.period" column="usage_period"/>
        <result property="aaclUsage.usageSource" column="usage_source"/>
        <result property="aaclUsage.numberOfPages" column="number_of_pages"/>
        <result property="aaclUsage.rightLimitation" column="right_limitation"/>
        <result property="aaclUsage.batchPeriodEndDate" column="batch_period_end_date"/>
    </resultMap>

    <resultMap id="wrWrkInstToUsageIdResultMap" type="WrWrkInstUsageIdPair">
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="usageId" column="df_usage_uid"/>
    </resultMap>

    <resultMap id="payeeTotalHolderResultMap" type="PayeeTotalHolder">
        <result property="payee.name" column="payee_name"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="grossTotal" column="gross_total"/>
        <result property="serviceFeeTotal" column="service_fee_total"/>
        <result property="netTotal" column="net_total"/>
        <result property="payeeParticipating" column="is_payee_participating_flag"/>
    </resultMap>

    <resultMap id="rightsholderPayeeProductFamilyHolderResultMap" type="RightsholderPayeeProductFamilyHolder">
        <result property="rightsholder.id" column="rh_uid"/>
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="rightsholder.name" column="rh_name"/>
        <result property="payee.id" column="payee_uid"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="payee.name" column="payee_name"/>
        <result property="productFamily" column="product_family"/>
    </resultMap>

    <sql id="usageColumns">
        df_usage_batch_uid,
        df_scenario_uid,
        wr_wrk_inst,
        work_title,
        system_title,
        rh_account_number,
        status_ind,
        product_family,
        standard_number,
        standard_number_type,
        number_of_copies,
        gross_amount,
        comment
    </sql>

    <sql id="usageDtoColumns">
        u.df_scenario_uid,
        u.wr_wrk_inst,
        u.work_title,
        u.system_title,
        u.rh_account_number,
        rh.name rh_name,
        u.payee_account_number,
        p.name payee_name,
        u.status_ind,
        u.product_family,
        u.standard_number,
        u.standard_number_type,
        u.number_of_copies,
        u.gross_amount,
        u.service_fee_amount,
        u.net_amount,
        u.service_fee,
        ub.gross_amount batch_gross_amount,
        ub.name batch_name,
        ub.rro_account_number,
        rro.name rro_name,
        ub.payment_date,
        ub.fiscal_year,
        u.updated_datetime,
        u.comment,
        ufas.article,
        ufas.author,
        ufas.publisher,
        ufas.publication_date,
        ufas.market,
        ufas.market_period_from,
        ufas.market_period_to,
        ufas.reported_value
    </sql>

    <sql id="selectUsageDtos">
        select
            u.df_usage_uid,
            <include refid="IUsageMapper.usageDtoColumns"/>
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder rro on rro.rh_account_number = ub.rro_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
    </sql>

    <sql id="scenarioBatchesFilter">
        df_usage_batch_uid in (
            select filter_to_batch_map.df_usage_batch_uid
            from ${schema}.df_scenario_usage_filter usage_filter
            left join ${schema}.df_scenario_usage_filter_to_usage_batches_ids_map filter_to_batch_map
                on usage_filter.df_scenario_usage_filter_uid = filter_to_batch_map.df_scenario_usage_filter_uid
            where usage_filter.df_scenario_uid = #{scenarioId}
        )
    </sql>

    <sql id="usageFilter">
        <where>
            <if test="filter.usageBatchesIds.size() > 0">
                and
                <foreach collection="filter.usageBatchesIds" item="usageBatchId" open="(" separator=" or " close=")">
                    u.df_usage_batch_uid = #{usageBatchId}
                </foreach>
            </if>
            <if test="filter.rhAccountNumbers.size() > 0">
                and
                <foreach collection="filter.rhAccountNumbers" item="rhAccountNumber" open="(" separator=" or " close=")">
                    ub.rro_account_number = #{rhAccountNumber}
                </foreach>
            </if>
            <if test="null != filter.productFamily">
                and u.product_family = #{filter.productFamily}
            </if>
            <if test="null != filter.paymentDate">
                and <![CDATA[ub.payment_date <= #{filter.paymentDate}]]>
            </if>
            <if test="null != filter.usageStatus">
                and u.status_ind = #{filter.usageStatus}
            </if>
            <if test="null != filter.fiscalYear">
                and <![CDATA[ub.fiscal_year <= #{filter.fiscalYear}]]>
            </if>
        </where>
    </sql>

    <sql id="ifPageable">
        <if test="null != pageable">
            limit #{pageable.limit}
            offset #{pageable.offset}
        </if>
    </sql>

    <sql id="direction">
        <choose>
            <when test="sort.direction == 'asc'">
                asc
            </when>
            <otherwise>
                desc
            </otherwise>
        </choose>
    </sql>

    <sql id="ifSortable">
        order by
        <choose>
            <when test="null != sort">
                <include refid="IUsageMapper.chooseSortProperty">
                    <property name="detail_uid" value="u.df_usage_uid"/>
                </include>
            </when>
            <otherwise>
                updated_datetime desc
            </otherwise>
        </choose>,
        df_usage_uid
    </sql>

    <sql id="chooseSortProperty">
        <choose>
            <when test="sort.property == 'productFamily'">
                u.product_family <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailId'">
                ${detail_uid} <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'batchName'">
                ub.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'fiscalYear'">
                ub.fiscal_year <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rroAccountNumber'">
                ub.rro_account_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rroName'">
                rro.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'paymentDate'">
                ub.payment_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'workTitle'">
                u.work_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'article'">
                ufas.article <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'standardNumber'">
                u.standard_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'standardNumberType'">
                u.standard_number_type <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'wrWrkInst'">
                u.wr_wrk_inst <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'systemTitle'">
                u.system_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhAccountNumber'">
                u.rh_account_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhName'">
                rh.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'publisher'">
                ufas.publisher <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'publicationDate'">
                ufas.publication_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'numberOfCopies'">
                u.number_of_copies <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedValue'">
                ufas.reported_value <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'grossAmount'">
                u.gross_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'batchGrossAmount'">
                ub.gross_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'serviceFeeAmount'">
                u.service_fee_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'netAmount'">
                u.net_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'serviceFee'">
                u.service_fee <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'market'">
                ufas.market <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'marketPeriodFrom'">
                ufas.market_period_from <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'marketPeriodTo'">
                ufas.market_period_to <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'author'">
                ufas.author <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'status'">
                u.status_ind <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'comment'">
                u.comment <include refid="IUsageMapper.direction"/>
            </when>
        </choose>
    </sql>

    <sql id="rightsholderTotalHoldersOrderBy">
        order by
        <choose>
            <when test="null != sort">
                <choose>
                    <when test="sort.property == 'rightsholder.name'">
                        r.name <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'rightsholder.accountNumber'">
                        u.rh_account_number <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'payee.name'">
                        p.name <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'payee.accountNumber'">
                        p.rh_account_number <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'grossTotal'">
                        u.gross_total <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'serviceFeeTotal'">
                        u.service_fee_total <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'serviceFee'">
                        u.service_fee <include refid="IUsageMapper.direction"/>
                    </when>
                    <when test="sort.property == 'netTotal'">
                        u.net_total <include refid="IUsageMapper.direction"/>
                    </when>
                </choose>,
                r.name
            </when>
            <otherwise>
                r.name
            </otherwise>
        </choose>
    </sql>

    <sql id="searchWhereClause">
        (r.name ilike '%' || #{searchValue} || '%' or
        cast(u.rh_account_number as text) like '%' || #{searchValue} || '%')
    </sql>

    <sql id="drillDownSearchWhereClause">
        ${detail_uid} like '%' || #{searchValue} || '%' or
        u.standard_number ilike '%' || #{searchValue} || '%' or
        cast(u.wr_wrk_inst as text) like '%' || #{searchValue} || '%' or
        rro.name ilike '%' || #{searchValue} || '%' or
        cast(ub.rro_account_number as text) like '%' || #{searchValue} || '%'
    </sql>

    <sql id="selectDtosByFilterSql">
        <include refid="IUsageMapper.selectUsageDtos"/>
        <include refid="IUsageMapper.usageFilter"/>
        and u.df_scenario_uid is null
        <include refid="IUsageMapper.ifSortable"/>
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <select id="findDtosByFilter" resultMap="usageDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        select
            u.df_usage_uid,
            <include refid="IUsageMapper.usageDtoColumns"/>
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder rro on rro.rh_account_number = ub.rro_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        <include refid="IUsageMapper.usageFilter"/>
        and u.df_scenario_uid is null
        <include refid="IUsageMapper.ifSortable"/>
        <include refid="IUsageMapper.ifPageable"/>
    </select>

    <select id="findIdsByStatusAndProductFamily" resultType="string" parameterType="map">
        select df_usage_uid
        from ${schema}.df_usage
        where status_ind = #{status}
            and product_family = #{productFamily}
        order by df_usage_uid
    </select>

    <select id="findByStatusAndProductFamily" resultMap="usageResultMap" parameterType="map">
        select
            u.df_usage_uid,
            u.df_usage_batch_uid,
            u.df_scenario_uid,
            ufas.df_fund_pool_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.rh_account_number,
            rh.df_rightsholder_uid as rh_id,
            rh.name as rh_name,
            u.status_ind,
            u.product_family,
            ufas.article,
            u.standard_number,
            u.standard_number_type,
            ufas.publisher,
            ufas.publication_date,
            ufas.market,
            ufas.market_period_from,
            ufas.market_period_to,
            ufas.author,
            u.number_of_copies,
            ufas.reported_value,
            u.gross_amount,
            u.record_version
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        where
            u.status_ind = #{status} and
            u.product_family = #{productFamily}
        order by u.df_usage_uid
    </select>

    <select id="findByScenarioId" resultMap="usageResultMap" parameterType="string">
        select
            u.df_usage_uid,
            u.df_usage_batch_uid,
            u.df_scenario_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.rh_account_number,
            rh.df_rightsholder_uid rh_id,
            rh.name rh_name,
            u.status_ind,
            u.product_family,
            u.standard_number,
            u.standard_number_type,
            u.number_of_copies,
            u.gross_amount,
            u.service_fee,
            u.service_fee_amount,
            u.net_amount,
            u.payee_account_number,
            p.df_rightsholder_uid payee_id,
            p.name payee_name,
            ufas.article,
            ufas.publisher,
            ufas.publication_date,
            ufas.market,
            ufas.market_period_from,
            ufas.market_period_to,
            ufas.author,
            ufas.reported_value,
            ufas.is_rh_participating_flag,
            ufas.df_fund_pool_uid,
            u.comment
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where df_scenario_uid = #{scenarioId}
    </select>

    <sql id="selectDtoByScenarioIdSql">
        <include refid="IUsageMapper.selectUsageDtos"/>
        where df_scenario_uid = #{scenarioId}
        order by u.rh_account_number, u.df_usage_uid
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="selectCountByFilterSql">
        select count(1)
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder rro on rro.rh_account_number = ub.rro_account_number
        <include refid="IUsageMapper.usageFilter"/>
            and u.df_scenario_uid is null
    </sql>

    <select id="findCountByFilter" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder rro on rro.rh_account_number = ub.rro_account_number
        <include refid="IUsageMapper.usageFilter"/>
        and u.df_scenario_uid is null
    </select>

    <select id="findByIds" resultMap="usageResultMap">
        select
            u.df_usage_uid,
            u.df_usage_batch_uid,
            u.df_scenario_uid,
            ufas.df_fund_pool_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.rh_account_number,
            r.name rh_name,
            r.df_rightsholder_uid rh_id,
            u.payee_account_number,
            p.name payee_name,
            p.df_rightsholder_uid payee_id,
            u.status_ind,
            u.product_family,
            ufas.article,
            u.standard_number,
            u.standard_number_type,
            ufas.publisher,
            ufas.publication_date,
            ufas.market,
            ufas.market_period_from,
            ufas.market_period_to,
            ufas.author,
            u.comment,
            u.number_of_copies,
            ufas.reported_value,
            u.gross_amount,
            u.service_fee_amount,
            u.service_fee,
            u.net_amount,
            ufas.is_rh_participating_flag,
            ufas.is_payee_participating_flag,
            u.created_datetime,
            u.updated_datetime,
            u.created_by_user,
            u.updated_by_user,
            u.record_version
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_rightsholder r on r.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where u.df_usage_uid in
        <foreach collection="list" item="usageId" open="(" separator="," close=")">
            #{usageId}
        </foreach>
        order by u.df_usage_uid
    </select>

    <select id="deleteFromScenarioByRightsholder" parameterType="map" resultType="string">
        with result as (
            <include refid="deleteFromScenarioSql"/>,
            gross_amount = 0
            where rh_account_number in
                <foreach collection="accountNumbers" item="accountNumber" separator="," open="(" close=")">
                    #{accountNumber}
                </foreach>
                and df_scenario_uid = #{scenarioId}
            returning df_usage_uid
        )
        update ${schema}.df_usage_fas
        set
            is_rh_participating_flag = false,
            is_payee_participating_flag = false,
            <include refid="StoredEntityMapper.update"/>
        from result
        where df_usage_fas_uid = result.df_usage_uid
        returning df_usage_fas_uid
    </select>

    <update id="applyNetAmountFromExcludedRightshoders" parameterType="map">
        <!-- Calculates net amount totals of excluded rightsholders-->
        with exclude_amounts as (
            select
                sum(net_amount) as net_amount_excluded
            from ${schema}.df_usage u
            where df_scenario_uid = #{scenarioId}
            and rh_account_number in
                <foreach collection="accountNumbers" item="accountNumber" separator="," open="(" close=")">
                    #{accountNumber}
                </foreach>
        ),
        <!-- Calculates scenario net amount totals without of excluded rightsholders-->
        net_amount_totals as (
            select
                sum(net_amount) net_amount_total
            from ${schema}.df_usage u
            where df_scenario_uid = #{scenarioId}
            and rh_account_number not in
                <foreach collection="accountNumbers" item="accountNumber" separator="," open="(" close=")">
                    #{accountNumber}
                </foreach>
        ),
        <!-- Calculate GT factor based on scenario net totals and net amount totals of excluded rightsholders -->
        gt_factor as (
            select
                ((select net_amount_total from net_amount_totals) + (select net_amount_excluded from exclude_amounts)::numeric)
                / (select net_amount_total from net_amount_totals) net_amount_gt_factor
            from ${schema}.df_scenario
            where df_scenario_uid = #{scenarioId}
        )
        update ${schema}.df_usage u
        set
            net_amount = case when net_amount_gt_factor is not null then u.net_amount * net_amount_gt_factor else 0 end,
            service_fee_amount = case when net_amount_gt_factor is not null then u.service_fee_amount * net_amount_gt_factor else 0 end,
            gross_amount = case when net_amount_gt_factor is not null then u.gross_amount * net_amount_gt_factor else 0 end
        from gt_factor
        where u.df_scenario_uid = #{scenarioId}
    </update>

    <delete id="deleteByBatchId" parameterType="string">
        with u as (
            delete from ${schema}.df_usage
            where df_usage_batch_uid = #{batchId}
            returning df_usage_uid
        )
        delete from ${schema}.df_usage_fas
        where df_usage_fas_uid in (select df_usage_uid from u)
    </delete>

    <delete id="deleteByUsageId" parameterType="string">
        with u as (
            delete from ${schema}.df_usage
            where df_usage_uid = #{usageId}
        )
        delete from ${schema}.df_usage_fas
        where df_usage_fas_uid = #{usageId}
    </delete>

    <delete id="deleteByScenarioId" parameterType="string">
        delete from ${schema}.df_usage
        where df_scenario_uid = #{scenarioId}
    </delete>

    <select id="findInvalidRightsholdersByFilter" parameterType="map" resultType="long">
        select distinct
            u.rh_account_number
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        <include refid="usageFilter"/>
            and r.df_rightsholder_uid is null
    </select>

    <update id="addToScenario" parameterType="Usage" >
        with u as (
            update ${schema}.df_usage
            set
                status_ind = #{status},
                df_scenario_uid = #{scenarioId},
                payee_account_number = #{payee.accountNumber},
                net_amount = #{netAmount},
                service_fee_amount = #{serviceFeeAmount},
                service_fee = #{serviceFee},
                <include refid="StoredEntityMapper.update"/>
            where df_usage_uid = #{id}
        )
        update ${schema}.df_usage_fas
        set
            is_rh_participating_flag = #{rhParticipating},
            is_payee_participating_flag = #{payeeParticipating},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_fas_uid = #{id}
    </update>

    <sql id="deleteFromScenarioSql">
        update ${schema}.df_usage
        set
            status_ind = #{status},
            df_scenario_uid = null,
            payee_account_number = null,
            service_fee = null,
            service_fee_amount = 0,
            net_amount = 0,
            <include refid="StoredEntityMapper.update"/>
    </sql>

    <update id="deleteFromScenario" parameterType="map">
        with usage_ids as (
            <include refid="deleteFromScenarioSql"/>
            where df_scenario_uid = #{scenarioId}
            returning df_usage_uid
        )
        update ${schema}.df_usage_fas
        set
            is_rh_participating_flag = false,
            is_payee_participating_flag = false,
            <include refid="StoredEntityMapper.update"/>
        from usage_ids
        where df_usage_fas_uid = usage_ids.df_usage_uid
    </update>

    <update id="deleteFromScenarioByUsageId" parameterType="map">
        with result as (
            <include refid="deleteFromScenarioSql"/>
            where df_usage_uid = #{usageId}
        )
        update ${schema}.df_usage_fas
        set
            is_rh_participating_flag = false,
            is_payee_participating_flag = false,
            <include refid="StoredEntityMapper.update"/>
        where df_usage_fas_uid = #{usageId}
    </update>

    <select id="findCountByUsageIdAndStatus" parameterType="map" resultType="int">
        select count(1)
            from (
                select df_usage_uid
                from ${schema}.df_usage
                where df_usage_uid = #{usageId}
                    and status_ind = #{status}
            union
                select df_usage_archive_uid
                from ${schema}.df_usage_archive
                where df_usage_archive_uid = #{usageId}
                    and status_ind = #{status}
            ) as usage_uid;
    </select>

    <sql id="selectRightsholderTotalsHoldersByScenarioIdSql">
        select
            r.name rh_name,
            u.rh_account_number,
            p.name payee_name,
            u.payee_account_number,
            u.gross_total,
            u.service_fee_total,
            u.net_total,
            u.service_fee
        from (
            select
                rh_account_number,
                payee_account_number,
                sum(gross_amount) gross_total,
                sum(service_fee_amount) service_fee_total,
                sum(net_amount) net_total,
                service_fee
            from ${schema}.df_usage
            where df_scenario_uid = #{scenarioId}
            group by rh_account_number, payee_account_number, service_fee
        ) u
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        left join ${schema}.df_rightsholder p on u.payee_account_number = p.rh_account_number
        <if test="null != searchValue">
            where <include refid="IUsageMapper.searchWhereClause"/>
        </if>
        <include refid="IUsageMapper.rightsholderTotalHoldersOrderBy"/>
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <select id="findRightsholderTotalsHoldersByScenarioId" parameterType="map" resultMap="rightsholderTotalsHolderResultMap">
        <include refid="IUsageMapper.selectRightsholderTotalsHoldersByScenarioIdSql"/>
    </select>

    <select id="findPayeeTotalHoldersByFilter" parameterType="map" resultMap="payeeTotalHolderResultMap">
        select
            p.name payee_name,
            u.payee_account_number,
            u.gross_total,
            u.service_fee_total,
            u.net_total,
            u.is_payee_participating_flag
        from (
            select
                u.payee_account_number,
                sum(u.gross_amount) gross_total,
                sum(u.service_fee_amount) service_fee_total,
                sum(u.net_amount) net_total,
                ufas.is_payee_participating_flag
            from ${schema}.df_usage u
            join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
            join ${schema}.df_rightsholder payee on u.payee_account_number = payee.rh_account_number
            join ${schema}.df_scenario s on u.df_scenario_uid = s.df_scenario_uid
            where s.status_ind = #{scenarioStatus}
                <if test="filter.scenarioIds.size() > 0">
                    and u.df_scenario_uid in
                    <foreach collection="filter.scenarioIds" item="scenarioId" open="(" separator="," close=")">
                        #{scenarioId}
                    </foreach>
                </if>
                <if test="null != filter.payeeParticipating">
                    and ufas.is_payee_participating_flag = ${filter.payeeParticipating}
                </if>
                <if test="null != filter.searchValue">
                    and
                    (payee.name ilike '%' || #{filter.searchValue} || '%' or
                    cast(u.payee_account_number as text) like '%' || #{filter.searchValue} || '%')
                </if>
            group by payee_account_number, ufas.is_payee_participating_flag
            <if test="null != filter.netAmountMinThreshold">
                having sum(u.net_amount) &lt; ${filter.netAmountMinThreshold}
            </if>
        ) u
        left join ${schema}.df_rightsholder p on u.payee_account_number = p.rh_account_number
        order by p.name asc
    </select>

    <select id="getTotalAmountByStandardNumberAndBatchId" parameterType="map" resultType="BigDecimal">
        select sum(gross_amount)
        from ${schema}.df_usage
        where standard_number = #{standardNumber}
            and df_usage_batch_uid = #{batchId}
            and status_ind in
            <foreach collection="statuses" item="status" separator="," open="(" close=")">
                #{status}
            </foreach>
    </select>

    <select id="getTotalAmountByTitleAndBatchId" parameterType="map" resultType="BigDecimal">
        select sum(gross_amount)
        from ${schema}.df_usage
        where work_title = #{title}
            and standard_number is null
            and df_usage_batch_uid = #{batchId}
            and status_ind in
            <foreach collection="statuses" item="status" separator="," open="(" close=")">
                #{status}
            </foreach>
    </select>

    <select id="findRightsholderTotalsHolderCountByScenarioId" parameterType="map" resultType="int">
        select count(1)
        from (
            select distinct rh_account_number
            from ${schema}.df_usage
            where df_scenario_uid = #{scenarioId}) u
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        <if test="null != searchValue">
            where <include refid="searchWhereClause"/>
        </if>
    </select>

    <select id="isScenarioEmpty" parameterType="string" resultType="boolean">
        select not exists (
            select
            from ${schema}.df_usage
            where df_scenario_uid = #{scenarioId}
        )
    </select>

    <select id="findCountByScenarioIdAndRhAccountNumber" parameterType="map" resultType="int">
        select count(1)
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rro on ub.rro_account_number = rro.rh_account_number
        where df_scenario_uid = #{scenarioId} and u.rh_account_number = #{accountNumber}
        <if test="null != searchValue">
            and (
                <include refid="drillDownSearchWhereClause">
                    <property name="detail_uid" value="u.df_usage_uid"/>
                </include>
            )
        </if>
    </select>

    <select id="findByScenarioIdAndRhAccountNumber" parameterType="map" resultMap="usageDtoResultMap">
        <include refid="selectUsageDtos"/>
        where u.df_scenario_uid = #{scenarioId} and u.rh_account_number = #{accountNumber}
        <if test="null != searchValue">
            and (
                <include refid="drillDownSearchWhereClause">
                    <property name="detail_uid" value="u.df_usage_uid"/>
                </include>
            )
        </if>
        <include refid="ifSortable"/>
        <include refid="ifPageable"/>
    </select>

    <select id="findIdsByScenarioIdRroAccountNumberRhAccountNumbers" resultType="string" parameterType="map">
        select df_usage_uid
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch b on u.df_usage_batch_uid = b.df_usage_batch_uid
        where u.df_scenario_uid = #{scenarioId}
            and b.rro_account_number = #{rroAccountNumber}
            and u.rh_account_number in
            <foreach collection="accountNumbers" item="accountNumber" separator="," open="(" close=")">
                #{accountNumber}
            </foreach>
    </select>

    <sql id="selectArchivedCountForAuditSql">
        (select count(1) usage_count
        from ${schema}.df_usage_archive u
        left join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
        <include refid="IUsageMapper.archivedAuditFilterWhereClause"/>)
    </sql>

    <sql id="selectCountForAuditSql">
        select
        <choose>
            <when test="null != filter.cccEventId || null != filter.distributionName">
                <include refid="IUsageMapper.selectArchivedCountForAuditSql"/>
            </when>
            <otherwise>
                (select count(1) usage_count
                from ${schema}.df_usage u
                join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
                left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
                <where>
                    <include refid="IUsageMapper.commonAuditFilterWhereClause">
                        <property name="detail_uid" value="u.df_usage_uid"/>
                    </include>
                </where>) +
                <include refid="IUsageMapper.selectArchivedCountForAuditSql"/>
            </otherwise>
        </choose>
    </sql>

    <select id="findCountForAudit" resultType="int" parameterType="map">
        <include refid="IUsageMapper.selectCountForAuditSql"/>
    </select>

    <sql id="selectForAuditSql">
        <choose>
            <when test="null != filter.cccEventId || null != filter.distributionName">
                <include refid="IUsageMapper.selectArchivedUsagesForAuditSql"/>
            </when>
            <otherwise>
                select
                    u.df_usage_uid,
                    u.status_ind,
                    u.product_family,
                    u.df_usage_batch_uid,
                    ub.name batch_name,
                    ub.payment_date,
                    u.rh_account_number,
                    rh.name rh_name,
                    u.payee_account_number,
                    payee.name payee_name,
                    wr_wrk_inst,
                    work_title,
                    system_title,
                    standard_number,
                    standard_number_type,
                    ufas.reported_value,
                    u.gross_amount,
                    service_fee,
                    ub.gross_amount batch_gross_amount,
                    u.updated_datetime,
                    s.name scenario_name,
                    null check_number,
                    null check_date,
                    null ccc_event_id,
                    null distribution_name,
                    null distribution_date,
                    null period_end_date,
                    u.comment
                from ${schema}.df_usage u
                join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
                join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
                left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
                left join ${schema}.df_rightsholder payee on payee.rh_account_number = u.payee_account_number
                left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
                <where>
                    <include refid="IUsageMapper.commonAuditFilterWhereClause">
                        <property name="detail_uid" value="u.df_usage_uid"/>
                    </include>
                </where>
                union
                <include refid="IUsageMapper.selectArchivedUsagesForAuditSql"/>
            </otherwise>
        </choose>
        order by
        <choose>
            <when test="null != sort">
                <choose>
                    <when test="sort.property == 'productFamily'">
                        product_family
                    </when>
                    <when test="sort.property == 'detailId'">
                        df_usage_uid
                    </when>
                    <when test="sort.property == 'status'">
                        status_ind
                    </when>
                    <when test="sort.property == 'batchName'">
                        batch_name
                    </when>
                    <when test="sort.property == 'paymentDate'">
                        payment_date
                    </when>
                    <when test="sort.property == 'rhAccountNumber'">
                        rh_account_number
                    </when>
                    <when test="sort.property == 'rhName'">
                        rh_name
                    </when>
                    <when test="sort.property == 'payeeAccountNumber'">
                        payee_account_number
                    </when>
                    <when test="sort.property == 'payeeName'">
                        payee_name
                    </when>
                    <when test="sort.property == 'wrWrkInst'">
                        wr_wrk_inst
                    </when>
                    <when test="sort.property == 'systemTitle'">
                        system_title
                    </when>
                    <when test="sort.property == 'workTitle'">
                        work_title
                    </when>
                    <when test="sort.property == 'standardNumber'">
                        standard_number
                    </when>
                    <when test="sort.property == 'standardNumberType'">
                        standard_number_type
                    </when>
                    <when test="sort.property == 'reportedValue'">
                        reported_value
                    </when>
                    <when test="sort.property == 'grossAmount'">
                        gross_amount
                    </when>
                    <when test="sort.property == 'batchGrossAmount'">
                        batch_gross_amount
                    </when>
                    <when test="sort.property == 'serviceFee'">
                        service_fee
                    </when>
                    <when test="sort.property == 'scenarioName'">
                        scenario_name
                    </when>
                    <when test="sort.property == 'checkNumber'">
                        check_number
                    </when>
                    <when test="sort.property == 'checkDate'">
                        check_date
                    </when>
                    <when test="sort.property == 'cccEventId'">
                        ccc_event_id
                    </when>
                    <when test="sort.property == 'distributionName'">
                        distribution_name
                    </when>
                    <when test="sort.property == 'distributionDate'">
                        distribution_date
                    </when>
                    <when test="sort.property == 'periodEndDate'">
                        period_end_date
                    </when>
                    <when test="sort.property == 'comment'">
                        comment
                    </when>
                </choose>
                <include refid="IUsageMapper.direction"/>,
                df_usage_uid
            </when>
            <otherwise>
                df_usage_uid
            </otherwise>
        </choose>
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <select id="findForAudit" resultMap="usageDtoResultMap" parameterType="map">
        <include refid="IUsageMapper.selectForAuditSql"/>
    </select>

    <sql id="selectArchivedUsagesForAuditSql">
        select
            df_usage_archive_uid df_usage_uid,
            u.status_ind,
            u.product_family,
            u.df_usage_batch_uid,
            ub.name batch_name,
            ub.payment_date,
            u.rh_account_number,
            rh.name rh_name,
            u.payee_account_number,
            payee.name payee_name,
            wr_wrk_inst,
            work_title,
            system_title,
            standard_number,
            standard_number_type,
            ufas.reported_value,
            u.gross_amount,
            service_fee,
            ub.gross_amount batch_gross_amount,
            u.updated_datetime,
            s.name scenario_name,
            u.check_number,
            u.check_date,
            u.ccc_event_id,
            u.distribution_name,
            u.distribution_date,
            u.period_end_date,
            u.comment
        from ${schema}.df_usage_archive u
        join ${schema}.df_usage_fas ufas on u.df_usage_archive_uid = ufas.df_usage_fas_uid
        left join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder payee on payee.rh_account_number = u.payee_account_number
        left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
        <include refid="IUsageMapper.archivedAuditFilterWhereClause"/>
    </sql>

    <sql id="archivedAuditFilterWhereClause">
        <where>
            <include refid="IUsageMapper.commonAuditFilterWhereClause">
                <property name="detail_uid" value="u.df_usage_archive_uid"/>
            </include>
            <if test="null != filter.cccEventId">
                and ccc_event_id ilike #{filter.cccEventId}
            </if>
            <if test="null != filter.distributionName">
                and distribution_name ilike #{filter.distributionName}
            </if>
        </where>
    </sql>

    <sql id="commonAuditFilterWhereClause">
        <if test="!filter.rhAccountNumbers.isEmpty()">
            u.rh_account_number in
            <foreach collection="filter.rhAccountNumbers" item="accountNumber" separator="," open="(" close=")">
                #{accountNumber}
            </foreach>
        </if>
        <if test="!filter.batchesIds.isEmpty()">
            and ub.df_usage_batch_uid in
            <foreach collection="filter.batchesIds" item="batchId" separator="," open="(" close=")">
                #{batchId}
            </foreach>
        </if>
        <if test="!filter.statuses.isEmpty()">
            and u.status_ind in
            <foreach collection="filter.statuses" item="status" separator="," open="(" close=")">
                #{status}
            </foreach>
        </if>
        <if test="null != filter.productFamily">
            and u.product_family = #{filter.productFamily}
        </if>
        <if test="null != filter.searchValue">
            and (
                ${detail_uid} like '%' || #{filter.searchValue} || '%' or
                cast(wr_wrk_inst as text) like '%' || #{filter.searchValue} || '%' or
                system_title ilike '%' || #{filter.searchValue} || '%' or
                work_title ilike '%' || #{filter.searchValue} || '%')
        </if>
    </sql>

    <select id="findByStatuses" resultMap="usageResultMap">
        select
            u.df_usage_uid,
            u.df_usage_batch_uid,
            u.df_scenario_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.rh_account_number,
            u.status_ind,
            u.product_family,
            u.standard_number,
            u.standard_number_type,
            u.number_of_copies,
            u.gross_amount,
            ufas.df_fund_pool_uid,
            ufas.article,
            ufas.publisher,
            ufas.publication_date,
            ufas.market,
            ufas.market_period_from,
            ufas.market_period_to,
            ufas.author,
            ufas.reported_value,
            u.comment
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        where
            u.status_ind in
            <foreach collection="array" item="status" open="(" separator="," close=")">
                #{status}
            </foreach>
    </select>

    <update id="updateStatus" parameterType="map">
        update ${schema}.df_usage
        set status_ind = #{status},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid = #{usageId}
    </update>

    <update id="updateStatusAndRhAccountNumber" parameterType="map">
        update ${schema}.df_usage
        set
            status_ind = #{status},
            rh_account_number = #{rhAccountNumber},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid in
            <foreach collection="usageIds" item="usageId" open="(" separator="," close=")">
                #{usageId}
            </foreach>
    </update>

    <update id="update" parameterType="Usage">
        with u as (
            update ${schema}.df_usage
            set
                status_ind = #{status},
                wr_wrk_inst = #{wrWrkInst},
                work_title = #{workTitle},
                system_title = #{systemTitle},
                rh_account_number = #{rightsholder.accountNumber},
                payee_account_number = #{payee.accountNumber},
                net_amount = #{netAmount},
                service_fee_amount = #{serviceFeeAmount},
                service_fee = #{serviceFee},
                <include refid="StoredEntityMapper.update"/>
            where df_usage_uid = #{id}
        )
        update ${schema}.df_usage_fas
        set
            is_rh_participating_flag = #{rhParticipating},
            is_payee_participating_flag = #{payeeParticipating},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_fas_uid = #{id}
    </update>

    <select id="updateProcessedUsage" parameterType="map" resultType="string">
        update ${schema}.df_usage
        set
            rh_account_number = #{rightsholder.accountNumber},
            wr_wrk_inst = #{wrWrkInst},
            system_title = #{systemTitle},
            work_title = #{workTitle},
            status_ind = #{status},
            product_family = #{productFamily},
            standard_number = #{standardNumber},
            standard_number_type = #{standardNumberType},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid = #{id}
            and record_version = #{version}
        returning df_usage_uid
    </select>

    <select id="isValidFilteredUsageStatus" parameterType="map" resultType="boolean">
        select not exists (
            select 1
            from ${schema}.df_usage u
            join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
            left join ${schema}.df_rightsholder rro on rro.rh_account_number = ub.rro_account_number
            <include refid="usageFilter"/>
                and u.df_scenario_uid is null
                and u.status_ind != #{status})
    </select>

    <select id="findWrWrkInstToUsageIdsByBatchNameAndUsageStatus" resultMap="wrWrkInstToUsageIdResultMap">
        select u.df_usage_uid,
            u.wr_wrk_inst
        from ${schema}.df_usage u
        join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
        where ub.name = #{batchName} and u.status_ind = #{status}
            and u.wr_wrk_inst is not null
    </select>

    <select id="findReferencedUsagesCountByIds" resultType="int" parameterType="list">
        select
            (select count(1)
            from ${schema}.df_usage_fas
            where df_usage_fas_uid in
            <foreach collection="usageIds" item="usageId" open="(" separator="," close=")">
                #{usageId}
            </foreach>) +
            (select count(1)
            from ${schema}.df_usage_aacl
            where df_usage_aacl_uid in
            <foreach collection="usageIds" item="usageId" open="(" separator="," close=")">
                #{usageId}
            </foreach>)
    </select>

    <select id="findRightsholderPayeeProductFamilyHoldersByScenarioIds" resultMap="rightsholderPayeeProductFamilyHolderResultMap" parameterType="list">
        select
            rh.df_rightsholder_uid rh_uid,
            rh.name rh_name,
            u.rh_account_number,
            payee.df_rightsholder_uid payee_uid,
            payee.name payee_name,
            u.payee_account_number,
            u.product_family
        from (
            select
                rh_account_number,
                payee_account_number,
                product_family
            from ${schema}.df_usage u
            where df_scenario_uid in
            <foreach collection="collection" item="scenarioId" open="(" separator="," close=")">
                #{scenarioId}
            </foreach>
            group by u.rh_account_number, u.payee_account_number, u.product_family
        ) u
        left join ${schema}.df_rightsholder rh on u.rh_account_number = rh.rh_account_number
        left join ${schema}.df_rightsholder payee on u.payee_account_number = payee.rh_account_number
    </select>
</mapper>
