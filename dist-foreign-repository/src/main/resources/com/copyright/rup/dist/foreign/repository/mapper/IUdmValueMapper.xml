<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IUdmValueMapper">

    <resultMap id="udmValueResultMap" type="UdmValue" extends="StoredEntityMapper.storedEntityResult">
        <result property="period" column="period"/>
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="standardNumber" column="standard_number"/>
        <result property="systemTitle" column="system_title"/>
    </resultMap>

    <resultMap id="udmValueDtoResultMap" type="UdmValueDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_udm_value_uid"/>
        <result property="valuePeriod" column="period"/>
        <result property="status" column="status_ind"/>
        <result property="assignee" column="assignee"/>
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="rhName" column="rh_name"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="systemTitle" column="system_title"/>
        <result property="systemStandardNumber" column="standard_number"/>
        <result property="lastValuePeriod" column="last_value_period"/>
        <result property="lastPubType" column="last_pub_type"/>
        <result property="publicationType.id" column="pub_type_id"/>
        <result property="publicationType.name" column="pub_type_name"/>
        <result property="publicationType.description" column="pub_type_description"/>
        <result property="lastPriceInUsd" column="last_price_in_usd"/>
        <result property="lastPriceFlag" column="last_price_flag"/>
        <result property="lastPriceSource" column="last_price_source"/>
        <result property="priceSource" column="price_source"/>
        <result property="lastPriceComment" column="last_price_comment"/>
        <result property="price" column="price"/>
        <result property="currency" column="currency"/>
        <result property="priceType" column="price_type"/>
        <result property="priceAccessType" column="price_access_type"/>
        <result property="priceYear" column="price_year"/>
        <result property="priceComment" column="price_comment"/>
        <result property="priceInUsd" column="price_in_usd"/>
        <result property="priceFlag" column="price_flag"/>
        <result property="currencyExchangeRate" column="currency_exchange_rate"/>
        <result property="currencyExchangeRateDate" column="currency_exchange_rate_date"/>
        <result property="lastContent" column="last_content"/>
        <result property="lastContentFlag" column="last_content_flag"/>
        <result property="lastContentSource" column="last_content_source"/>
        <result property="contentSource" column="content_source"/>
        <result property="lastContentComment" column="last_content_comment"/>
        <result property="content" column="content"/>
        <result property="contentComment" column="content_comment"/>
        <result property="contentFlag" column="content_flag"/>
        <result property="contentUnitPrice" column="content_unit_price"/>
        <result property="contentUnitPriceFlag" column="content_unit_price_flag"/>
        <result property="comment" column="comment"/>
        <result property="lastComment" column="last_comment"/>
    </resultMap>

    <sql id="selectDtosByFilterSql">
        select
            df_udm_value_uid,
            period,
            assignee,
            v.rh_account_number,
            r.name rh_name,
            wr_wrk_inst,
            system_title,
            standard_number,
            last_value.last_value_period,
            last_publication_type.name last_pub_type,
            v.publication_type_uid pub_type_id,
            pt.name pub_type_name,
            pt.description pub_type_description,
            last_value.last_price_in_usd,
            last_value.last_price_flag,
            last_value.last_price_source,
            last_value.last_price_comment,
            price_source,
            price,
            currency,
            price_in_usd,
            price_type,
            status_ind,
            price_access_type,
            price_year,
            price_comment,
            price_flag,
            currency,
            currency_exchange_rate,
            currency_exchange_rate_date,
            last_value.last_content,
            last_value.last_content_flag,
            last_value.last_content_source,
            last_value.last_content_comment,
            content_source,
            content,
            content_unit_price,
            content_unit_price_flag,
            content_comment,
            content_flag,
            comment,
            last_value.last_comment,
            v.created_datetime,
            v.updated_datetime,
            v.created_by_user,
            v.updated_by_user,
            v.record_version
        from ${schema}.df_udm_value v
        left join ${schema}.df_rightsholder r on v.rh_account_number = r.rh_account_number
        left join ${schema}.df_publication_type pt on v.publication_type_uid = pt.df_publication_type_uid
        <include refid="IUdmValueMapper.udmValueLastValueJoins"/>
        <include refid="IUdmValueMapper.udmValueFilter"/>
        order by
        <choose>
            <when test="null != sort">
                <include refid="IUdmValueMapper.chooseSortProperty"/>
            </when>
            <otherwise>
                v.updated_datetime desc
            </otherwise>
        </choose>,
        v.df_udm_value_uid
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="selectCountByFilterSql">
        select count(1)
        from ${schema}.df_udm_value v
        left join ${schema}.df_rightsholder r on v.rh_account_number = r.rh_account_number
        left join ${schema}.df_publication_type pt on v.publication_type_uid = pt.df_publication_type_uid
        <include refid="IUdmValueMapper.udmValueLastValueJoins"/>
        <include refid="IUdmValueMapper.udmValueFilter"/>
    </sql>

    <sql id="udmValueLastValueJoins">
        left join lateral (
            select
                v2.period as last_value_period,
                v2.publication_type_uid,
                v2.price_in_usd as last_price_in_usd,
                v2.price_flag as last_price_flag,
                v2.price_source as last_price_source,
                v2.price_comment as last_price_comment,
                v2.content as last_content,
                v2.content_flag as last_content_flag,
                v2.content_source as last_content_source,
                v2.content_comment as last_content_comment,
                v2.comment as last_comment
            from ${schema}.df_udm_value v2
            where v.wr_wrk_inst = v2.wr_wrk_inst
                and v.period > v2.period
            order by v2.period desc
            limit 1
        ) last_value on true
        left join ${schema}.df_publication_type last_publication_type on last_value.publication_type_uid = last_publication_type.df_publication_type_uid
    </sql>

    <sql id="udmValueFilter">
        <where>
            <if test="filter.periods.size() > 0">
                and
                <foreach collection="filter.periods" item="period" open="(" separator=" or " close=")">
                    v.period = #{period}
                </foreach>
            </if>
            <if test="null != filter.status">
                and v.status_ind = #{filter.status}
            </if>
            <if test="null != filter.currency">
                <if test="null != filter.currency.code">
                    and v.currency = #{filter.currency.code}
                </if>
            </if>
            <if test="null != filter.assignees and filter.assignees.size() > 0">
                and
                <foreach collection="filter.assignees" item="assignee" open="(" separator=" or " close=")">
                    <choose>
                        <when test="assignee == 'Unassigned'">
                            v.assignee is null
                        </when>
                        <otherwise>
                            v.assignee = #{assignee}
                        </otherwise>
                    </choose>
                </foreach>
            </if>
            <if test="filter.pubTypes.size() > 0">
                and
                <foreach collection="filter.pubTypes" item="pubType" open="(" separator=" or " close=")">
                    <choose>
                        <when test="null != pubType.name">
                            pt.name = #{pubType.name}
                        </when>
                        <otherwise>
                            v.publication_type_uid is null
                        </otherwise>
                    </choose>
                </foreach>
            </if>
            <if test="null != filter.lastPubType">
                <choose>
                    <when test="null != filter.lastPubType.name">
                        and last_publication_type.name = #{filter.lastPubType.name}
                    </when>
                    <otherwise>
                        and last_value.publication_type_uid is null
                    </otherwise>
                </choose>
            </if>
            <if test="null != filter.lastValuePeriods and filter.lastValuePeriods.size() > 0">
                and
                <foreach collection="filter.lastValuePeriods" item="lastValuePeriod" open="(" separator=" or " close=")">
                    <choose>
                        <when test="lastValuePeriod == 'IS_NULL'">
                            last_value_period is null
                        </when>
                        <when test="lastValuePeriod == 'IS_NOT_NULL'">
                            last_value_period is not null
                        </when>
                        <otherwise>
                            last_value_period::text = #{lastValuePeriod}
                        </otherwise>
                    </choose>
                </foreach>
            </if>
            <if test="!filter.wrWrkInstExpression.isEmpty()">
                <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                    <property name="column" value="v.wr_wrk_inst"/>
                    <property name="operator" value="filter.wrWrkInstExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.wrWrkInstExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.wrWrkInstExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.systemTitleExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="v.system_title"/>
                    <property name="operator" value="filter.systemTitleExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.systemTitleExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.systemTitleExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.systemStandardNumberExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="v.standard_number"/>
                    <property name="operator" value="filter.systemStandardNumberExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.systemStandardNumberExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.systemStandardNumberExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.rhAccountNumberExpression.isEmpty()">
                <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                    <property name="column" value="v.rh_account_number"/>
                    <property name="operator" value="filter.rhAccountNumberExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.rhAccountNumberExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.rhAccountNumberExpression.fieldSecondValue}"/>
                </include>
            </if>            
            <if test="!filter.rhNameExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="r.name"/>
                    <property name="operator" value="filter.rhNameExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.rhNameExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.rhNameExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.priceExpression.isEmpty()">
                <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                    <property name="column" value="v.price"/>
                    <property name="operator" value="filter.priceExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.priceExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.priceExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.priceInUsdExpression.isEmpty()">
                <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                    <property name="column" value="v.price_in_usd"/>
                    <property name="operator" value="filter.priceInUsdExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.priceInUsdExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.priceInUsdExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.priceFlagExpression.isEmpty()">
                <include refid="IUdmCommonMapper.booleanFieldFilterExpression">
                    <property name="column" value="v.price_flag"/>
                    <property name="operator" value="filter.priceFlagExpression.operator"/>
                </include>
            </if>
            <if test="!filter.priceCommentExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="v.price_comment"/>
                    <property name="operator" value="filter.priceCommentExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.priceCommentExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.priceCommentExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.lastPriceFlagExpression.isEmpty()">
                <include refid="IUdmCommonMapper.booleanFieldFilterExpression">
                    <property name="column" value="last_value.last_price_flag"/>
                    <property name="operator" value="filter.lastPriceFlagExpression.operator"/>
                </include>
            </if>
            <if test="!filter.lastPriceCommentExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="last_value.last_price_comment"/>
                    <property name="operator" value="filter.lastPriceCommentExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.lastPriceCommentExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.lastPriceCommentExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.contentExpression.isEmpty()">
                <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                    <property name="column" value="content"/>
                    <property name="operator" value="filter.contentExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.contentExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.contentExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.contentFlagExpression.isEmpty()">
                <include refid="IUdmCommonMapper.booleanFieldFilterExpression">
                    <property name="column" value="v.content_flag"/>
                    <property name="operator" value="filter.contentFlagExpression.operator"/>
                </include>
            </if>
            <if test="!filter.contentCommentExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="v.content_comment"/>
                    <property name="operator" value="filter.contentCommentExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.contentCommentExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.contentCommentExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.lastContentFlagExpression.isEmpty()">
                <include refid="IUdmCommonMapper.booleanFieldFilterExpression">
                    <property name="column" value="last_value.last_content_flag"/>
                    <property name="operator" value="filter.lastContentFlagExpression.operator"/>
                </include>
            </if>
            <if test="!filter.lastContentCommentExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="last_value.last_content_comment"/>
                    <property name="operator" value="filter.lastContentCommentExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.lastContentCommentExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.lastContentCommentExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.contentUnitPriceExpression.isEmpty()">
                <include refid="IUdmCommonMapper.numericFieldFilterExpression">
                    <property name="column" value="content_unit_price"/>
                    <property name="operator" value="filter.contentUnitPriceExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.contentUnitPriceExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.contentUnitPriceExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.contentUnitPriceFlagExpression.isEmpty()">
                <include refid="IUdmCommonMapper.booleanFieldFilterExpression">
                    <property name="column" value="v.content_unit_price_flag"/>
                    <property name="operator" value="filter.contentUnitPriceFlagExpression.operator"/>
                </include>
            </if>
            <if test="!filter.commentExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="v.comment"/>
                    <property name="operator" value="filter.commentExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.commentExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.commentExpression.fieldSecondValue}"/>
                </include>
            </if>
            <if test="!filter.lastCommentExpression.isEmpty()">
                <include refid="IUdmCommonMapper.textFieldFilterExpression">
                    <property name="column" value="last_value.last_comment"/>
                    <property name="operator" value="filter.lastCommentExpression.operator"/>
                    <property name="fieldFirstValue" value="${filter.lastCommentExpression.fieldFirstValue}"/>
                    <property name="fieldSecondValue" value="${filter.lastCommentExpression.fieldSecondValue}"/>
                </include>
            </if>
        </where>
    </sql>

    <sql id="chooseSortProperty">
        <choose>
            <when test="sort.property == 'valueId'">
                v.df_udm_value_uid <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'valuePeriod'">
                period <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'status'">
                status_ind <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'assignee'">
                assignee <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhAccountNumber'">
                v.rh_account_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhName'">
                r.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'wrWrkInst'">
                wr_wrk_inst <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'systemTitle'">
                system_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'systemStandardNumber'">
                standard_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastValuePeriod'">
                last_value_period <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastPubType'">
                last_pub_type <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'publicationType'">
                pt.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastPriceInUsd'">
                last_price_in_usd <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastPriceFlag'">
                last_price_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastPriceSource'">
                last_price_source <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'priceSource'">
                price_source <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastPriceComment'">
                last_price_comment <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'price'">
                price <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'currency'">
                currency <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'priceType'">
                price_type <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'priceAccessType'">
                price_access_type <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'priceYear'">
                price_year <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'priceComment'">
                price_comment <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'priceFlag'">
                price_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'priceInUsd'">
                price_in_usd <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'currencyExchangeRate'">
                currency_exchange_rate <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'currencyExchangeRateDate'">
                currency_exchange_rate_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastContent'">
                last_content <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastContentFlag'">
                last_content_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastContentSource'">
                last_content_source <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentSource'">
                content_source <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastContentComment'">
                last_content_comment <include refid="IUsageMapper.direction"/>
            </when>            
            <when test="sort.property == 'content'">
                content <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentComment'">
                content_comment <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentFlag'">
                content_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentUnitPrice'">
                content_unit_price <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'contentUnitPriceFlag'">
                content_unit_price_flag <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'comment'">
                comment <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'lastComment'">
                last_comment <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'updateDate'">
                v.updated_datetime <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'updateUser'">
                v.updated_by_user <include refid="IUsageMapper.direction"/>
            </when>
        </choose>
    </sql>

    <insert id="insert" parameterType="UdmValue">
        insert into ${schema}.df_udm_value (
            df_udm_value_uid,
            period,
            wr_wrk_inst,
            rh_account_number,
            status_ind,
            system_title,
            standard_number,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            #{id},
            #{period},
            #{wrWrkInst},
            #{rhAccountNumber},
            #{status},
            #{systemTitle},
            #{standardNumber},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <update id="update" parameterType="UdmValueDto">
        update ${schema}.df_udm_value
        set
            status_ind = #{status},
            publication_type_uid = #{publicationType.id},
            price_source = #{priceSource},
            price = #{price},
            currency = #{currency},
            price_type = #{priceType},
            price_access_type = #{priceAccessType},
            price_year = #{priceYear},
            price_comment = #{priceComment},
            price_in_usd = #{priceInUsd},
            price_flag = #{priceFlag},
            currency_exchange_rate = #{currencyExchangeRate},
            currency_exchange_rate_date = #{currencyExchangeRateDate},
            content_source = #{contentSource},
            content = #{content},
            content_comment = #{contentComment},
            content_flag = #{contentFlag},
            content_unit_price = #{contentUnitPrice},
            content_unit_price_flag = #{contentUnitPriceFlag},
            comment = #{comment},
            <include refid="StoredEntityMapper.update"/>
        where df_udm_value_uid = #{id}
    </update>

    <select id="findDtosByFilter" resultMap="udmValueDtoResultMap" parameterType="map"
            fetchSize="${usageSelectFetchSize}">
        <include refid="IUdmValueMapper.selectDtosByFilterSql"/>
    </select>

    <select id="findCountByFilter" parameterType="map" resultType="int">
        <include refid="IUdmValueMapper.selectCountByFilterSql"/>
    </select>

    <select id="findPeriods" resultType="int">
        select distinct period
        from ${schema}.df_udm_value
        order by period desc
    </select>

    <update id="updateAssignee" parameterType="map">
        update ${schema}.df_udm_value
        set
            assignee = #{assignee},
            <include refid="StoredEntityMapper.update"/>
        where df_udm_value_uid in
            <foreach collection="valueIds" item="valueId" open="(" separator="," close=")">
                #{valueId}
            </foreach>
    </update>

    <select id="findAssignees" resultType="string">
        select distinct assignee
        from ${schema}.df_udm_value
        where assignee is not null
        order by assignee
    </select>

    <select id="updateResearchedInPrevPeriod" resultType="string">
        update ${schema}.df_udm_value
        set
            status_ind = 'RSCHD_IN_THE_PREV_PERIOD',
            <include refid="StoredEntityMapper.update"/>
        where period = #{period}
            and status_ind = 'NEW'
            and wr_wrk_inst in (
                select distinct v.wr_wrk_inst
                from ${schema}.df_udm_value v
                join lateral (
                    select distinct wr_wrk_inst from ${schema}.df_udm_value_baseline
                    <!-- Selects Jan-June period based on provided July-Dec period -->
                    where period = #{period} - 6
                ) last_value on v.wr_wrk_inst = last_value.wr_wrk_inst
            )
    </select>

    <select id="findLastValuePeriods" resultType="string">
        select distinct last_value.last_value_period
        from ${schema}.df_udm_value v
        left join lateral (
            select v2.period as last_value_period
            from ${schema}.df_udm_value v2
            where v.wr_wrk_inst = v2.wr_wrk_inst
                and v.period > v2.period
            order by v2.period desc
            limit 1
        ) last_value on true
        where last_value.last_value_period is not null
        order by last_value.last_value_period desc
    </select>

    <select id="isAllowedForPublishing" parameterType="map" resultType="boolean">
        select not exists (
            select 1
            from ${schema}.df_udm_value
            where period = #{period}
                and (publication_type_uid is null
                    or content_unit_price is null
                    or status_ind in
                    <foreach collection="statuses" item="status" open="(" separator="," close=")">
                        #{status}
                    </foreach>)
        )
    </select>

    <select id="publishToBaseline" parameterType="map" resultType="string">
        with existent_baseline_values_uids as (
            update ${schema}.df_udm_value_baseline vb
            set
                wr_wrk_inst = v.wr_wrk_inst,
                system_title = v.system_title,
                publication_type_uid = v.publication_type_uid,
                price = v.price_in_usd,
                price_flag = v.price_flag,
                content = v.content,
                content_flag = v.content_flag,
                content_unit_price = v.content_unit_price,
                comment = v.comment,
                updated_by_user = #{updateUser},
                updated_datetime = now(),
                record_version = vb.record_version + 1
            from ${schema}.df_udm_value v
            where v.df_udm_value_uid = vb.df_udm_value_baseline_uid
                and v.period = #{period}
            returning v.df_udm_value_uid
        ),
        inserted_values as (
            insert into ${schema}.df_udm_value_baseline (
                df_udm_value_baseline_uid,
                period,
                wr_wrk_inst,
                system_title,
                publication_type_uid,
                price,
                price_flag,
                content,
                content_flag,
                content_unit_price,
                comment,
                <include refid="StoredEntityMapper.additionalColumns"/>
            )
            select
                df_udm_value_uid,
                period,
                wr_wrk_inst,
                system_title,
                publication_type_uid,
                price_in_usd,
                price_flag,
                content,
                content_flag,
                content_unit_price,
                comment,
                <include refid="StoredEntityMapper.insert"/>
            from ${schema}.df_udm_value
            where period = #{period}
                and df_udm_value_uid not in (select * from existent_baseline_values_uids)
        )
        select df_udm_value_uid
        from ${schema}.df_udm_value
        where period = #{period}
    </select>
</mapper>
