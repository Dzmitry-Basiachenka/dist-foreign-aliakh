<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IFasUsageMapper">

    <insert id="insert" parameterType="Usage">
        with u as (
            insert into ${schema}.df_usage (
                df_usage_uid,
                <include refid="IUsageMapper.usageColumns"/>,
                payee_account_number,
                 <include refid="StoredEntityMapper.additionalColumns"/>
            )
            values (
                #{id},
                #{batchId},
                #{scenarioId},
                #{wrWrkInst},
                #{workTitle},
                #{systemTitle},
                #{rightsholder.accountNumber},
                #{status},
                #{productFamily},
                #{standardNumber},
                #{standardNumberType},
                #{numberOfCopies},
                #{grossAmount},
                #{comment},
                #{payee.accountNumber},
                <include refid="StoredEntityMapper.insert"/>
            )
        )
        insert into ${schema}.df_usage_fas (
            df_usage_fas_uid,
            article,
            publisher,
            publication_date,
            market,
            market_period_from,
            market_period_to,
            author,
            reported_value,
            reported_standard_number,
            <include refid="StoredEntityMapper.additionalColumns"/>
        )
        select
            #{id},
            #{article},
            #{publisher},
            #{publicationDate},
            #{market},
            #{marketPeriodFrom},
            #{marketPeriodTo},
            #{author},
            #{reportedValue},
            #{fasUsage.reportedStandardNumber},
            <include refid="StoredEntityMapper.insert"/>
    </insert>

    <update id="updateResearchedUsage" parameterType="map">
        update ${schema}.df_usage
        set
            standard_number = #{usage.standardNumber},
            standard_number_type = #{usage.standardNumberType},
            system_title = #{usage.systemTitle},
            wr_wrk_inst = #{usage.wrWrkInst},
            status_ind = #{status},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid = #{usage.usageId}
    </update>

    <select id="updateNtsWithdrawnUsagesAndGetIds" parameterType="map" resultType="string">
        with works as (
            select
                u.df_usage_batch_uid,
                u.wr_wrk_inst,
                sum(u.gross_amount)
            from ${schema}.df_usage u
            join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
            where ub.product_family in
                <foreach collection="productFamilies" item="productFamily" separator="," open="(" close=")">
                    #{productFamily}
                </foreach>
                and u.status_ind  = #{statusToFind}
            group by u.wr_wrk_inst, u.df_usage_batch_uid
            having sum(u.gross_amount) &lt; #{minimumTotal}
        )
        update ${schema}.df_usage
        set
            status_ind = #{statusToSet}
        where df_usage_batch_uid in (select df_usage_batch_uid from works)
            and wr_wrk_inst in (select wr_wrk_inst from works)
        returning df_usage_uid
    </select>

    <select id="deleteFromScenarioByPayees" parameterType="map" resultType="string">
        with u as (
            update ${schema}.df_usage u
            set
                status_ind = #{status},
                df_scenario_uid = null,
                payee_account_number = null,
                service_fee = null,
                service_fee_amount = 0,
                net_amount = 0,
                updated_by_user = #{updateUser},
                updated_datetime = now(),
                record_version = u.record_version + 1
            from ${schema}.df_scenario s
            where s.status_ind = #{scenarioStatus}
                and payee_account_number in
                <foreach collection="accountNumbers" item="accountNumber" separator="," open="(" close=")">
                    #{accountNumber}
                </foreach>
                <if test="scenarioIds.size() > 0">
                    and u.df_scenario_uid in
                    <foreach collection="scenarioIds" item="scenarioId" open="(" separator="," close=")">
                        #{scenarioId}
                    </foreach>
                </if>
            returning df_usage_uid
        )
        update ${schema}.df_usage_fas
        set
            is_rh_participating_flag = false,
            is_payee_participating_flag = false,
            <include refid="StoredEntityMapper.update"/>
        from u
        where df_usage_fas_uid = u.df_usage_uid
        returning u.df_usage_uid
    </select>

    <select id="redesignateToNtsWithdrawnByPayees" parameterType="map" resultType="string">
        with u as (
            update ${schema}.df_usage u
            set
                status_ind = #{status},
                df_scenario_uid = null,
                payee_account_number = null,
                service_fee = null,
                service_fee_amount = 0,
                net_amount = 0,
                updated_by_user = #{updateUser},
                updated_datetime = now(),
                record_version = u.record_version + 1
            from ${schema}.df_scenario s
            where s.status_ind = #{scenarioStatus}
                and payee_account_number in
                <foreach collection="accountNumbers" item="accountNumber" separator="," open="(" close=")">
                    #{accountNumber}
                </foreach>
                <if test="scenarioIds.size() > 0">
                    and u.df_scenario_uid in
                    <foreach collection="scenarioIds" item="scenarioId" open="(" separator="," close=")">
                        #{scenarioId}
                    </foreach>
                </if>
            returning df_usage_uid
        )
        update ${schema}.df_usage_fas
        set
            is_rh_participating_flag = false,
            is_payee_participating_flag = false,
            <include refid="StoredEntityMapper.update"/>
        from u
        where df_usage_fas_uid = u.df_usage_uid
        returning u.df_usage_uid
    </select>

    <select id="findForReconcile" resultMap="IUsageMapper.usageResultMap" parameterType="string">
        select
            u.df_usage_uid,
            u.wr_wrk_inst,
            u.work_title,
            u.system_title,
            u.rh_account_number,
            rh.df_rightsholder_uid rh_id,
            rh.name rh_name,
            u.payee_account_number,
            p.df_rightsholder_uid payee_id,
            p.name payee_name,
            u.product_family,
            u.status_ind,
            u.gross_amount
        from ${schema}.df_usage u
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where df_scenario_uid = #{scenarioId}
        order by df_usage_uid
    </select>

    <select id="findRightsholdersInformation" resultMap="IUsageMapper.usageResultMap" parameterType="string">
        select distinct
            u.rh_account_number,
            rh.df_rightsholder_uid rh_id,
            p.df_rightsholder_uid payee_id,
            u.payee_account_number,
            ufas.is_rh_participating_flag,
            ufas.is_payee_participating_flag
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where df_scenario_uid = #{scenarioId}
    </select>

    <select id="findAccountNumbersInvalidForExclude" parameterType="map" resultType="long">
        select distinct(payee_account_number)
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        join ${schema}.df_scenario s on u.df_scenario_uid = s.df_scenario_uid
        where s.status_ind = #{scenarioStatus}
            and payee_account_number in
            <foreach collection="accountNumbers" item="accountNumber" separator="," open="(" close=")">
                #{accountNumber}
            </foreach>
            <if test="scenarioIds.size() > 0">
                and u.df_scenario_uid in
                <foreach collection="scenarioIds" item="scenarioId" open="(" separator="," close=")">
                    #{scenarioId}
                </foreach>
            </if>
        group by payee_account_number
        having count(distinct(is_payee_participating_flag)) > 1
    </select>

    <select id="findWithAmountsAndRightsholders" resultMap="IUsageMapper.usageAmountResultMap" parameterType="map">
        select
            u.df_usage_uid,
            u.gross_amount,
            u.net_amount,
            u.service_fee,
            u.service_fee_amount,
            ufas.reported_value,
            u.service_fee,
            u.created_datetime,
            u.updated_datetime,
            u.created_by_user,
            u.updated_by_user,
            u.record_version,
            u.status_ind,
            u.product_family,
            r.df_rightsholder_uid rh_id,
            u.rh_account_number,
            r.name rh_name
        from ${schema}.df_usage u
        join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder r on u.rh_account_number = r.rh_account_number
        <include refid="IUsageMapper.usageFilter"/>
            and u.status_ind = #{status}
        order by u.df_usage_uid
    </select>

    <update id="updateUsagesWorkAndStatus" parameterType="map">
        update ${schema}.df_usage
        set
            wr_wrk_inst = #{work.wrWrkInst},
            status_ind = #{status},
            work_title = #{work.mainTitle},
            system_title = #{work.mainTitle},
            rh_account_number = null,
            standard_number = #{work.mainIdno},
            standard_number_type = #{work.mainIdnoType},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid in
            <foreach collection="usageIds" item="usageId" separator="," open="(" close=")">
                #{usageId}
            </foreach>
    </update>
</mapper>
