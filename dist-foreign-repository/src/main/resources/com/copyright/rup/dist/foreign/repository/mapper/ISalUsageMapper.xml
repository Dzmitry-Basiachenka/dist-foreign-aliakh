<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ISalUsageMapper">

    <resultMap id="salUsageResultMap" type="Usage" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_usage_uid"/>
        <result property="batchId" column="df_usage_batch_uid"/>
        <result property="scenarioId" column="df_scenario_uid"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="workTitle" column="work_title"/>
        <result property="systemTitle" column="system_title"/>
        <result property="standardNumber" column="standard_number"/>
        <result property="standardNumberType" column="standard_number_type"/>
        <result property="rightsholder.id" column="rh_id"/>
        <result property="rightsholder.accountNumber" column="rh_account_number"/>
        <result property="rightsholder.name" column="rh_name"/>
        <result property="payee.id" column="payee_id"/>
        <result property="payee.accountNumber" column="payee_account_number"/>
        <result property="payee.name" column="payee_name"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="netAmount" column="net_amount"/>
        <result property="serviceFee" column="service_fee"/>
        <result property="status" column="status_ind"/>
        <result property="productFamily" column="product_family"/>
        <result property="comment" column="comment"/>
        <result property="salUsage.detailType" column="detail_type"/>
        <result property="salUsage.licenseeAccountNumber" column="licensee_account_number"/>
        <result property="salUsage.licenseeName" column="licensee_name"/>
        <result property="salUsage.grade" column="grade"/>
        <result property="salUsage.gradeGroup" column="grade_group"/>
        <result property="salUsage.assessmentName" column="assessment_name"/>
        <result property="salUsage.assessmentType" column="assessment_type"/>
        <result property="salUsage.reportedWorkPortionId" column="reported_work_portion_id"/>
        <result property="salUsage.reportedArticle" column="reported_article"/>
        <result property="salUsage.reportedStandardNumber" column="reported_standard_number"/>
        <result property="salUsage.reportedAuthor" column="reported_author"/>
        <result property="salUsage.reportedPublisher" column="reported_publisher"/>
        <result property="salUsage.reportedPublicationDate" column="reported_publication_date"/>
        <result property="salUsage.reportedPageRange" column="reported_page_range"/>
        <result property="salUsage.reportedVolNumberSeries" column="reported_vol_number_series"/>
        <result property="salUsage.reportedMediaType" column="reported_media_type"/>
        <result property="salUsage.mediaTypeWeight" column="media_type_weight"/>
        <result property="salUsage.coverageYear" column="coverage_year"/>
        <result property="salUsage.scoredAssessmentDate" column="scored_assessment_date"/>
        <result property="salUsage.questionIdentifier" column="question_identifier"/>
        <result property="salUsage.states" column="states"/>
        <result property="salUsage.numberOfViews" column="number_of_views"/>
        <result property="salUsage.batchPeriodEndDate" column="batch_period_end_date"/>
    </resultMap>

    <resultMap id="salUsageDtoResultMap" type="UsageDto" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_usage_uid"/>
        <result property="batchName" column="batch_name"/>
        <result property="periodEndDate" column="batch_period_end_date"/>
        <result property="wrWrkInst" column="wr_wrk_inst"/>
        <result property="workTitle" column="work_title"/>
        <result property="systemTitle" column="system_title"/>
        <result property="standardNumber" column="standard_number"/>
        <result property="standardNumberType" column="standard_number_type"/>
        <result property="rhAccountNumber" column="rh_account_number"/>
        <result property="rhName" column="rh_name"/>
        <result property="payeeAccountNumber" column="payee_account_number"/>
        <result property="payeeName" column="payee_name"/>
        <result property="grossAmount" column="gross_amount"/>
        <result property="serviceFeeAmount" column="service_fee_amount"/>
        <result property="netAmount" column="net_amount"/>
        <result property="serviceFee" column="service_fee"/>
        <result property="scenarioName" column="scenario_name"/>
        <result property="checkNumber" column="check_number"/>
        <result property="checkDate" column="check_date"/>
        <result property="cccEventId" column="ccc_event_id"/>
        <result property="distributionName" column="distribution_name"/>
        <result property="distributionDate" column="distribution_date"/>
        <result property="status" column="status_ind"/>
        <result property="productFamily" column="product_family"/>
        <result property="comment" column="comment"/>
        <result property="salUsage.detailType" column="detail_type"/>
        <result property="salUsage.licenseeAccountNumber" column="licensee_account_number"/>
        <result property="salUsage.licenseeName" column="licensee_name"/>
        <result property="salUsage.grade" column="grade"/>
        <result property="salUsage.gradeGroup" column="grade_group"/>
        <result property="salUsage.assessmentName" column="assessment_name"/>
        <result property="salUsage.assessmentType" column="assessment_type"/>
        <result property="salUsage.reportedWorkPortionId" column="reported_work_portion_id"/>
        <result property="salUsage.reportedArticle" column="reported_article"/>
        <result property="salUsage.reportedStandardNumber" column="reported_standard_number"/>
        <result property="salUsage.reportedAuthor" column="reported_author"/>
        <result property="salUsage.reportedPublisher" column="reported_publisher"/>
        <result property="salUsage.reportedPublicationDate" column="reported_publication_date"/>
        <result property="salUsage.reportedPageRange" column="reported_page_range"/>
        <result property="salUsage.reportedVolNumberSeries" column="reported_vol_number_series"/>
        <result property="salUsage.reportedMediaType" column="reported_media_type"/>
        <result property="salUsage.mediaTypeWeight" column="media_type_weight"/>
        <result property="salUsage.coverageYear" column="coverage_year"/>
        <result property="salUsage.scoredAssessmentDate" column="scored_assessment_date"/>
        <result property="salUsage.questionIdentifier" column="question_identifier"/>
        <result property="salUsage.states" column="states"/>
        <result property="salUsage.numberOfViews" column="number_of_views"/>
        <result property="salUsage.batchPeriodEndDate" column="batch_period_end_date"/>
    </resultMap>

    <sql id="salUsageColumns">
        u.df_usage_batch_uid,
        ub.name batch_name,
        ub.payment_date batch_period_end_date,
        u.wr_wrk_inst,
        u.work_title,
        u.system_title,
        u.standard_number,
        u.standard_number_type,
        u.rh_account_number,
        rh.name rh_name,
        ub.sal_fields->>'licensee_account_number' licensee_account_number,
        ub.sal_fields->>'licensee_name' licensee_name,
        u.status_ind,
        u.product_family,
        u.comment,
        usal.detail_type,
        usal.grade,
        usal.grade_group,
        usal.assessment_name,
        usal.assessment_type,
        usal.reported_work_portion_id,
        usal.reported_article,
        usal.reported_standard_number,
        usal.reported_author,
        usal.reported_publisher,
        usal.reported_publication_date,
        usal.reported_page_range,
        usal.reported_vol_number_series,
        usal.reported_media_type,
        usal.media_type_weight,
        usal.coverage_year,
        usal.scored_assessment_date,
        usal.question_identifier,
        usal.states,
        usal.number_of_views,
        ub.payment_date batch_period_end_date,
        u.created_datetime,
        u.updated_datetime,
        u.created_by_user,
        u.updated_by_user,
        u.record_version
    </sql>

    <sql id="selectArchivedDtoByScenarioIdSql">
        <include refid="ISalUsageMapper.selectUsageDtos">
            <property name="detail_table" value="df_usage_archive"/>
            <property name="detail_uid" value="df_usage_archive_uid"/>
        </include>
    </sql>

    <sql id="selectDtoByScenarioIdSql">
        <include refid="ISalUsageMapper.selectUsageDtos">
            <property name="detail_table" value="df_usage"/>
            <property name="detail_uid" value="df_usage_uid"/>
        </include>
    </sql>

    <sql id="selectUsageDtos">
        select
            u.${detail_uid} df_usage_uid,
            <include refid="ISalUsageMapper.salUsageColumns"/>,
            u.payee_account_number,
            p.name payee_name,
            u.gross_amount,
            u.service_fee_amount,
            u.net_amount,
            u.service_fee
        from ${schema}.df_scenario s
        join ${schema}.${detail_table} u on s.df_scenario_uid = u.df_scenario_uid
        join ${schema}.df_usage_sal usal on u.${detail_uid} = usal.df_usage_sal_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where s.df_scenario_uid = #{scenarioId}
        order by u.rh_account_number, u.${detail_uid}
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="chooseSortProperty">
        <choose>
            <when test="sort.property == 'detailId'">
                ${detail_uid} <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'batchName'">
                ub.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'periodEndDate'">
                batch_period_end_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'wrWrkInst'">
                u.wr_wrk_inst <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'workTitle'">
                u.work_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'systemTitle'">
                u.system_title <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'standardNumber'">
                u.standard_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'standardNumberType'">
                u.standard_number_type <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhAccountNumber'">
                u.rh_account_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'rhName'">
                rh.name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'licenseeAccountNumber'">
                licensee_account_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'licenseeName'">
                licensee_name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'status'">
                u.status_ind <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'productFamily'">
                u.product_family <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'comment'">
                u.comment <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'detailType'">
                usal.detail_type <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'grade'">
                usal.grade <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'gradeGroup'">
                usal.grade_group <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'assessmentName'">
                usal.assessment_name <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'assessmentType'">
                usal.assessment_type <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedWorkPortionId'">
                usal.reported_work_portion_id <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedArticle'">
                usal.reported_article <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedStandardNumber'">
                usal.reported_standard_number <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedAuthor'">
                usal.reported_author <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedPublisher'">
                usal.reported_publisher <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedPublicationDate'">
                usal.reported_publication_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedPageRange'">
                usal.reported_page_range <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedVolNumberSeries'">
                usal.reported_vol_number_series <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'reportedMediaType'">
                usal.reported_media_type <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'coverageYear'">
                usal.coverage_year <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'scoredAssessmentDate'">
                usal.scored_assessment_date <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'questionIdentifier'">
                usal.question_identifier <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'states'">
                usal.states <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'numberOfViews'">
                usal.number_of_views <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'grossAmount'">
                u.gross_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'serviceFeeAmount'">
                u.service_fee_amount <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'serviceFee'">
                u.service_fee <include refid="IUsageMapper.direction"/>
            </when>
            <when test="sort.property == 'netAmount'">
                u.net_amount <include refid="IUsageMapper.direction"/>
            </when>
        </choose>
    </sql>

    <sql id="ifSortable">
        order by
        <choose>
            <when test="null != sort">
                <include refid="ISalUsageMapper.chooseSortProperty">
                    <property name="detail_uid" value="u.df_usage_uid"/>
                </include>
            </when>
            <otherwise>
                updated_datetime desc
            </otherwise>
        </choose>,
        df_usage_uid
    </sql>

    <sql id="usageFilter">
        <where>
            <if test="filter.usageBatchesIds.size() > 0">
                and
                <foreach collection="filter.usageBatchesIds" item="usageBatchId" open="(" separator=" or " close=")">
                    u.df_usage_batch_uid = #{usageBatchId}
                </foreach>
            </if>
            <if test="null != filter.productFamily">
                and u.product_family = #{filter.productFamily}
            </if>
            <if test="null != filter.usageStatus">
                and u.status_ind = #{filter.usageStatus}
            </if>
            <if test="null != filter.salDetailType">
                and usal.detail_type = #{filter.salDetailType}
            </if>
        </where>
    </sql>

    <sql id="selectDtosByFilterSql">
        select
            u.df_usage_uid,
            <include refid="ISalUsageMapper.salUsageColumns"/>
        from ${schema}.df_usage u
        join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        <include refid="ISalUsageMapper.usageFilter"/>
            and u.df_scenario_uid is null
        <include refid="ISalUsageMapper.ifSortable"/>
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="selectCountByFilterSql">
        select count(1)
        from ${schema}.df_usage u
        join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        <include refid="ISalUsageMapper.usageFilter"/>
            and u.df_scenario_uid is null
    </sql>

    <sql id="findByScenarioIdAndRhAccountNumberSql">
        select
            u.${detail_uid},
            u.gross_amount,
            u.service_fee_amount,
            u.net_amount,
            u.service_fee,
            <include refid="ISalUsageMapper.salUsageColumns"/>
            <include refid="ISalUsageMapper.drillDownFromWhereClauses"/>
        order by
        <choose>
            <when test="null != sort">
                <include refid="ISalUsageMapper.chooseSortProperty"/>
            </when>
            <otherwise>
                u.${detail_uid}
            </otherwise>
        </choose>
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="drillDownFromWhereClauses">
        from ${schema}.df_scenario s
        join ${schema}.${detail_table} u on s.df_scenario_uid = u.df_scenario_uid
        join ${schema}.df_usage_sal usal on u.${detail_uid} = usal.df_usage_sal_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where u.df_scenario_uid = #{scenarioId}
            and u.rh_account_number = #{accountNumber}
            <if test="null != searchValue">
                and (
                u.${detail_uid} like '%' || #{searchValue} || '%' or
                u.standard_number ilike '%' || #{searchValue} || '%' or
                cast(u.wr_wrk_inst as text) like '%' || #{searchValue} || '%'
                )
            </if>
    </sql>

    <insert id="insertItemBankDetail" parameterType="Usage">
        with u as (
            insert into ${schema}.df_usage (
                df_usage_uid,
                df_usage_batch_uid,
                wr_wrk_inst,
                work_title,
                status_ind,
                product_family,
                comment,
                <include refid="StoredEntityMapper.additionalColumns"/>
            )
            values (
                #{id},
                #{batchId},
                #{wrWrkInst},
                #{workTitle},
                #{status},
                #{productFamily},
                #{comment},
                <include refid="StoredEntityMapper.insert"/>
            )
        )
        insert into ${schema}.df_usage_sal (
            df_usage_sal_uid,
            assessment_name,
            coverage_year,
            grade,
            grade_group,
            reported_work_portion_id,
            reported_standard_number,
            reported_media_type,
            media_type_weight,
            reported_article,
            reported_author,
            reported_publisher,
            reported_publication_date,
            reported_page_range,
            reported_vol_number_series,
            detail_type,
            <include refid="StoredEntityMapper.additionalColumns"/>
        )
        values (
            #{id},
            #{salUsage.assessmentName},
            #{salUsage.coverageYear},
            #{salUsage.grade},
            #{salUsage.gradeGroup},
            #{salUsage.reportedWorkPortionId},
            #{salUsage.reportedStandardNumber},
            #{salUsage.reportedMediaType},
            #{salUsage.mediaTypeWeight},
            #{salUsage.reportedArticle},
            #{salUsage.reportedAuthor},
            #{salUsage.reportedPublisher},
            #{salUsage.reportedPublicationDate},
            #{salUsage.reportedPageRange},
            #{salUsage.reportedVolNumberSeries},
            #{salUsage.detailType},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <insert id="insertUsageDataDetail" parameterType="map">
        with ibu as (
            select
                u.df_usage_batch_uid,
                u.wr_wrk_inst,
                u.work_title,
                u.system_title,
                u.standard_number,
                u.standard_number_type,
                u.rh_account_number,
                usal.assessment_name,
                usal.coverage_year,
                usal.reported_standard_number,
                usal.reported_media_type,
                usal.media_type_weight,
                usal.reported_article,
                usal.reported_author,
                usal.reported_publisher,
                usal.reported_publication_date,
                usal.reported_page_range,
                usal.reported_vol_number_series
            from ${schema}.df_usage u
            join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
            where usal.reported_work_portion_id = #{usage.salUsage.reportedWorkPortionId}
                and usal.detail_type = #{itemBankDetailType}
        ),
        u as (
            insert into ${schema}.df_usage (
                df_usage_uid,
                df_usage_batch_uid,
                wr_wrk_inst,
                work_title,
                system_title,
                standard_number,
                standard_number_type,
                rh_account_number,
                status_ind,
                product_family,
                comment,
                <include refid="StoredEntityMapper.additionalColumns"/>
            )
            select
                #{usage.id},
                df_usage_batch_uid,
                wr_wrk_inst,
                work_title,
                system_title,
                standard_number,
                standard_number_type,
                rh_account_number,
                #{usage.status},
                #{usage.productFamily},
                #{usage.comment},
                <include refid="StoredEntityMapper.insert"/>
            from ibu
        )
        insert into ${schema}.df_usage_sal (
            df_usage_sal_uid,
            assessment_name,
            assessment_type,
            coverage_year,
            scored_assessment_date,
            question_identifier,
            states,
            number_of_views,
            grade,
            grade_group,
            reported_work_portion_id,
            reported_standard_number,
            reported_media_type,
            media_type_weight,
            reported_article,
            reported_author,
            reported_publisher,
            reported_publication_date,
            reported_page_range,
            reported_vol_number_series,
            detail_type,
            <include refid="StoredEntityMapper.additionalColumns"/>
        )
        select
            #{usage.id},
            assessment_name,
            #{usage.salUsage.assessmentType},
            coverage_year,
            #{usage.salUsage.scoredAssessmentDate},
            #{usage.salUsage.questionIdentifier},
            #{usage.salUsage.states},
            #{usage.salUsage.numberOfViews},
            #{usage.salUsage.grade},
            #{usage.salUsage.gradeGroup},
            #{usage.salUsage.reportedWorkPortionId},
            reported_standard_number,
            reported_media_type,
            media_type_weight,
            reported_article,
            reported_author,
            reported_publisher,
            reported_publication_date,
            reported_page_range,
            reported_vol_number_series,
            #{usage.salUsage.detailType},
            <include refid="StoredEntityMapper.insert"/>
        from ibu
    </insert>

    <select id="findByScenarioIdAndRhAccountNumber" parameterType="map" resultMap="salUsageDtoResultMap">
        <include refid="ISalUsageMapper.findByScenarioIdAndRhAccountNumberSql">
            <property name="detail_table" value="df_usage"/>
            <property name="detail_uid" value="df_usage_uid"/>
        </include>
    </select>

    <select id="findCountByScenarioIdAndRhAccountNumber" parameterType="map" resultType="int">
        select count(1)
        <include refid="drillDownFromWhereClauses">
            <property name="detail_table" value="df_usage"/>
            <property name="detail_uid" value="df_usage_uid"/>
        </include>
    </select>

    <select id="findCountByFilter" parameterType="map" resultType="int">
        <include refid="ISalUsageMapper.selectCountByFilterSql"/>
    </select>

    <select id="findDtosByFilter" resultMap="salUsageDtoResultMap" parameterType="map" fetchSize="${usageSelectFetchSize}">
        <include refid="ISalUsageMapper.selectDtosByFilterSql"/>
    </select>

    <sql id="selectCountForAuditSql">
        select
        <choose>
            <when test="null != filter.cccEventId || null != filter.distributionName">
                <include refid="ISalUsageMapper.selectArchivedCountForAuditSql"/>
            </when>
            <otherwise>
                (select count(1) usage_count
                from ${schema}.df_usage u
                join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
                join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
                left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
                <where>
                    <include refid="ISalUsageMapper.salAuditFilterWhereClause">
                        <property name="detail_uid" value="u.df_usage_uid"/>
                    </include>
                </where>) +
                <include refid="ISalUsageMapper.selectArchivedCountForAuditSql"/>
            </otherwise>
        </choose>
    </sql>

    <sql id="selectArchivedCountForAuditSql">
        (select count(1) usage_count
        from ${schema}.df_usage_archive u
        join ${schema}.df_usage_sal usal on u.df_usage_archive_uid = usal.df_usage_sal_uid
        left join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
        <include refid="ISalUsageMapper.archivedSalAuditFilterWhereClause"/>)
    </sql>

    <sql id="selectForAuditSql">
        <choose>
            <when test="null != filter.cccEventId || null != filter.distributionName">
                <include refid="ISalUsageMapper.selectArchivedUsagesForAuditSql"/>
            </when>
            <otherwise>
                select
                    u.df_usage_uid,
                    u.status_ind,
                    u.product_family,
                    ub.name batch_name,
                    ub.payment_date batch_period_end_date,
                    u.rh_account_number,
                    rh.name rh_name,
                    u.payee_account_number,
                    payee.name payee_name,
                    wr_wrk_inst,
                    work_title,
                    system_title,
                    standard_number,
                    standard_number_type,
                    u.gross_amount,
                    u.net_amount,
                    service_fee_amount,
                    s.name scenario_name,
                    null check_number,
                    null check_date,
                    null ccc_event_id,
                    null distribution_name,
                    null distribution_date,
                    u.comment,
                    usal.detail_type,
                    usal.grade,
                    usal.grade_group,
                    usal.assessment_name,
                    usal.assessment_type,
                    usal.reported_work_portion_id,
                    usal.reported_article,
                    usal.reported_standard_number,
                    usal.reported_author,
                    usal.reported_publisher,
                    usal.reported_publication_date,
                    usal.reported_page_range,
                    usal.reported_vol_number_series,
                    usal.reported_media_type,
                    usal.media_type_weight,
                    usal.coverage_year,
                    usal.scored_assessment_date,
                    usal.question_identifier,
                    usal.states,
                    usal.number_of_views
                from ${schema}.df_usage u
                join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
                left join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
                left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
                left join ${schema}.df_rightsholder payee on payee.rh_account_number = u.payee_account_number
                left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
                <where>
                    <include refid="ISalUsageMapper.salAuditFilterWhereClause">
                        <property name="detail_uid" value="u.df_usage_uid"/>
                    </include>
                </where>
                union
                <include refid="ISalUsageMapper.selectArchivedUsagesForAuditSql"/>
            </otherwise>
        </choose>
        order by
        <choose>
            <when test="null != sort">
                <choose>
                    <when test="sort.property == 'detailId'">
                        df_usage_uid
                    </when>
                    <when test="sort.property == 'status'">
                        status_ind
                    </when>
                    <when test="sort.property == 'productFamily'">
                        product_family
                    </when>
                    <when test="sort.property == 'batchName'">
                        batch_name
                    </when>
                    <when test="sort.property == 'batchPeriodEndDate'">
                        batch_period_end_date
                    </when>
                    <when test="sort.property == 'rhAccountNumber'">
                        rh_account_number
                    </when>
                    <when test="sort.property == 'rhName'">
                        rh_name
                    </when>
                    <when test="sort.property == 'payeeAccountNumber'">
                        payee_account_number
                    </when>
                    <when test="sort.property == 'payeeName'">
                        payee_name
                    </when>
                    <when test="sort.property == 'wrWrkInst'">
                        wr_wrk_inst
                    </when>
                    <when test="sort.property == 'workTitle'">
                        work_title
                    </when>
                    <when test="sort.property == 'systemTitle'">
                        system_title
                    </when>
                    <when test="sort.property == 'standardNumber'">
                        standard_number
                    </when>
                    <when test="sort.property == 'standardNumberType'">
                        standard_number_type
                    </when>
                    <when test="sort.property == 'grossAmount'">
                        gross_amount
                    </when>
                    <when test="sort.property == 'serviceFeeAmount'">
                        service_fee_amount
                    </when>
                    <when test="sort.property == 'netAmount'">
                        net_amount
                    </when>
                    <when test="sort.property == 'scenarioName'">
                        scenario_name
                    </when>
                    <when test="sort.property == 'checkNumber'">
                        check_number
                    </when>
                    <when test="sort.property == 'checkDate'">
                        check_date
                    </when>
                    <when test="sort.property == 'cccEventId'">
                        ccc_event_id
                    </when>
                    <when test="sort.property == 'distributionName'">
                        distribution_name
                    </when>
                    <when test="sort.property == 'distributionDate'">
                        distribution_date
                    </when>
                    <when test="sort.property == 'comment'">
                        comment
                    </when>
                    <when test="sort.property == 'detailType'">
                        detail_type
                    </when>
                    <when test="sort.property == 'grade'">
                        grade
                    </when>
                    <when test="sort.property == 'gradeGroup'">
                        grade_group
                    </when>
                    <when test="sort.property == 'assessmentName'">
                        assessment_name
                    </when>
                    <when test="sort.property == 'assessmentType'">
                        assessment_type
                    </when>
                    <when test="sort.property == 'reportedWorkPortionId'">
                        reported_work_portion_id
                    </when>
                    <when test="sort.property == 'reportedArticle'">
                        reported_article
                    </when>
                    <when test="sort.property == 'reportedStandardNumber'">
                        reported_standard_number
                    </when>
                    <when test="sort.property == 'reportedAuthor'">
                        reported_author
                    </when>
                    <when test="sort.property == 'reportedPublisher'">
                        reported_publisher
                    </when>
                    <when test="sort.property == 'reportedPublicationDate'">
                        reported_publication_date
                    </when>
                    <when test="sort.property == 'reportedPageRange'">
                        reported_page_range
                    </when>
                    <when test="sort.property == 'reportedVolNumberSeries'">
                        reported_vol_number_series
                    </when>
                    <when test="sort.property == 'reportedMediaType'">
                        reported_media_type
                    </when>
                    <when test="sort.property == 'mediaTypeWeight'">
                        media_type_weight
                    </when>
                    <when test="sort.property == 'coverageYear'">
                        coverage_year
                    </when>
                    <when test="sort.property == 'scoredAssessmentDate'">
                        scored_assessment_date
                    </when>
                    <when test="sort.property == 'questionIdentifier'">
                        question_identifier
                    </when>
                    <when test="sort.property == 'states'">
                        states
                    </when>
                    <when test="sort.property == 'numberOfViews'">
                        number_of_views
                    </when>
                </choose>
                <include refid="IUsageMapper.direction"/>,
                df_usage_uid
            </when>
            <otherwise>
                df_usage_uid
            </otherwise>
        </choose>
        <include refid="IUsageMapper.ifPageable"/>
    </sql>

    <sql id="selectArchivedUsagesForAuditSql">
        select
            df_usage_archive_uid df_usage_uid,
            u.status_ind,
            u.product_family,
            ub.name batch_name,
            ub.payment_date batch_period_end_date,
            u.rh_account_number,
            rh.name rh_name,
            u.payee_account_number,
            payee.name payee_name,
            wr_wrk_inst,
            work_title,
            system_title,
            standard_number,
            standard_number_type,
            u.gross_amount,
            u.net_amount,
            service_fee_amount,
            s.name scenario_name,
            u.check_number,
            u.check_date,
            u.ccc_event_id,
            u.distribution_name,
            u.distribution_date,
            u.comment,
            usal.detail_type,
            usal.grade,
            usal.grade_group,
            usal.assessment_name,
            usal.assessment_type,
            usal.reported_work_portion_id,
            usal.reported_article,
            usal.reported_standard_number,
            usal.reported_author,
            usal.reported_publisher,
            usal.reported_publication_date,
            usal.reported_page_range,
            usal.reported_vol_number_series,
            usal.reported_media_type,
            usal.media_type_weight,
            usal.coverage_year,
            usal.scored_assessment_date,
            usal.question_identifier,
            usal.states,
            usal.number_of_views
        from ${schema}.df_usage_archive u
        join ${schema}.df_usage_sal usal on u.df_usage_archive_uid = usal.df_usage_sal_uid
        left join ${schema}.df_usage_batch ub on ub.df_usage_batch_uid = u.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder payee on payee.rh_account_number = u.payee_account_number
        left join ${schema}.df_scenario s on s.df_scenario_uid = u.df_scenario_uid
        <include refid="ISalUsageMapper.archivedSalAuditFilterWhereClause"/>
    </sql>

    <sql id="archivedSalAuditFilterWhereClause">
        <where>
            <include refid="ISalUsageMapper.salAuditFilterWhereClause">
                <property name="detail_uid" value="u.df_usage_archive_uid"/>
            </include>
            <if test="null != filter.cccEventId">
                and ccc_event_id ilike #{filter.cccEventId}
            </if>
            <if test="null != filter.distributionName">
                and distribution_name ilike #{filter.distributionName}
            </if>
        </where>
    </sql>

    <sql id="salAuditFilterWhereClause">
        <if test="!filter.rhAccountNumbers.isEmpty()">
            u.rh_account_number in
            <foreach collection="filter.rhAccountNumbers" item="accountNumber" separator="," open="(" close=")">
                #{accountNumber}
            </foreach>
        </if>
        <if test="!filter.licenseeAccountNumbers.isEmpty()">
            and (ub.sal_fields->>'licensee_account_number')::numeric in
            <foreach collection="filter.licenseeAccountNumbers" item="licenseeAccountNumber" separator="," open="(" close=")">
                #{licenseeAccountNumber}
            </foreach>
        </if>
        <if test="!filter.batchesIds.isEmpty()">
            and u.df_usage_batch_uid in
            <foreach collection="filter.batchesIds" item="batchId" separator="," open="(" close=")">
                #{batchId}
            </foreach>
        </if>
        <if test="!filter.statuses.isEmpty()">
            and u.status_ind in
            <foreach collection="filter.statuses" item="status" separator="," open="(" close=")">
                #{status}
            </foreach>
        </if>
        <if test="null != filter.productFamily">
            and u.product_family = #{filter.productFamily}
        </if>
        <if test="null != filter.salDetailType">
            and usal.detail_type = #{filter.salDetailType}
        </if>
        <if test="null != filter.usagePeriod">
            and extract(year from ub.payment_date) = #{filter.usagePeriod}
        </if>
        <if test="null != filter.searchValue">
            and (
            ${detail_uid} like '%' || #{filter.searchValue} || '%' or
            cast(wr_wrk_inst as text) like '%' || #{filter.searchValue} || '%' or
            system_title ilike '%' || #{filter.searchValue} || '%')
        </if>
    </sql>

    <select id="findCountForAudit" parameterType="map" resultType="int">
        <include refid="ISalUsageMapper.selectCountForAuditSql"/>
    </select>

    <select id="findForAudit" parameterType="map" resultMap="salUsageDtoResultMap">
        <include refid="ISalUsageMapper.selectForAuditSql"/>
    </select>

    <select id="findByIds" resultMap="salUsageResultMap">
        select
            u.df_usage_uid,
            u.df_scenario_uid,
            u.gross_amount,
            u.service_fee_amount,
            u.net_amount,
            u.service_fee,
            u.payee_account_number,
            p.name payee_name,
            p.df_rightsholder_uid payee_id,
            <include refid="salUsageColumns"/>
        from ${schema}.df_usage u
        join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where u.df_usage_uid in
        <foreach collection="list" item="usageId" open="(" separator="," close=")">
            #{usageId}
        </foreach>
        order by u.df_usage_uid
    </select>

    <select id="workPortionIdExists" resultType="boolean" parameterType="string">
        select exists (
            select 1
            from ${schema}.df_usage_sal
            where reported_work_portion_id = #{workPortionId}
        )
    </select>

    <select id="workPortionIdExistsInBatch" resultType="boolean" parameterType="map">
        select exists (
            select 1
            from ${schema}.df_usage u
            join ${schema}.df_usage_sal usal on df_usage_uid = usal.df_usage_sal_uid
            where u.df_usage_batch_uid = #{batchId}
                and usal.reported_work_portion_id = #{workPortionId}
        )
    </select>

    <select id="findItemBankDetailGradeByWorkPortionId" resultType="string" parameterType="map">
        select grade
        from ${schema}.df_usage_sal
        where reported_work_portion_id = #{workPortionId}
            and detail_type = #{detailType}
    </select>

    <select id="usageDataExist" resultType="boolean" parameterType="map">
        select exists (
            select 1
            from ${schema}.df_usage_sal us
            join ${schema}.df_usage u on us.df_usage_sal_uid = u.df_usage_uid
            join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
            where us.detail_type = #{detailType}
                and ub.df_usage_batch_uid = #{batchId}
        )
    </select>

    <delete id="deleteUsageData" parameterType="map">
        with usage_ids as (
            delete from ${schema}.df_usage u
            where df_usage_uid in (
                select df_usage_uid
                from ${schema}.df_usage u
                join ${schema}.df_usage_sal us on u.df_usage_uid = us.df_usage_sal_uid
                where us.detail_type = #{detailType}
                    and u.df_usage_batch_uid = #{batchId}
            )
            returning df_usage_uid
        )
        delete from ${schema}.df_usage_sal
        where df_usage_sal_uid in (select df_usage_uid from usage_ids)
    </delete>

    <delete id="deleteByBatchId" parameterType="string">
        with usage_ids as (
            delete from ${schema}.df_usage
            where df_usage_batch_uid = #{batchId}
            returning df_usage_uid
        )
        delete from ${schema}.df_usage_sal
        where df_usage_sal_uid in (select df_usage_uid from usage_ids)
    </delete>

    <select id="findUsageDataGradeGroups" resultType="GradeGroupEnum" parameterType="map">
        select distinct grade_group
        from ${schema}.df_usage u
        join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
        <include refid="ISalUsageMapper.usageFilter"/>
            and detail_type = #{detailType}
        order by grade_group
    </select>

    <update id="addToScenario" parameterType="map">
        update ${schema}.df_usage u
        set
            df_scenario_uid = #{scenarioId},
            status_ind = 'LOCKED',
            updated_by_user = #{updateUser},
            updated_datetime = now(),
            record_version = u.record_version + 1
        from ${schema}.df_usage_sal usal
        <include refid="ISalUsageMapper.usageFilter"/>
            and u.df_usage_uid = usal.df_usage_sal_uid
    </update>

    <update id="updatePayeeByAccountNumber" parameterType="map">
        update ${schema}.df_usage
        set
            payee_account_number = #{payeeAccountNumber},
            <include refid="StoredEntityMapper.update"/>
        where rh_account_number = #{rhAccountNumber}
            and df_scenario_uid = #{scenarioId}
    </update>

    <update id="deleteFromScenario" parameterType="map">
        update
            ${schema}.df_usage u
        set
            status_ind = #{updateStatusTo},
            df_scenario_uid = null,
            payee_account_number = null,
            service_fee = null,
            service_fee_amount = 0,
            net_amount = 0,
            gross_amount = 0,
            <include refid="StoredEntityMapper.update"/>
        where <include refid="IUsageMapper.scenarioBatchesFilter"/>
            and u.status_ind = #{updateStatusFrom}
    </update>

    <select id="findByScenarioId" parameterType="string" resultMap="salUsageResultMap">
        select
            u.df_usage_uid,
            u.gross_amount,
            u.service_fee_amount,
            u.net_amount,
            u.service_fee,
            u.payee_account_number,
            p.name payee_name,
            <include refid="ISalUsageMapper.salUsageColumns"/>
        from ${schema}.df_usage u
        join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
        join ${schema}.df_usage_batch ub on u.df_usage_batch_uid = ub.df_usage_batch_uid
        left join ${schema}.df_rightsholder rh on rh.rh_account_number = u.rh_account_number
        left join ${schema}.df_rightsholder p on p.rh_account_number = u.payee_account_number
        where u.df_scenario_uid = #{scenarioId}
    </select>

    <update id="calculateAmounts" parameterType="map">
        with total_weights_by_grade_group as (
            select
                usal.grade_group,
                <!-- assuming number_of_views = 1 for IB detail, so total_weight = sum(media_type_weight) -->
                sum(usal.media_type_weight * coalesce(usal.number_of_views, 1)) total_weight
            from ${schema}.df_usage u
            join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
            where u.df_scenario_uid = #{scenarioId}
            group by usal.grade_group
        ),
        fund_pool_sal_fields as (
            select
                (fp.sal_fields ->> 'item_bank_gross_amount')::numeric item_bank_gross_amount,
                (fp.sal_fields ->> 'grade_K_5_gross_amount')::numeric grade_k_5_gross_amount,
                (fp.sal_fields ->> 'grade_6_8_gross_amount')::numeric grade_6_8_gross_amount,
                (fp.sal_fields ->> 'grade_9_12_gross_amount')::numeric grade_9_12_gross_amount,
                (fp.sal_fields ->> 'service_fee')::numeric service_fee
            from ${schema}.df_scenario s
            join ${schema}.df_fund_pool fp on fp.df_fund_pool_uid = s.sal_fields ->> 'fund_pool_uid'
                and s.df_scenario_uid = #{scenarioId}
        ),
        fund_pool_gross_amounts_by_grade_group as (
            select
                'ITEM_BANK' grade_group,
                fpsf.item_bank_gross_amount gross_amount
            from fund_pool_sal_fields fpsf
            union
            select
                'GRADEK_5' grade_group,
                fpsf.grade_k_5_gross_amount gross_amount
            from fund_pool_sal_fields fpsf
            union
            select
                'GRADE6_8' grade_group,
                fpsf.grade_6_8_gross_amount gross_amount
            from fund_pool_sal_fields fpsf
            union
            select
                'GRADE9_12' grade_group,
                fpsf.grade_9_12_gross_amount gross_amount
            from fund_pool_sal_fields fpsf
        ),
        gross_amounts as (
            select
                u.df_usage_uid,
                <!-- assuming number_of_views = 1 for IB detail, so weight = media_type_weight -->
                fpga.gross_amount * usal.media_type_weight * coalesce(usal.number_of_views, 1) / tw.total_weight gross_amount
            from ${schema}.df_usage u
            join ${schema}.df_usage_sal usal on u.df_usage_uid = usal.df_usage_sal_uid
            join total_weights_by_grade_group tw on usal.grade_group = tw.grade_group
            join fund_pool_gross_amounts_by_grade_group fpga on usal.grade_group = fpga.grade_group
            where u.df_scenario_uid = #{scenarioId}
        )
        update ${schema}.df_usage u
        set
            gross_amount = ga.gross_amount,
            net_amount = ga.gross_amount * (1 - fpsf.service_fee),
            service_fee_amount = ga.gross_amount - ga.gross_amount * (1 - fpsf.service_fee),
            service_fee = fpsf.service_fee,
            <include refid="StoredEntityMapper.update"/>
        from gross_amounts ga
        join fund_pool_sal_fields fpsf on true
        where u.df_usage_uid = ga.df_usage_uid
    </update>

    <update id="updateRhAccountNumberAndStatusById" parameterType="map">
        update ${schema}.df_usage
        set
            status_ind = #{status},
            rh_account_number = #{rhAccountNumber},
            <include refid="StoredEntityMapper.update"/>
        where df_usage_uid = #{usageId}
    </update>
</mapper>
