<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="IFundPoolMapper">

    <resultMap id="fundPoolResultMap" type="FundPool" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_fund_pool_uid"/>
        <result property="productFamily" column="product_family"/>
        <result property="name" column="name"/>
        <result property="totalAmount" column="total_amount"/>
        <result property="comment" column="comment"/>
        <result property="salFields" column="sal_fields" typeHandler="SalFundPoolFieldsTypeHandler"/>
        <result property="aclciFields" column="aclci_fields" typeHandler="AclciFundPoolFieldsTypeHandler"/>
    </resultMap>

    <resultMap id="aaclFundPoolDetailResultMap" type="FundPoolDetail" extends="StoredEntityMapper.storedEntityResult">
        <result property="id" column="df_fund_pool_detail_uid"/>
        <result property="aggregateLicenseeClass.id" column="aggregate_licensee_class_id"/>
        <result property="aggregateLicenseeClass.discipline" column="discipline"/>
        <result property="aggregateLicenseeClass.enrollmentProfile" column="enrollment_profile"/>
        <result property="grossAmount" column="gross_amount"/>
    </resultMap>

    <sql id="fundPoolColumns">
        df_fund_pool_uid,
        product_family,
        name,
        total_amount,
        comment,
        sal_fields,
        aclci_fields,
        <include refid="StoredEntityMapper.additionalColumns"/>
    </sql>

    <insert id="insert" parameterType="FundPool">
        insert into ${schema}.df_fund_pool (
            <include refid="fundPoolColumns"/>
        ) values (
            #{id},
            #{productFamily},
            #{name},
            #{totalAmount},
            #{comment},
            #{salFields, typeHandler=SalFundPoolFieldsTypeHandler},
            #{aclciFields, typeHandler=AclciFundPoolFieldsTypeHandler},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <select id="findById" resultMap="fundPoolResultMap" parameterType="string">
        select
            <include refid="fundPoolColumns"/>
        from ${schema}.df_fund_pool
        where df_fund_pool_uid = #{fundPoolId}
    </select>

    <select id="findByProductFamily" resultMap="fundPoolResultMap">
        select
            <include refid="fundPoolColumns"/>
        from ${schema}.df_fund_pool
        where product_family = #{productFamily}
        order by updated_datetime desc
    </select>

    <delete id="delete" parameterType="string">
        delete from ${schema}.df_fund_pool
        where df_fund_pool_uid = #{fundPoolId}
    </delete>

    <select id="findNamesByUsageBatchId" resultType="string" parameterType="string">
        select distinct name
        from ${schema}.df_fund_pool
        where df_fund_pool_uid in (
            select ufas.df_fund_pool_uid
            from ${schema}.df_usage u
            join ${schema}.df_usage_fas ufas on u.df_usage_uid = ufas.df_usage_fas_uid
            where df_usage_batch_uid = #{df_usage_batch_id}
            union
            select ufas.df_fund_pool_uid
            from ${schema}.df_usage_archive u
            join ${schema}.df_usage_fas ufas on u.df_usage_archive_uid = ufas.df_usage_fas_uid
            where df_usage_batch_uid = #{df_usage_batch_id}
        )
    </select>

    <select id="findNtsNotAttachedToScenario" resultMap="fundPoolResultMap">
        select
            df_fund_pool_uid,
            name
        from ${schema}.df_fund_pool
        where product_family = #{productFamily}
            and df_fund_pool_uid not in (
                select nts_fields->>'pre_service_fee_fund_uid'
                from ${schema}.df_scenario
                where nts_fields->>'pre_service_fee_fund_uid' is not null
            )
        order by updated_datetime desc
    </select>

    <select id="findAaclNotAttachedToScenario" resultMap="fundPoolResultMap">
        select
            df_fund_pool_uid,
            name
        from ${schema}.df_fund_pool
        where product_family = #{productFamily}
            and df_fund_pool_uid not in (
                select aacl_fields->>'fund_pool_uid'
                from ${schema}.df_scenario
                where aacl_fields->>'fund_pool_uid' is not null
            )
        order by updated_datetime desc
    </select>

    <select id="findSalNotAttachedToScenario" resultMap="fundPoolResultMap">
        select
            df_fund_pool_uid,
            name,
            sal_fields
        from ${schema}.df_fund_pool
        where product_family = #{productFamily}
            and df_fund_pool_uid not in (
                select sal_fields->>'fund_pool_uid'
                from ${schema}.df_scenario
                where sal_fields->>'fund_pool_uid' is not null
            )
        order by updated_datetime desc
    </select>

    <select id="fundPoolExists" parameterType="map" resultType="boolean">
        select exists (
            select 1
            from ${schema}.df_fund_pool
            where product_family = #{productFamily}
                and name ilike #{name}
        )
    </select>

    <insert id="insertDetail" parameterType="FundPoolDetail">
        insert into ${schema}.df_fund_pool_detail (
            df_fund_pool_detail_uid,
            df_fund_pool_uid,
            df_aggregate_licensee_class_id,
            gross_amount,
            <include refid="StoredEntityMapper.additionalColumns"/>
        ) values (
            #{id},
            #{fundPoolId},
            #{aggregateLicenseeClass.id},
            #{grossAmount},
            <include refid="StoredEntityMapper.insert"/>
        )
    </insert>

    <select id="findDetailsByFundPoolId" parameterType="string" resultMap="aaclFundPoolDetailResultMap">
        select
            fpd.df_fund_pool_detail_uid,
            alc.aggregate_licensee_class_id,
            alc.discipline,
            alc.enrollment_profile,
            fpd.gross_amount,
            fpd.created_datetime,
            fpd.updated_datetime,
            fpd.created_by_user,
            fpd.updated_by_user,
            fpd.record_version
        from ${schema}.df_fund_pool_detail fpd
        join ${schema}.df_aggregate_licensee_class alc
            on alc.aggregate_licensee_class_id = fpd.df_aggregate_licensee_class_id
        where fpd.df_fund_pool_uid = #{fundPoolId}
        order by alc.aggregate_licensee_class_id
    </select>

    <delete id="deleteDetailsByFundPoolId" parameterType="string">
        delete from ${schema}.df_fund_pool_detail
        where df_fund_pool_uid = #{fundPoolId}
    </delete>
</mapper>
