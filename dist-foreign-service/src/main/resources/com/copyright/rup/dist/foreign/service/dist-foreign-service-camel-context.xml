<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://camel.apache.org/schema/spring
            http://camel.apache.org/schema/spring/camel-spring-2.18.3.xsd">

    <import resource="classpath:/com/copyright/rup/dist/common/service/dist-common-job-status-context.xml"/>

    <bean id="df.service.commonUsageMarshaller" class="com.copyright.rup.dist.foreign.service.impl.common.FdaCommonMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer"/>
    </bean>

    <bean id="df.service.commonUsageUnmarshaller" class="com.copyright.rup.dist.foreign.service.impl.common.FdaCommonUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer"/>
    </bean>

    <bean id="df.service.commonUdmUsageMarshaller" class="com.copyright.rup.dist.foreign.service.impl.common.FdaCommonMarshaller">
        <property name="serializer" ref="df.service.commonUdmUsageSerializer"/>
    </bean>

    <bean id="df.service.commonUdmUsageUnmarshaller" class="com.copyright.rup.dist.foreign.service.impl.common.FdaCommonUnmarshaller">
        <property name="deserializer" ref="df.service.commonUdmUsageDeserializer"/>
    </bean>

    <bean id="df.service.usageProducer"
          class="com.copyright.rup.dist.foreign.service.impl.common.CommonUsageProducer"/>

    <bean id="df.service.rightsProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.rights"/>
    </bean>

    <bean id="df.service.rhTaxProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.tax"/>
    </bean>

    <bean id="df.service.stmRhProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.stm.rh"/>
    </bean>

    <bean id="df.service.rhEligibilityProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.eligibility"/>
    </bean>

    <bean id="df.service.matchingProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.matching"/>
    </bean>

    <bean id="df.service.udmUsageProducer"
          class="com.copyright.rup.dist.foreign.service.impl.common.CommonUdmUsageProducer"/>

    <bean id="df.service.udmMatchingProducer" parent="df.service.udmUsageProducer">
        <property name="endPoint" value="direct:df.service.matching.udm"/>
    </bean>

    <bean id="df.service.udmRightsProducer" parent="df.service.udmUsageProducer">
        <property name="endPoint" value="direct:df.service.rights.udm"/>
    </bean>

    <bean id="common.jobStatusProducer" class="com.copyright.rup.dist.common.integration.camel.job.JobStatusProducer">
        <property name="producerTemplate" ref="df.service.producerTemplate"/>
        <property name="endPoint" value="direct:df.feeder.job.status"/>
    </bean>

    <bean id="df.service.paidUsageSubscriber"
          class="com.copyright.rup.dist.foreign.service.impl.usage.paid.PaidUsageSubscriber">
        <constructor-arg ref="df.service.lm.detail.paid.endpoint.topic"/>
        <constructor-arg ref="df.service.lm.detail.paid.endpoint"/>
    </bean>

    <bean id="commonRedrivePolicy" class="com.copyright.rup.dist.foreign.service.impl.common.RedrivePolicyFactoryBean">
        <property name="sqsEndpoint" ref="df.service.common.dlq.endpoint"/>
        <property name="maxReceiveCount" value="$RUP{dist.foreign.sqs.redrive.policy.max.receive.count}"/>
    </bean>

    <camelContext id="df.service.camelContext" xmlns="http://camel.apache.org/schema/spring">
        <contextScan/>
        <template id="df.service.producerTemplate"/>

        <endpoint id="df.service.lm.detail.paid.endpoint.topic" uri="$RUP{dist.foreign.endpoint.lm.detail.paid.topic}"/>

        <endpoint id="df.service.lm.detail.paid.endpoint" uri="$RUP{dist.foreign.endpoint.lm.detail.paid.queue}"/>

        <endpoint id="df.service.common.dlq.endpoint" uri="$RUP{dist.foreign.endpoint.common.dlq}"/>

        <!--chunk-based endpoints started -->

        <endpoint id="df.service.internal.matching.chunk.endpoint" uri="direct:df.service.matching"/>
        <endpoint id="df.service.matching.chunk.endpoint" uri="$RUP{dist.foreign.endpoint.matching}"/>

        <endpoint id="df.service.internal.matching.endpoint.udm" uri="direct:df.service.matching.udm"/>
        <endpoint id="df.service.matching.endpoint.udm" uri="$RUP{dist.foreign.endpoint.matching.udm}"/>

        <endpoint id="df.service.internal.rights.chunk.endpoint" uri="direct:df.service.rights"/>
        <endpoint id="df.service.rights.chunk.endpoint" uri="$RUP{dist.foreign.endpoint.rights}"/>

        <endpoint id="df.service.internal.stm.rh.chunk.endpoint" uri="direct:df.service.stm.rh"/>
        <endpoint id="df.service.stm.rh.chunk.endpoint" uri="$RUP{dist.foreign.endpoint.stm_rh}"/>

        <endpoint id="df.service.internal.tax.chunk.endpoint" uri="direct:df.service.tax"/>
        <endpoint id="df.service.rh.tax.chunk.endpoint" uri="$RUP{dist.foreign.endpoint.rh_tax}"/>

        <endpoint id="df.service.internal.eligibility.chunk.endpoint" uri="direct:df.service.eligibility"/>
        <endpoint id="df.service.rh.eligibility.chunk.endpoint" uri="$RUP{dist.foreign.endpoint.rh_eligibility}"/>

        <endpoint id="df.service.internal.rights.endpoint.udm" uri="direct:df.service.rights.udm"/>
        <endpoint id="df.service.rights.endpoint.udm" uri="$RUP{dist.foreign.endpoint.rights.udm}"/>

        <endpoint id="sf.service.ldmt.details.endpoint" uri="$RUP{dist.foreign.endpoint.ldmt.details}"/>

        <!--chunk-based endpoints finished -->

        <endpoint id="df.producer.job.status.internal" uri="direct:df.feeder.job.status"/>
        <endpoint id="df.producer.job.status.sns" uri="$RUP{dist.foreign.endpoint.job.status.topic}"/>

        <onException useOriginalMessage="true">
            <exception>com.copyright.rup.dist.foreign.service.impl.InconsistentUsageStateException</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log message="Exception on processed usage update. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}"
                 loggingLevel="INFO" logName="com.copyright.rup.dist.foreign.service.impl.chain.processor"/>
        </onException>

        <route id="jobStatusRoute">
            <from ref="df.producer.job.status.internal"/>
            <marshal>
                <custom ref="common.jobStatusMarshaller"/>
            </marshal>
            <to ref="df.producer.job.status.sns"/>
        </route>

        <route id="df.service.paidUsageRoute">
            <from ref="df.service.lm.detail.paid.endpoint"/>
            <unmarshal>
                <json library="Jackson"/>
            </unmarshal>
            <setBody>
                <simple>${body[Message]}</simple>
            </setBody>
            <log message="Consume paid usages from LM. Source=${headers.source}, Body: ${body}"
                 loggingLevel="DEBUG" logName="com.copyright.rup.dist"/>
            <unmarshal>
                <custom ref="df.service.paidUsageUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.usageRhIdValidator"/>
            <bean ref="df.service.paidUsageConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Exception during message processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.ldmtDetailsRoute">
            <from ref="sf.service.ldmt.details.endpoint"/>
            <log message="Consume LDMT details from Oracle. Body: ${body}"
                 loggingLevel="INFO" logName="com.copyright.rup.dist"/>
            <bean ref="df.service.ldmtDetailsJsonValidator"/>
            <unmarshal>
                <custom ref="df.service.ldmtDetailsUnmarshaller"/>
            </unmarshal>
            <log message="Receive LDMT details from Oracle. Body: ${body}"
                 loggingLevel="INFO" logName="com.copyright.rup.dist"/>
            <bean ref="df.service.ldmtDetailsValidator"/>
            <bean ref="df.service.ldmtDetailsConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Exception during LDMT details processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <!--chunk-based routes started -->

        <route id="df.service.matchingInternalRoute">
            <from ref="df.service.internal.matching.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.commonUsageMarshaller"/>
            </marshal>
            <to ref="df.service.matching.chunk.endpoint"/>
        </route>

        <route id="df.service.matchingRoute">
            <from ref="df.service.matching.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.commonUsageUnmarshaller"/>
            </unmarshal>

            <choice>
                <when>
                    <simple>
                        ${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.FAS_PRODUCT_FAMILY} ||
                        ${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.CLA_FAS_PRODUCT_FAMILY}
                    </simple>
                    <bean ref="df.service.fasMatchingConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.AACL_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.aaclMatchingConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.SAL_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.salMatchingConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.ACLCI_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.aclciMatchingConsumer"/>
                </when>
            </choice>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during matching processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.matchingInternalUdmRoute">
            <from ref="df.service.internal.matching.endpoint.udm"/>
            <marshal>
                <custom ref="df.service.commonUdmUsageMarshaller"/>
            </marshal>
            <to ref="df.service.matching.endpoint.udm"/>
        </route>

        <route id="df.service.matchingUdmRoute">
            <from ref="df.service.matching.endpoint.udm"/>
            <unmarshal>
                <custom ref="df.service.commonUdmUsageUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.udmMatchingConsumer"/>
            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during UDM matching processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.rightsInternalRoute">
            <from ref="df.service.internal.rights.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.commonUsageMarshaller"/>
            </marshal>
            <to ref="df.service.rights.chunk.endpoint"/>
        </route>

        <route id="df.service.rightsRoute">
            <from ref="df.service.rights.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.commonUsageUnmarshaller"/>
            </unmarshal>

            <choice>
                <when>
                    <simple>
                        ${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.FAS_PRODUCT_FAMILY} ||
                        ${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.CLA_FAS_PRODUCT_FAMILY}
                    </simple>
                    <bean ref="df.service.fasRightsConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.NTS_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.ntsRightsConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.AACL_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.aaclRightsConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.SAL_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.salRightsConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.ACLCI_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.aclciRightsConsumer"/>
                </when>
            </choice>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during rights processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.udmRightsInternalRoute">
            <from ref="df.service.internal.rights.endpoint.udm"/>
            <marshal>
                <custom ref="df.service.commonUdmUsageMarshaller"/>
            </marshal>
            <to ref="df.service.rights.endpoint.udm"/>
        </route>

        <route id="df.service.udmRightsRoute">
            <from ref="df.service.rights.endpoint.udm"/>
            <unmarshal>
                <custom ref="df.service.commonUdmUsageUnmarshaller"/>
            </unmarshal>

            <bean ref="df.service.udmRightsConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during UDM rights processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.taxInternalRoute">
            <from ref="df.service.internal.tax.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.commonUsageMarshaller"/>
            </marshal>
            <to ref="df.service.rh.tax.chunk.endpoint"/>
        </route>

        <route id="df.service.taxRoute">
            <from ref="df.service.rh.tax.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.commonUsageUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.rhTaxConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during RH tax processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.stmRhInternalRoute">
            <from ref="df.service.internal.stm.rh.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.commonUsageMarshaller"/>
            </marshal>
            <to ref="df.service.stm.rh.chunk.endpoint"/>
        </route>

        <route id="df.service.stmRhRoute">
            <from ref="df.service.stm.rh.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.commonUsageUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.stmRhConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during processing STM RH usages. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.eligibilityInternalRoute">
            <from ref="df.service.internal.eligibility.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.commonUsageMarshaller"/>
            </marshal>
            <to ref="df.service.rh.eligibility.chunk.endpoint"/>
        </route>

        <route id="df.service.eligibilityRoute">
            <from ref="df.service.rh.eligibility.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.commonUsageUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.rhEligibilityConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during RH eligibility processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <!--chunk-based routes finished -->

    </camelContext>
</beans>
