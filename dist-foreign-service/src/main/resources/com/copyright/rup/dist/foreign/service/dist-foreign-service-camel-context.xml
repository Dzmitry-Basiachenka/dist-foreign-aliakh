<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://camel.apache.org/schema/spring
            http://camel.apache.org/schema/spring/camel-spring-2.18.3.xsd">

    <bean id="df.service.usageMarshaller"
          class="com.copyright.rup.dist.foreign.service.impl.common.CommonUsageMarshaller"/>

    <bean id="df.service.usageUnmarshaller"
          class="com.copyright.rup.dist.foreign.service.impl.common.CommonUsageUnmarshaller"/>

    <bean id="df.service.matchingMarshaller" parent="df.service.usageMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer" />
    </bean>

    <bean id="df.service.matchingUnmarshaller" parent="df.service.usageUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer" />
    </bean>

    <bean id="df.service.rightsMarshaller" parent="df.service.usageMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer" />
    </bean>

    <bean id="df.service.rightsUnmarshaller" parent="df.service.usageUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer" />
    </bean>

    <bean id="df.service.rhTaxMarshaller" parent="df.service.usageMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer" />
    </bean>

    <bean id="df.service.rhTaxUnmarshaller" parent="df.service.usageUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer" />
    </bean>

    <bean id="df.service.rhEligibilityMarshaller" parent="df.service.usageMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer" />
    </bean>

    <bean id="df.service.rhEligibilityUnmarshaller" parent="df.service.usageUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer" />
    </bean>

    <bean id="df.service.usageProducer" class="com.copyright.rup.dist.foreign.service.impl.common.CommonUsageProducer" />

    <bean id="df.service.rightsProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.rights"/>
    </bean>

    <bean id="df.service.rhTaxProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.tax"/>
    </bean>

    <bean id="df.service.rhEligibilityProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.eligibility"/>
    </bean>

    <bean id="df.service.matchingProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.matching"/>
    </bean>

    <bean id="df.service.paidUsageSubscriber"
          class="com.copyright.rup.dist.foreign.service.impl.usage.paid.PaidUsageSubscriber">
        <constructor-arg ref="df.service.lm.detail.paid.endpoint.topic"/>
        <constructor-arg ref="df.service.lm.detail.paid.endpoint"/>
    </bean>

    <bean id="defaultRedeliveryPolicy" class="org.apache.camel.processor.RedeliveryPolicy"
          p:maximumRedeliveries="$RUP{dist.foreign.broker.redelivery.count}"
          p:redeliveryDelay="$RUP{dist.foreign.broker.redelivery.delay}"
          p:retryAttemptedLogLevel="INFO"
          p:retriesExhaustedLogLevel="INFO"
          p:asyncDelayedRedelivery="true"
          p:logExhausted="true"
          p:logStackTrace="true"
          p:logRetryStackTrace="true"
          p:logRetryAttempted="true"/>

    <camelContext id="df.service.camelContext" xmlns="http://camel.apache.org/schema/spring">
        <contextScan/>
        <template id="df.service.producerTemplate"/>

        <endpoint id="df.service.lm.detail.paid.endpoint.topic"
                  uri="aws-sns://$RUP{dist.foreign.aws.service.environment.prefix}-$RUP{dist.foreign.endpoint.lm.detail.paid.topic}?amazonSNSClient=#dist.common.integration.sns.client"/>

        <endpoint id="df.service.lm.detail.paid.endpoint"
                  uri="aws-sqs://$RUP{dist.foreign.aws.service.environment.prefix}-$RUP{dist.foreign.endpoint.lm.detail.paid.queue}?amazonSQSClient=#dist.common.integration.sqs.client&amp;messageAttributeNames=All"/>

        <endpoint id="df.service.internal.matching.endpoint" uri="direct:df.service.matching"/>
        <endpoint id="df.service.matching.endpoint" uri="$RUP{dist.foreign.endpoint.matching}"/>

        <endpoint id="df.service.internal.rights.endpoint" uri="direct:df.service.rights"/>
        <endpoint id="df.service.rights.endpoint" uri="$RUP{dist.foreign.endpoint.rights}"/>

        <endpoint id="df.service.internal.tax.endpoint" uri="direct:df.service.tax"/>
        <endpoint id="df.service.rh.tax.endpoint" uri="$RUP{dist.foreign.endpoint.rh_tax}"/>

        <endpoint id="df.service.internal.eligibility.endpoint" uri="direct:df.service.eligibility"/>
        <endpoint id="df.service.rh.eligibility.endpoint" uri="$RUP{dist.foreign.endpoint.rh_eligibility}"/>

        <route id="df.service.paidUsageRoute">
            <from ref="df.service.lm.detail.paid.endpoint"/>
            <!-- TODO {pliakh} replace converted with default Jackson unmarshaller -->
            <bean ref="df.service.snsNotificationMessageConverter"/>
            <log message="Consume paid usages from LM. Source=${headers.source}, Body: ${body}"
                 loggingLevel="DEBUG" logName="com.copyright.rup.dist"/>
            <unmarshal>
                <custom ref="df.service.paidUsageUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.paidUsageConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Exception during message processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.matchingInternalRoute">
            <from ref="df.service.internal.matching.endpoint"/>
            <marshal>
                <custom ref="df.service.matchingMarshaller"/>
            </marshal>
            <to ref="df.service.matching.endpoint"/>

            <onException redeliveryPolicyRef="defaultRedeliveryPolicy" useOriginalMessage="true">
                <exception>com.copyright.rup.common.exception.RupRuntimeException</exception>
            </onException>
        </route>

        <route id="df.service.matchingRoute">
            <from ref="df.service.matching.endpoint"/>
            <unmarshal>
                <custom ref="df.service.matchingUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.matchingConsumer"/>

            <onException redeliveryPolicyRef="defaultRedeliveryPolicy" useOriginalMessage="true">
                <exception>com.copyright.rup.common.exception.RupRuntimeException</exception>
            </onException>

            <onException useOriginalMessage="true">
                <exception>com.copyright.rup.dist.foreign.service.impl.InconsistentUsageStateException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
            </onException>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Exception during message processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.rightsInternalRoute">
            <from ref="df.service.internal.rights.endpoint"/>
            <marshal>
                <custom ref="df.service.rightsMarshaller"/>
            </marshal>
            <to ref="df.service.rights.endpoint"/>

            <onException redeliveryPolicyRef="defaultRedeliveryPolicy" useOriginalMessage="true">
                <exception>com.copyright.rup.common.exception.RupRuntimeException</exception>
            </onException>
        </route>

        <route id="df.service.rightsRoute">
            <from ref="df.service.rights.endpoint"/>
            <unmarshal>
                <custom ref="df.service.rightsUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.rightsConsumer"/>

            <onException redeliveryPolicyRef="defaultRedeliveryPolicy" useOriginalMessage="true">
                <exception>com.copyright.rup.common.exception.RupRuntimeException</exception>
            </onException>

            <onException useOriginalMessage="true">
                <exception>com.copyright.rup.dist.foreign.service.impl.InconsistentUsageStateException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
            </onException>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Exception during message processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.taxInternalRoute">
            <from ref="df.service.internal.tax.endpoint"/>
            <marshal>
                <custom ref="df.service.rhTaxMarshaller"/>
            </marshal>
            <to ref="df.service.rh.tax.endpoint"/>

            <onException redeliveryPolicyRef="defaultRedeliveryPolicy" useOriginalMessage="true">
                <exception>com.copyright.rup.common.exception.RupRuntimeException</exception>
            </onException>
        </route>

        <route id="df.service.taxRoute">
            <from ref="df.service.rh.tax.endpoint"/>
            <unmarshal>
                <custom ref="df.service.rhTaxUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.rhTaxConsumer"/>

            <onException redeliveryPolicyRef="defaultRedeliveryPolicy" useOriginalMessage="true">
                <exception>com.copyright.rup.common.exception.RupRuntimeException</exception>
            </onException>

            <onException useOriginalMessage="true">
                <exception>com.copyright.rup.dist.foreign.service.impl.InconsistentUsageStateException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
            </onException>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Exception during message processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.eligibilityInternalRoute">
            <from ref="df.service.internal.eligibility.endpoint"/>
            <marshal>
                <custom ref="df.service.rhEligibilityMarshaller"/>
            </marshal>
            <to ref="df.service.rh.eligibility.endpoint"/>

            <onException redeliveryPolicyRef="defaultRedeliveryPolicy" useOriginalMessage="true">
                <exception>com.copyright.rup.common.exception.RupRuntimeException</exception>
            </onException>
        </route>

        <route id="df.service.eligibilityRoute">
            <from ref="df.service.rh.eligibility.endpoint"/>
            <unmarshal>
                <custom ref="df.service.rhEligibilityUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.rhEligibilityConsumer"/>

            <onException redeliveryPolicyRef="defaultRedeliveryPolicy" useOriginalMessage="true">
                <exception>com.copyright.rup.common.exception.RupRuntimeException</exception>
            </onException>

            <onException useOriginalMessage="true">
                <exception>com.copyright.rup.dist.foreign.service.impl.InconsistentUsageStateException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
            </onException>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Exception during message processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>
    </camelContext>
</beans>
