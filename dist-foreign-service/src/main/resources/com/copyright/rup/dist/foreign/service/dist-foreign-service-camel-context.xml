<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
            http://camel.apache.org/schema/spring
            http://camel.apache.org/schema/spring/camel-spring-2.18.3.xsd">

    <import resource="classpath:/com/copyright/rup/dist/common/service/dist-common-job-status-context.xml"/>

    <bean id="df.service.usageMarshaller"
          class="com.copyright.rup.dist.foreign.service.impl.common.CommonUsageMarshaller"/>

    <bean id="df.service.usageUnmarshaller"
          class="com.copyright.rup.dist.foreign.service.impl.common.CommonUsageUnmarshaller"/>

    <bean id="df.service.matchingMarshaller" parent="df.service.usageMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer" />
    </bean>

    <bean id="df.service.matchingUnmarshaller" parent="df.service.usageUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer" />
    </bean>

    <bean id="df.service.rightsMarshaller" parent="df.service.usageMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer" />
    </bean>

    <bean id="df.service.rightsUnmarshaller" parent="df.service.usageUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer" />
    </bean>

    <bean id="df.service.rhTaxMarshaller" parent="df.service.usageMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer" />
    </bean>

    <bean id="df.service.rhTaxUnmarshaller" parent="df.service.usageUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer" />
    </bean>

    <bean id="df.service.stmRhMarshaller" parent="df.service.usageMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer" />
    </bean>

    <bean id="df.service.stmRhUnmarshaller" parent="df.service.usageUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer" />
    </bean>

    <bean id="df.service.rhEligibilityMarshaller" parent="df.service.usageMarshaller">
        <property name="serializer" ref="df.service.commonUsageSerializer" />
    </bean>

    <bean id="df.service.rhEligibilityUnmarshaller" parent="df.service.usageUnmarshaller">
        <property name="deserializer" ref="df.service.commonUsageDeserializer" />
    </bean>

    <bean id="df.service.usageProducer" class="com.copyright.rup.dist.foreign.service.impl.common.CommonUsageProducer" />

    <bean id="df.service.rightsProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.rights"/>
    </bean>

    <bean id="df.service.rhTaxProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.tax"/>
    </bean>

    <bean id="df.service.stmRhProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.stm.rh"/>
    </bean>

    <bean id="df.service.rhEligibilityProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.eligibility"/>
    </bean>

    <bean id="df.service.matchingProducer" parent="df.service.usageProducer">
        <property name="endPoint" value="direct:df.service.matching"/>
    </bean>

    <bean id="common.jobStatusProducer" class="com.copyright.rup.dist.common.integration.camel.job.JobStatusProducer">
        <property name="producerTemplate" ref="df.service.producerTemplate"/>
        <property name="endPoint" value="direct:df.feeder.job.status"/>
    </bean>

    <bean id="df.service.paidUsageSubscriber"
          class="com.copyright.rup.dist.foreign.service.impl.usage.paid.PaidUsageSubscriber">
        <constructor-arg ref="df.service.lm.detail.paid.endpoint.topic"/>
        <constructor-arg ref="df.service.lm.detail.paid.endpoint"/>
    </bean>

    <bean id="commonRedrivePolicy" class="com.copyright.rup.dist.foreign.service.impl.common.RedrivePolicyFactoryBean">
        <property name="sqsEndpoint" ref="df.service.common.dlq.endpoint"/>
        <property name="maxReceiveCount" value="$RUP{dist.foreign.sqs.redrive.policy.max.receive.count}"/>
    </bean>

    <camelContext id="df.service.camelContext" xmlns="http://camel.apache.org/schema/spring">
        <contextScan/>
        <template id="df.service.producerTemplate"/>

        <endpoint id="df.service.lm.detail.paid.endpoint.topic" uri="$RUP{dist.foreign.endpoint.lm.detail.paid.topic}"/>

        <endpoint id="df.service.lm.detail.paid.endpoint" uri="$RUP{dist.foreign.endpoint.lm.detail.paid.queue}"/>

        <endpoint id="df.service.common.dlq.endpoint" uri="$RUP{dist.foreign.endpoint.common.dlq}"/>

        <endpoint id="df.service.internal.matching.endpoint" uri="direct:df.service.matching"/>
        <endpoint id="df.service.matching.endpoint" uri="$RUP{dist.foreign.endpoint.matching}"/>

        <endpoint id="df.service.internal.rights.endpoint" uri="direct:df.service.rights"/>
        <endpoint id="df.service.rights.endpoint" uri="$RUP{dist.foreign.endpoint.rights}"/>

        <endpoint id="df.service.internal.stm.rh.endpoint" uri="direct:df.service.stm.rh"/>
        <endpoint id="df.service.stm.rh.endpoint" uri="$RUP{dist.foreign.endpoint.stm_rh}"/>

        <endpoint id="df.service.internal.tax.endpoint" uri="direct:df.service.tax"/>
        <endpoint id="df.service.rh.tax.endpoint" uri="$RUP{dist.foreign.endpoint.rh_tax}"/>

        <endpoint id="df.service.internal.eligibility.endpoint" uri="direct:df.service.eligibility"/>
        <endpoint id="df.service.rh.eligibility.endpoint" uri="$RUP{dist.foreign.endpoint.rh_eligibility}"/>

        <!--chunk-based endpoints started -->

        <endpoint id="df.service.internal.matching.chunk.endpoint" uri="direct:df.service.chunk.matching"/>
        <endpoint id="df.service.matching.chunk.endpoint" uri="#{chunkUriFormatter.format('$RUP{dist.foreign.endpoint.matching}')}"/>

        <endpoint id="df.service.internal.rights.chunk.endpoint" uri="direct:df.service.chunk.rights"/>
        <endpoint id="df.service.rights.chunk.endpoint" uri="#{chunkUriFormatter.format('$RUP{dist.foreign.endpoint.rights}')}"/>

        <endpoint id="df.service.internal.stm.rh.chunk.endpoint" uri="direct:df.service.chunk.stm.rh"/>
        <endpoint id="df.service.stm.rh.chunk.endpoint" uri="#{chunkUriFormatter.format('$RUP{dist.foreign.endpoint.stm_rh}')}"/>

        <endpoint id="df.service.internal.tax.chunk.endpoint" uri="direct:df.service.chunk.tax"/>
        <endpoint id="df.service.rh.tax.chunk.endpoint" uri="#{chunkUriFormatter.format('$RUP{dist.foreign.endpoint.rh_tax}')}"/>

        <endpoint id="df.service.internal.eligibility.chunk.endpoint" uri="direct:df.service.chunk.eligibility"/>
        <endpoint id="df.service.rh.eligibility.chunk.endpoint" uri="#{chunkUriFormatter.format('$RUP{dist.foreign.endpoint.rh_eligibility}')}"/>

        <!--chunk-based endpoints finished -->

        <endpoint id="df.producer.job.status.internal" uri="direct:df.feeder.job.status"/>
        <endpoint id="df.producer.job.status.sns" uri="$RUP{dist.foreign.endpoint.job.status.topic}"/>

        <onException useOriginalMessage="true">
            <exception>com.copyright.rup.dist.foreign.service.impl.InconsistentUsageStateException</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log message="Exception on processed usage update. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}"
                 loggingLevel="INFO" logName="com.copyright.rup.dist.foreign.service.impl.chain.processor"/>
        </onException>

        <route id="jobStatusRoute">
            <from ref="df.producer.job.status.internal"/>
            <marshal>
                <custom ref="common.jobStatusMarshaller"/>
            </marshal>
            <to ref="df.producer.job.status.sns"/>
        </route>

        <route id="df.service.paidUsageRoute">
            <from ref="df.service.lm.detail.paid.endpoint"/>
            <unmarshal>
                <json library="Jackson"/>
            </unmarshal>
            <setBody>
                <simple>${body[Message]}</simple>
            </setBody>
            <log message="Consume paid usages from LM. Source=${headers.source}, Body: ${body}"
                 loggingLevel="DEBUG" logName="com.copyright.rup.dist"/>
            <unmarshal>
                <custom ref="df.service.paidUsageUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.usageRhIdValidator"/>
            <bean ref="df.service.paidUsageConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="Exception during message processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.matchingInternalRoute">
            <from ref="df.service.internal.matching.endpoint"/>
            <marshal>
                <custom ref="df.service.matchingMarshaller"/>
            </marshal>
            <to ref="df.service.matching.endpoint"/>
        </route>

        <route id="df.service.matchingRoute">
            <from ref="df.service.matching.endpoint"/>
            <unmarshal>
                <custom ref="df.service.matchingUnmarshaller"/>
            </unmarshal>

            <choice>
                <when>
                    <simple>
                        ${body.getProductFamily()} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.FAS_PRODUCT_FAMILY} ||
                        ${body.getProductFamily()} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.CLA_FAS_PRODUCT_FAMILY}
                    </simple>
                    <bean ref="df.service.fasMatchingConsumer"/>
                </when>
                <when>
                    <simple>${body.getProductFamily()} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.AACL_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.aaclMatchingConsumer"/>
                </when>
            </choice>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during matching processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.rightsInternalRoute">
            <from ref="df.service.internal.rights.endpoint"/>
            <marshal>
                <custom ref="df.service.rightsMarshaller"/>
            </marshal>
            <to ref="df.service.rights.endpoint"/>
        </route>

        <route id="df.service.rightsRoute">
            <from ref="df.service.rights.endpoint"/>
            <unmarshal>
                <custom ref="df.service.rightsUnmarshaller"/>
            </unmarshal>

            <choice>
                <when>
                    <simple>
                        ${body.getProductFamily()} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.FAS_PRODUCT_FAMILY} ||
                        ${body.getProductFamily()} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.CLA_FAS_PRODUCT_FAMILY}
                    </simple>
                    <bean ref="df.service.fasRightsConsumer"/>
                </when>
                <when>
                    <simple>${body.getProductFamily()} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.NTS_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.ntsRightsConsumer"/>
                </when>
                <when>
                    <simple>${body.getProductFamily()} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.AACL_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.aaclRightsConsumer"/>
                </when>
            </choice>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during rights processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.taxInternalRoute">
            <from ref="df.service.internal.tax.endpoint"/>
            <marshal>
                <custom ref="df.service.rhTaxMarshaller"/>
            </marshal>
            <to ref="df.service.rh.tax.endpoint"/>
        </route>

        <route id="df.service.taxRoute">
            <from ref="df.service.rh.tax.endpoint"/>
            <unmarshal>
                <custom ref="df.service.rhTaxUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.rhTaxConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during RH tax processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.stmRhInternalRoute">
            <from ref="df.service.internal.stm.rh.endpoint"/>
            <marshal>
                <custom ref="df.service.stmRhMarshaller"/>
            </marshal>
            <to ref="df.service.stm.rh.endpoint"/>
        </route>

        <route id="df.service.stmRhRoute">
            <from ref="df.service.stm.rh.endpoint"/>
            <unmarshal>
                <custom ref="df.service.stmRhUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.stmRhConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during processing STM RH usages. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.eligibilityInternalRoute">
            <from ref="df.service.internal.eligibility.endpoint"/>
            <marshal>
                <custom ref="df.service.rhEligibilityMarshaller"/>
            </marshal>
            <to ref="df.service.rh.eligibility.endpoint"/>
        </route>

        <route id="df.service.eligibilityRoute">
            <from ref="df.service.rh.eligibility.endpoint"/>
            <unmarshal>
                <custom ref="df.service.rhEligibilityUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.rhEligibilityConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during RH eligibility processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <!--chunk-based routes started -->

        <route id="df.service.matchingInternalChunkRoute">
            <from ref="df.service.internal.matching.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.matchingChunkMarshaller"/>
            </marshal>
            <to ref="df.service.matching.chunk.endpoint"/>
        </route>

        <route id="df.service.matchingChunkRoute">
            <from ref="df.service.matching.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.matchingChunkUnmarshaller"/>
            </unmarshal>

            <choice>
                <when>
                    <simple>
                        ${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.FAS_PRODUCT_FAMILY} ||
                        ${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.CLA_FAS_PRODUCT_FAMILY}
                    </simple>
                    <bean ref="df.service.fasMatchingChunkConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.AACL_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.aaclMatchingChunkConsumer"/>
                </when>
            </choice>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during matching processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.rightsInternalChunkRoute">
            <from ref="df.service.internal.rights.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.rightsChunkMarshaller"/>
            </marshal>
            <to ref="df.service.rights.chunk.endpoint"/>
        </route>

        <route id="df.service.rightsChunkRoute">
            <from ref="df.service.rights.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.rightsChunkUnmarshaller"/>
            </unmarshal>

            <choice>
                <when>
                    <simple>
                        ${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.FAS_PRODUCT_FAMILY} ||
                        ${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.CLA_FAS_PRODUCT_FAMILY}
                    </simple>
                    <bean ref="df.service.fasRightsChunkConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.NTS_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.ntsRightsChunkConsumer"/>
                </when>
                <when>
                    <simple>${headers.productFamily} == ${type:com.copyright.rup.dist.foreign.domain.FdaConstants.AACL_PRODUCT_FAMILY}</simple>
                    <bean ref="df.service.aaclRightsChunkConsumer"/>
                </when>
            </choice>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during rights processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.taxInternalChunkRoute">
            <from ref="df.service.internal.tax.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.rhTaxChunkMarshaller"/>
            </marshal>
            <to ref="df.service.rh.tax.chunk.endpoint"/>
        </route>

        <route id="df.service.taxChunkRoute">
            <from ref="df.service.rh.tax.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.rhTaxChunkUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.rhTaxChunkConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during RH tax processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.stmRhInternalChunkRoute">
            <from ref="df.service.internal.stm.rh.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.stmRhChunkMarshaller"/>
            </marshal>
            <to ref="df.service.stm.rh.chunk.endpoint"/>
        </route>

        <route id="df.service.stmRhChunkRoute">
            <from ref="df.service.stm.rh.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.stmRhChunkUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.stmRhChunkConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during processing STM RH usages. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <route id="df.service.eligibilityInternalChunkRoute">
            <from ref="df.service.internal.eligibility.chunk.endpoint"/>
            <marshal>
                <custom ref="df.service.rhEligibilityChunkMarshaller"/>
            </marshal>
            <to ref="df.service.rh.eligibility.chunk.endpoint"/>
        </route>

        <route id="df.service.eligibilityChunkRoute">
            <from ref="df.service.rh.eligibility.chunk.endpoint"/>
            <unmarshal>
                <custom ref="df.service.rhEligibilityChunkUnmarshaller"/>
            </unmarshal>
            <bean ref="df.service.rhEligibilityChunkConsumer"/>

            <onException useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>false</constant>
                </handled>
                <log message="Exception during RH eligibility processing. ExceptionMessage=${exception.message}, ExceptionStacktrace=${exception.stacktrace}, Body=${body}"
                     loggingLevel="WARN" logName="com.copyright.rup.dist"/>
            </onException>
        </route>

        <!--chunk-based routes finished -->

    </camelContext>
</beans>
